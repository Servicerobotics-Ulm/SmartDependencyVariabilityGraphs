/**
 * generated by Xtext 2.27.0
 */
package org.xtext.tcl.formatting2;

import BbDvgTcl.Behavior;
import BbDvgTcl.Block;
import BbDvgTcl.ErrorCollection;
import BbDvgTcl.KBIsAGroup;
import BbDvgTcl.KBIsAGroupCollection;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.tcl.services.TclGrammarAccess;

@SuppressWarnings("all")
public class TclFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private TclGrammarAccess _tclGrammarAccess;

  protected void _format(final Behavior behavior, @Extension final IFormattableDocument document) {
    document.<BbDvgTcl.Module>format(behavior.getModule());
    document.<ErrorCollection>format(behavior.getErrorcollection());
    document.<KBIsAGroupCollection>format(behavior.getKbisagroupcollection());
    EList<Block> _block = behavior.getBlock();
    for (final Block block : _block) {
      document.<Block>format(block);
    }
  }

  protected void _format(final KBIsAGroupCollection kBIsAGroupCollection, @Extension final IFormattableDocument document) {
    EList<KBIsAGroup> _kbisagroup = kBIsAGroupCollection.getKbisagroup();
    for (final KBIsAGroup kBIsAGroup : _kbisagroup) {
      document.<KBIsAGroup>format(kBIsAGroup);
    }
  }

  public void format(final Object behavior, final IFormattableDocument document) {
    if (behavior instanceof XtextResource) {
      _format((XtextResource)behavior, document);
      return;
    } else if (behavior instanceof Behavior) {
      _format((Behavior)behavior, document);
      return;
    } else if (behavior instanceof KBIsAGroupCollection) {
      _format((KBIsAGroupCollection)behavior, document);
      return;
    } else if (behavior instanceof EObject) {
      _format((EObject)behavior, document);
      return;
    } else if (behavior == null) {
      _format((Void)null, document);
      return;
    } else if (behavior != null) {
      _format(behavior, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(behavior, document).toString());
    }
  }
}
