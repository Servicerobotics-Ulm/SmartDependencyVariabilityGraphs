/**
 * generated by Xtext 2.21.0
 */
package org.xtext.tcl.generator;

import BbDvgTcl.Abort;
import BbDvgTcl.AbortActionInstruction;
import BbDvgTcl.AbstractCompositeInstruction;
import BbDvgTcl.AbstractInitPort;
import BbDvgTcl.AbstractTCB;
import BbDvgTcl.ActionInstruction;
import BbDvgTcl.Any;
import BbDvgTcl.AttributeValues;
import BbDvgTcl.Behavior;
import BbDvgTcl.Block;
import BbDvgTcl.CallSequence;
import BbDvgTcl.CompositeInstruction;
import BbDvgTcl.DeletePlan;
import BbDvgTcl.Else;
import BbDvgTcl.ElseIf;
import BbDvgTcl.ErrorRef;
import BbDvgTcl.EventActivation;
import BbDvgTcl.EventHandler;
import BbDvgTcl.EventMode;
import BbDvgTcl.Function;
import BbDvgTcl.FunctionCall;
import BbDvgTcl.GenerationType;
import BbDvgTcl.GetValue;
import BbDvgTcl.IfInstruction;
import BbDvgTcl.Import;
import BbDvgTcl.InitialKnowledge;
import BbDvgTcl.InternalVariable;
import BbDvgTcl.InternalVariableDefinition;
import BbDvgTcl.InternalVariableScope;
import BbDvgTcl.KBDelete;
import BbDvgTcl.KBInteraction;
import BbDvgTcl.KBQuery;
import BbDvgTcl.KBQueryAll;
import BbDvgTcl.KBUpdate;
import BbDvgTcl.KeyAttribute;
import BbDvgTcl.LispInstruction;
import BbDvgTcl.Param;
import BbDvgTcl.Plan;
import BbDvgTcl.Priority;
import BbDvgTcl.Query;
import BbDvgTcl.ReturnMessage;
import BbDvgTcl.Rule;
import BbDvgTcl.SameNameTCBs;
import BbDvgTcl.SameSignatureTCBs;
import BbDvgTcl.Send;
import BbDvgTcl.State;
import BbDvgTcl.SubName;
import BbDvgTcl.Success;
import BbDvgTcl.TCB;
import BbDvgTcl.TCBCall;
import BbDvgTcl.TCBRef;
import BbDvgTcl.TclInput;
import BbDvgTcl.TclOneOf;
import BbDvgTcl.TclOutput;
import BbDvgTcl.TclParallel;
import BbDvgTcl.TclParameter;
import BbDvgTcl.TclPrecondition;
import BbDvgTcl.TclPrefix;
import BbDvgTcl.VariabilityEntity;
import BbDvgTcl.VariableRef;
import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class TclGenerator extends AbstractGenerator {
  public enum CurrentBlockType {
    UNDEFINED,

    TCB,

    FUNCTION;
  }

  private String behaviorName;

  private boolean module;

  private String moduleName;

  private Requirements req;

  private List<Function> provideFunctions;

  private Map<Function, List<String>> provideFunctionRequirementSpecifications;

  private List<TCB> provideTCBs;

  private List<TCB> configureTCBs;

  private boolean requiresSolver;

  private TclGenerator.CurrentBlockType cbt;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.requiresSolver = false;
    this.cbt = TclGenerator.CurrentBlockType.UNDEFINED;
    this.module = false;
    Requirements _requirements = new Requirements();
    this.req = _requirements;
    ArrayList<Function> _arrayList = new ArrayList<Function>();
    this.provideFunctions = _arrayList;
    HashMap<Function, List<String>> _hashMap = new HashMap<Function, List<String>>();
    this.provideFunctionRequirementSpecifications = _hashMap;
    ArrayList<TCB> _arrayList_1 = new ArrayList<TCB>();
    this.provideTCBs = _arrayList_1;
    ArrayList<TCB> _arrayList_2 = new ArrayList<TCB>();
    this.configureTCBs = _arrayList_2;
    Iterable<Behavior> _filter = Iterables.<Behavior>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Behavior.class);
    for (final Behavior i : _filter) {
      {
        EList<Import> _import = i.getImport();
        for (final Import j : _import) {
          this.collectSolverInterfaceData(j.getBehavior());
        }
        this.collectSolverInterfaceData(i);
      }
    }
    String code = "";
    Iterable<Behavior> _filter_1 = Iterables.<Behavior>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Behavior.class);
    for (final Behavior i_1 : _filter_1) {
      {
        String _code = code;
        String _generateInitialKnowledge = this.generateInitialKnowledge(i_1);
        code = (_code + _generateInitialKnowledge);
        String _code_1 = code;
        code = (_code_1 + "\n\n");
        String _code_2 = code;
        String _root = this.root(i_1);
        code = (_code_2 + _root);
      }
    }
    if (this.requiresSolver) {
      String solverInterfaceCode = "";
      String _solverInterfaceCode = solverInterfaceCode;
      CharSequence _generateWriteToFileFunction = Helpers.generateWriteToFileFunction();
      solverInterfaceCode = (_solverInterfaceCode + _generateWriteToFileFunction);
      String _solverInterfaceCode_1 = solverInterfaceCode;
      CharSequence _generateGetDataForSolver = this.generateGetDataForSolver();
      solverInterfaceCode = (_solverInterfaceCode_1 + _generateGetDataForSolver);
      String _solverInterfaceCode_2 = solverInterfaceCode;
      CharSequence _generateWriteDataForSolver = this.generateWriteDataForSolver();
      solverInterfaceCode = (_solverInterfaceCode_2 + _generateWriteDataForSolver);
      String _solverInterfaceCode_3 = solverInterfaceCode;
      CharSequence _generateExecuteSolver = this.generateExecuteSolver();
      solverInterfaceCode = (_solverInterfaceCode_3 + _generateExecuteSolver);
      String _solverInterfaceCode_4 = solverInterfaceCode;
      CharSequence _generateReadDecodeAndWriteToKB = LispFunctions.generateReadDecodeAndWriteToKB();
      solverInterfaceCode = (_solverInterfaceCode_4 + _generateReadDecodeAndWriteToKB);
      fsa.generateFile("solverInterfaceCode.smartTcl", solverInterfaceCode);
    }
    fsa.generateFile((this.behaviorName + ".smartTcl"), code);
  }

  public void collectSolverInterfaceData(final Behavior b) {
    EList<Block> _block = b.getBlock();
    for (final Block i : _block) {
      if ((i instanceof TCB)) {
        AbstractInitPort _provides = ((TCB)i).getProvides();
        boolean _tripleNotEquals = (_provides != null);
        if (_tripleNotEquals) {
          this.provideTCBs.add(((TCB)i));
        }
        VariabilityEntity _configures = ((TCB)i).getConfigures();
        boolean _tripleNotEquals_1 = (_configures != null);
        if (_tripleNotEquals_1) {
          this.configureTCBs.add(((TCB)i));
        }
      } else {
        if ((i instanceof Function)) {
          AbstractInitPort _provides_1 = ((Function)i).getProvides();
          boolean _tripleNotEquals_2 = (_provides_1 != null);
          if (_tripleNotEquals_2) {
            this.provideFunctions.add(((Function)i));
          }
          EList<TclInput> _input = ((Function)i).getInput();
          for (final TclInput j : _input) {
            if (((((Function)i).getProvides() != null) && (j.getRequirementspecification() != null))) {
              boolean _containsKey = this.provideFunctionRequirementSpecifications.containsKey(i);
              boolean _not = (!_containsKey);
              if (_not) {
                ArrayList<String> _arrayList = new ArrayList<String>();
                this.provideFunctionRequirementSpecifications.put(((Function)i), _arrayList);
              }
              List<String> tmp = this.provideFunctionRequirementSpecifications.get(i);
              tmp.add(j.getRequirementspecification().getName());
              this.provideFunctionRequirementSpecifications.put(((Function)i), tmp);
            }
          }
        }
      }
    }
  }

  public String generateInitialKnowledge(final Behavior b) {
    StringBuilder code = new StringBuilder();
    InitialKnowledge _initialknowledge = b.getInitialknowledge();
    boolean _tripleNotEquals = (_initialknowledge != null);
    if (_tripleNotEquals) {
      EList<KBUpdate> _kbupdate = b.getInitialknowledge().getKbupdate();
      for (final KBUpdate i : _kbupdate) {
        {
          code.append("(tcl-kb-query :key \'(is-a");
          EList<KeyAttribute> _keyattribute = i.getKeyattribute();
          for (final KeyAttribute j : _keyattribute) {
            {
              code.append(" ");
              code.append(j.getAttribute().getName());
            }
          }
          code.append(") :value `((is-a ");
          code.append(i.getKbisagroup().getName());
          code.append(")");
          EList<AttributeValues> _attributevalues = i.getAttributevalues();
          for (final AttributeValues j_1 : _attributevalues) {
            {
              code.append("(");
              code.append(j_1.getAttribute().getName());
              code.append(" ");
              code.append(this.getCompositeInstructionCode(j_1.getCompositeinstruction()));
              code.append(")");
            }
          }
          code.append(")");
          code.append(")");
        }
      }
    }
    return code.toString();
  }

  public String root(final Behavior b) {
    this.behaviorName = b.getName();
    BbDvgTcl.Module _module = b.getModule();
    boolean _tripleNotEquals = (_module != null);
    if (_tripleNotEquals) {
      this.module = true;
      this.moduleName = b.getModule().getName();
    }
    StringBuilder code = new StringBuilder();
    EList<Block> _block = b.getBlock();
    for (final Block i : _block) {
      code.append(this.block(i));
    }
    return code.toString();
  }

  public String block(final Block b) {
    StringBuilder code = new StringBuilder();
    GenerationType _genType = b.getGenType();
    boolean _notEquals = (!Objects.equal(_genType, GenerationType.IGNORE));
    if (_notEquals) {
      if ((b instanceof TCB)) {
        code.append(this.TCB(((TCB)b)));
      } else {
        if ((b instanceof EventHandler)) {
          code.append(this.EventHandler(((EventHandler)b)));
        } else {
          if ((b instanceof Rule)) {
            code.append(this.Rule(((Rule)b)));
          } else {
            if ((b instanceof Function)) {
              code.append(this.Function(((Function)b)));
            } else {
              if ((b instanceof SameSignatureTCBs)) {
                EList<TCB> _tcb = ((SameSignatureTCBs)b).getTcb();
                for (final TCB i : _tcb) {
                  code.append(this.block(i));
                }
              } else {
                if ((b instanceof SameNameTCBs)) {
                  EList<TCB> _tcb_1 = ((SameNameTCBs)b).getTcb();
                  for (final TCB i_1 : _tcb_1) {
                    code.append(this.block(i_1));
                  }
                }
              }
            }
          }
        }
      }
    }
    return code.toString();
  }

  public String generateRequirementParameters() {
    List<String> cr = this.req.getConstraintRequirements();
    List<String> pr = this.req.getPreferenceRequirements();
    String code = "";
    for (int i = 0; (i < cr.size()); i++) {
      String _code = code;
      String _get = cr.get(i);
      String _plus = ("?" + _get);
      String _plus_1 = (_plus + " ");
      code = (_code + _plus_1);
    }
    for (int i = 0; (i < pr.size()); i++) {
      String _code = code;
      String _get = pr.get(i);
      String _plus = ("?" + _get);
      String _plus_1 = (_plus + " ");
      code = (_code + _plus_1);
    }
    return code;
  }

  public String generateWriteRequirementsForSolver() {
    List<String> cr = this.req.getConstraintRequirements();
    List<String> pr = this.req.getPreferenceRequirements();
    String code = "";
    for (int i = 0; (i < cr.size()); i++) {
      String _code = code;
      String _get = cr.get(i);
      String _plus = ("(writeToFile \'" + _get);
      String _plus_1 = (_plus + "(list ?");
      String _get_1 = cr.get(i);
      String _plus_2 = (_plus_1 + _get_1);
      String _plus_3 = (_plus_2 + "))");
      code = (_code + _plus_3);
    }
    for (int i = 0; (i < pr.size()); i++) {
      String _code = code;
      String _get = cr.get(i);
      String _plus = ("(writeToFile \'" + _get);
      String _plus_1 = (_plus + " ?");
      String _get_1 = cr.get(i);
      String _plus_2 = (_plus_1 + _get_1);
      String _plus_3 = (_plus_2 + ")");
      code = (_code + _plus_3);
    }
    return code;
  }

  public String TCB(final TCB tcb) {
    String _xblockexpression = null;
    {
      this.cbt = TclGenerator.CurrentBlockType.TCB;
      boolean _isRequirementSpecification = tcb.isRequirementSpecification();
      if (_isRequirementSpecification) {
        this.requiresSolver = true;
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(define-tcb (");
      String _name = this.getName(tcb);
      _builder.append(_name);
      _builder.newLineIfNotEmpty();
      {
        EList<TclInput> _input = tcb.getInput();
        for(final TclInput i : _input) {
          _builder.append("?");
          String _name_1 = i.getName();
          _builder.append(_name_1);
          _builder.append(" ");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        if (((tcb.isRequirementSpecification() && (tcb.getRealizes() != null)) && this.req.determine(tcb.getRealizes()))) {
          String _generateRequirementParameters = this.generateRequirementParameters();
          _builder.append(_generateRequirementParameters);
          _builder.newLineIfNotEmpty();
        }
      }
      {
        int _size = tcb.getOutput().size();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          _builder.append("=> ");
          _builder.newLine();
          {
            EList<TclOutput> _output = tcb.getOutput();
            for(final TclOutput i_1 : _output) {
              _builder.append("?");
              String _name_2 = i_1.getName();
              _builder.append(_name_2);
              _builder.append(" ");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append(")");
      _builder.newLine();
      _builder.newLine();
      {
        BbDvgTcl.Module _module = tcb.getModule();
        boolean _tripleNotEquals = (_module != null);
        if (_tripleNotEquals) {
          _builder.append("(module \"");
          String _name_3 = tcb.getModule().getName();
          _builder.append(_name_3);
          _builder.append("\")");
          _builder.newLineIfNotEmpty();
        } else {
          if (this.module) {
            _builder.append("(module \"");
            _builder.append(this.moduleName);
            _builder.append("\")");
            _builder.newLineIfNotEmpty();
          }
        }
      }
      _builder.newLine();
      {
        int _size_1 = tcb.getRule().size();
        boolean _greaterThan_1 = (_size_1 > 0);
        if (_greaterThan_1) {
          _builder.append("(rules (");
          _builder.newLine();
          {
            EList<Rule> _rule = tcb.getRule();
            for(final Rule i_2 : _rule) {
              String _name_4 = i_2.getName();
              _builder.append(_name_4);
              _builder.append(" ");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("))\t");
          _builder.newLine();
        }
      }
      _builder.newLine();
      {
        TclPrecondition _precondition = tcb.getPrecondition();
        boolean _tripleNotEquals_1 = (_precondition != null);
        if (_tripleNotEquals_1) {
          _builder.append("(precondition ");
          String _compositeInstructionCode = this.getCompositeInstructionCode(tcb.getPrecondition().getCompositeinstruction());
          _builder.append(_compositeInstructionCode);
          _builder.append(")");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      {
        Priority _priority = tcb.getPriority();
        boolean _tripleNotEquals_2 = (_priority != null);
        if (_tripleNotEquals_2) {
          _builder.append("(priority ");
          int _value = tcb.getPriority().getValue();
          _builder.append(_value);
          _builder.append(")");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        int _size_2 = tcb.getAbortactioninstruction().size();
        boolean _greaterThan_2 = (_size_2 > 0);
        if (_greaterThan_2) {
          _builder.append("(abort-action (");
          _builder.newLine();
          {
            EList<AbortActionInstruction> _abortactioninstruction = tcb.getAbortactioninstruction();
            for(final AbortActionInstruction i_3 : _abortactioninstruction) {
              {
                if ((i_3 instanceof LispInstruction)) {
                  String _str = ((LispInstruction)i_3).getStr();
                  _builder.append(_str);
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          _builder.append("))");
          _builder.newLine();
        }
      }
      _builder.newLine();
      _builder.append("(action (");
      _builder.newLine();
      {
        boolean _isRequirementSpecification_1 = tcb.isRequirementSpecification();
        if (_isRequirementSpecification_1) {
          _builder.append("\t");
          _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          _builder.append("(tcl-kb-update :key \'(is-a) :value `((is-a requirementSpecification)");
          _builder.newLine();
          {
            EList<TclInput> _input_1 = tcb.getInput();
            for(final TclInput i_4 : _input_1) {
              _builder.append("\t");
              _builder.append("(");
              String _name_5 = i_4.getName();
              _builder.append(_name_5, "\t");
              _builder.append(" ?");
              String _name_6 = i_4.getName();
              _builder.append(_name_6, "\t");
              _builder.append(")");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t");
          _builder.append("))");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("(if (probe-file \"dataForSolver.txt\")");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("(delete-file \"dataForSolver.txt\")");
          _builder.newLine();
          _builder.append("\t");
          _builder.append(")");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("(if (probe-file \"dvgConfiguration.json\")");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("(delete-file \"dvgConfiguration.json\")");
          _builder.newLine();
          _builder.append("\t");
          _builder.append(")");
          _builder.newLine();
          _builder.append("\t");
          String _generateWriteRequirementsForSolver = this.generateWriteRequirementsForSolver();
          _builder.append(_generateWriteRequirementsForSolver, "\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("(tcl-push-plan :plan `((getDataForSolver)(writeDataForSolver)(executeSolver)(readDecodeAndWriteToKb ,(format nil \"dvgConfiguration.json\"))))");
          _builder.newLine();
        }
      }
      _builder.append("\t");
      String _ActionInstructions = this.ActionInstructions(tcb.getActioninstruction(), tcb, "TCB", false);
      _builder.append(_ActionInstructions, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("))");
      _builder.newLine();
      _builder.newLine();
      {
        Plan _plan = tcb.getPlan();
        boolean _tripleNotEquals_3 = (_plan != null);
        if (_tripleNotEquals_3) {
          _builder.append("(plan (");
          _builder.newLine();
          {
            EList<CallSequence> _callsequence = tcb.getPlan().getCallsequence();
            for(final CallSequence i_5 : _callsequence) {
              {
                if ((i_5 instanceof TCBCall)) {
                  _builder.append("\t");
                  String _TCBCall = this.TCBCall(((TCBCall)i_5));
                  _builder.append(_TCBCall, "\t");
                  _builder.newLineIfNotEmpty();
                } else {
                  if ((i_5 instanceof TclParallel)) {
                    _builder.append("\t");
                    _builder.append("(parallel (");
                    _builder.newLine();
                    {
                      EList<TCBCall> _tcbcall = ((TclParallel)i_5).getTcbcall();
                      for(final TCBCall j : _tcbcall) {
                        _builder.append("\t");
                        String _TCBCall_1 = this.TCBCall(j);
                        _builder.append(_TCBCall_1, "\t");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("\t");
                    _builder.append("))");
                    _builder.newLine();
                  } else {
                    if ((i_5 instanceof TclOneOf)) {
                      _builder.append("\t");
                      _builder.append("(one-of (");
                      _builder.newLine();
                      {
                        EList<TCBCall> _tcbcall_1 = ((TclOneOf)i_5).getTcbcall();
                        for(final TCBCall j_1 : _tcbcall_1) {
                          _builder.append("\t");
                          String _TCBCall_2 = this.TCBCall(j_1);
                          _builder.append(_TCBCall_2, "\t");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      _builder.append("\t");
                      _builder.append("))");
                      _builder.newLine();
                    }
                  }
                }
              }
            }
          }
          _builder.append("))");
          _builder.newLine();
        }
      }
      _builder.append(")");
      _builder.newLine();
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }

  public String TCBCall(final TCBCall tcbc) {
    StringBuilder code = new StringBuilder();
    for (final TCB i : this.configureTCBs) {
      TCB _for = i.getFor();
      AbstractTCB _abstracttcb = tcbc.getAbstracttcb();
      boolean _equals = Objects.equal(_for, _abstracttcb);
      if (_equals) {
        code.append("(");
        String _callPrefix = i.getCallPrefix();
        boolean _tripleNotEquals = (_callPrefix != null);
        if (_tripleNotEquals) {
          code.append(i.getCallPrefix());
          code.append(".");
        }
        code.append(i.getName());
        String _name = tcbc.getAbstracttcb().getRealizes().getName();
        String _plus = (" ,(get-value (tcl-kb-query :key \'(is-a building-block instance-index variability-entity) :value `((is-a dvg-configuration)\n                                         (building-block \"" + _name);
        String _plus_1 = (_plus + "\")(instance-index ");
        int _instance = tcbc.getInstance();
        String _plus_2 = (_plus_1 + Integer.valueOf(_instance));
        String _plus_3 = (_plus_2 + ")(variability-entity \"");
        String _name_1 = i.getConfigures().getName();
        String _plus_4 = (_plus_3 + _name_1);
        String _plus_5 = (_plus_4 + "\"))) \'value)");
        code.append(_plus_5);
        code.append(")\n");
      }
    }
    code.append("(");
    TclPrefix _prefix = tcbc.getPrefix();
    boolean _tripleNotEquals_1 = (_prefix != null);
    if (_tripleNotEquals_1) {
      code.append(tcbc.getPrefix().getStr());
      code.append(".");
    }
    code.append(this.getName(tcbc.getAbstracttcb()));
    CompositeInstruction _compositeinstruction = tcbc.getCompositeinstruction();
    boolean _tripleNotEquals_2 = (_compositeinstruction != null);
    if (_tripleNotEquals_2) {
      code.append(" ");
      code.append(this.getCompositeInstructionCode(tcbc.getCompositeinstruction()));
    }
    code.append(")");
    code.append("\n");
    return code.toString();
  }

  public String FunctionCall(final FunctionCall fc) {
    StringBuilder code = new StringBuilder();
    code.append("(");
    code.append(this.BlockName(fc.getFunction()));
    CompositeInstruction _compositeinstruction = fc.getCompositeinstruction();
    boolean _tripleNotEquals = (_compositeinstruction != null);
    if (_tripleNotEquals) {
      code.append(" ");
      code.append(this.getCompositeInstructionCode(fc.getCompositeinstruction()));
    }
    code.append(")");
    code.append("\n");
    return code.toString();
  }

  public String ActionInstructions(final EList<ActionInstruction> ail, final Block b, final String blockType, final boolean ignore) {
    StringBuilder code = new StringBuilder();
    if ((!ignore)) {
      String _BlockName = this.BlockName(b);
      String _plus = ((("(format t \"==================================>>> " + blockType) + ": ") + _BlockName);
      String _plus_1 = (_plus + " ~%\")");
      code.append(_plus_1);
      code.append("\n");
    }
    for (final ActionInstruction i : ail) {
      {
        if ((i instanceof LispInstruction)) {
          code.append(((LispInstruction)i).getStr());
          code.append("\n");
        } else {
          if ((i instanceof EventActivation)) {
            StringBuilder eventCode = new StringBuilder();
            eventCode.append("(tcl-activate-event");
            eventCode.append(" ");
            eventCode.append(":name");
            eventCode.append(" \'");
            eventCode.append(((EventActivation)i).getEvtName());
            eventCode.append(" ");
            eventCode.append(":handler");
            eventCode.append(" \'");
            eventCode.append(((EventActivation)i).getEventhandler().getName());
            eventCode.append(" ");
            eventCode.append(":server");
            eventCode.append(" \'");
            eventCode.append(((EventActivation)i).getServer());
            eventCode.append(" ");
            eventCode.append(":service");
            eventCode.append(" \'");
            eventCode.append(((EventActivation)i).getService());
            eventCode.append(" ");
            eventCode.append(":mode");
            eventCode.append(" ");
            EventMode _eventMode = ((EventActivation)i).getEventMode();
            boolean _equals = Objects.equal(_eventMode, EventMode.SINGLE);
            if (_equals) {
              eventCode.append("\'single");
            } else {
              EventMode _eventMode_1 = ((EventActivation)i).getEventMode();
              boolean _equals_1 = Objects.equal(_eventMode_1, EventMode.CONTINUOUS);
              if (_equals_1) {
                eventCode.append("\'continuous");
              }
            }
            CompositeInstruction _compositeinstruction = ((EventActivation)i).getCompositeinstruction();
            boolean _tripleNotEquals = (_compositeinstruction != null);
            if (_tripleNotEquals) {
              eventCode.append(" ");
              eventCode.append(":param");
              eventCode.append(" ");
              eventCode.append(this.getCompositeInstructionCode(((EventActivation)i).getCompositeinstruction()));
            }
            eventCode.append(")");
            eventCode.append("\n");
            code.append(eventCode);
          } else {
            if ((i instanceof Send)) {
              StringBuilder sendCode = new StringBuilder();
              sendCode.append("(tcl-send");
              sendCode.append(" ");
              sendCode.append(":server");
              sendCode.append(" \'");
              sendCode.append(((Send)i).getServer());
              sendCode.append(" ");
              sendCode.append(":service");
              sendCode.append(" \'");
              sendCode.append(((Send)i).getService());
              CompositeInstruction _compositeinstruction_1 = ((Send)i).getCompositeinstruction();
              boolean _tripleNotEquals_1 = (_compositeinstruction_1 != null);
              if (_tripleNotEquals_1) {
                sendCode.append(" ");
                sendCode.append(":param");
                sendCode.append(" ");
                sendCode.append(this.getCompositeInstructionCode(((Send)i).getCompositeinstruction()));
              }
              sendCode.append(")");
              sendCode.append("\n");
              code.append(sendCode);
            } else {
              if ((i instanceof Query)) {
                StringBuilder queryCode = new StringBuilder();
                queryCode.append("(tcl-query");
                queryCode.append(" ");
                queryCode.append(":server");
                queryCode.append(" \'");
                queryCode.append(((Query)i).getServer());
                queryCode.append(" ");
                queryCode.append(":service");
                queryCode.append(" \'");
                queryCode.append(((Query)i).getService());
                queryCode.append(" ");
                queryCode.append(":request");
                queryCode.append(" ");
                queryCode.append(this.getCompositeInstructionCode(((Query)i).getCompositeinstruction()));
                queryCode.append(")");
                queryCode.append("\n");
                code.append(queryCode);
              } else {
                if ((i instanceof Param)) {
                  StringBuilder paramCode = new StringBuilder();
                  paramCode.append("(tcl-param");
                  paramCode.append(" ");
                  paramCode.append(":server");
                  paramCode.append(" \'");
                  paramCode.append(((Param)i).getServer());
                  paramCode.append(" ");
                  paramCode.append(":slot");
                  paramCode.append(" \'");
                  paramCode.append(((Param)i).getSlot());
                  CompositeInstruction _compositeinstruction_2 = ((Param)i).getCompositeinstruction();
                  boolean _tripleNotEquals_2 = (_compositeinstruction_2 != null);
                  if (_tripleNotEquals_2) {
                    paramCode.append(" ");
                    paramCode.append(":value");
                    paramCode.append(" ");
                    paramCode.append(this.getCompositeInstructionCode(((Param)i).getCompositeinstruction()));
                  }
                  paramCode.append(")");
                  paramCode.append("\n");
                  code.append(paramCode);
                } else {
                  if ((i instanceof State)) {
                    StringBuilder stateCode = new StringBuilder();
                    stateCode.append("(tcl-state");
                    stateCode.append(" ");
                    stateCode.append(":server");
                    stateCode.append(" \'");
                    stateCode.append(((State)i).getServer());
                    stateCode.append(" ");
                    stateCode.append(":state");
                    stateCode.append(" \"");
                    stateCode.append(((State)i).getState());
                    stateCode.append("\"");
                    stateCode.append(")");
                    stateCode.append("\n");
                    code.append(stateCode);
                  } else {
                    if ((i instanceof ReturnMessage)) {
                      if ((i instanceof Success)) {
                        code.append("\'(SUCCESS ())");
                      } else {
                        if ((i instanceof ErrorRef)) {
                          code.append("\'");
                          code.append(((ErrorRef)i).getError().getError());
                        }
                      }
                      code.append("\n");
                    } else {
                      if ((i instanceof Plan)) {
                        code.append("(tcl-push-plan :plan `(");
                        EList<CallSequence> _callsequence = ((Plan)i).getCallsequence();
                        for (final CallSequence j : _callsequence) {
                          if ((j instanceof TCBCall)) {
                            code.append(this.TCBCall(((TCBCall)j)));
                          } else {
                            if ((j instanceof TclParallel)) {
                              code.append("(parallel (");
                              EList<TCBCall> _tcbcall = ((TclParallel)j).getTcbcall();
                              for (final TCBCall k : _tcbcall) {
                                code.append(this.TCBCall(k));
                              }
                              code.append("))");
                            } else {
                              if ((j instanceof TclOneOf)) {
                                code.append("(one-of (");
                                EList<TCBCall> _tcbcall_1 = ((TclOneOf)j).getTcbcall();
                                for (final TCBCall k_1 : _tcbcall_1) {
                                  code.append(this.TCBCall(k_1));
                                }
                                code.append("))");
                              }
                            }
                          }
                        }
                        code.append("))");
                      } else {
                        if ((i instanceof FunctionCall)) {
                          code.append(this.FunctionCall(((FunctionCall)i)));
                        } else {
                          if ((i instanceof InternalVariableScope)) {
                            code.append("(let* (");
                            EList<InternalVariableDefinition> _internalvariabledefinition = ((InternalVariableScope)i).getInternalvariabledefinition();
                            for (final InternalVariableDefinition j_1 : _internalvariabledefinition) {
                              {
                                code.append("(");
                                code.append(j_1.getInternalvariable().getName());
                                code.append(" ");
                                EObject tmp = j_1.getAssignmentinstruction();
                                if ((tmp instanceof CompositeInstruction)) {
                                  code.append(this.getCompositeInstructionCode(((CompositeInstruction)tmp)));
                                }
                                code.append(")");
                                code.append("\n");
                              }
                            }
                            code.append(")");
                            code.append("\n");
                            code.append(this.ActionInstructions(((InternalVariableScope)i).getActioninstruction(), b, blockType, true));
                            code.append(")");
                          } else {
                            if ((i instanceof IfInstruction)) {
                              code.append("(cond");
                              code.append("\n");
                              code.append("(");
                              code.append(this.getCompositeInstructionCode(((IfInstruction)i).getIf().getCompositeinstruction()));
                              code.append("\n");
                              code.append(this.ActionInstructions(((IfInstruction)i).getIf().getActioninstruction(), b, blockType, true));
                              code.append("\n");
                              code.append(")");
                              code.append("\n");
                              EList<ElseIf> _elseif = ((IfInstruction)i).getElseif();
                              for (final ElseIf j_2 : _elseif) {
                                {
                                  code.append("(");
                                  code.append(this.getCompositeInstructionCode(j_2.getCompositeinstruction()));
                                  code.append("\n");
                                  code.append(this.ActionInstructions(j_2.getActioninstruction(), b, blockType, true));
                                  code.append("\n");
                                  code.append(")");
                                  code.append("\n");
                                }
                              }
                              Else _else = ((IfInstruction)i).getElse();
                              boolean _tripleNotEquals_3 = (_else != null);
                              if (_tripleNotEquals_3) {
                                code.append("(T");
                                code.append("\n");
                                code.append(this.ActionInstructions(((IfInstruction)i).getElse().getActioninstruction(), b, blockType, true));
                                code.append("\n");
                                code.append(")");
                                code.append("\n");
                              }
                              code.append(")");
                            } else {
                              if ((i instanceof VariableRef)) {
                                code.append(this.getVariableRefCode(((VariableRef)i)));
                              } else {
                                if ((i instanceof KBInteraction)) {
                                  code.append(this.getKBInteraction(((KBInteraction)i)));
                                } else {
                                  if ((i instanceof GetValue)) {
                                    code.append(this.getGetValue(((GetValue)i)));
                                  } else {
                                    if ((i instanceof Abort)) {
                                      code.append("(tcl-abort)");
                                    } else {
                                      if ((i instanceof DeletePlan)) {
                                        code.append("(tcl-delete-plan)");
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        code.append("\n");
      }
    }
    code.append("\n");
    return code.toString();
  }

  public String EventHandler(final EventHandler eh) {
    StringBuilder code = new StringBuilder();
    code.append("(define-event-handler (");
    code.append(this.BlockName(eh));
    code.append(")");
    code.append("\n");
    code.append("(action (");
    code.append("\n");
    code.append(this.ActionInstructions(eh.getActioninstruction(), eh, "HANDLER", false));
    code.append("))");
    code.append(")");
    code.append("\n\n");
    return code.toString();
  }

  public String Rule(final Rule r) {
    StringBuilder code = new StringBuilder();
    code.append("(define-rule (");
    code.append(this.BlockName(r));
    code.append(")");
    code.append("\n");
    code.append("(tcb (");
    EObject tmp = r.getLinkagetype();
    if ((tmp instanceof Any)) {
      code.append("ANY-TCB");
    } else {
      if ((tmp instanceof TCBRef)) {
        code.append(((TCBRef)tmp).getAbstracttcb().getName());
        EList<TclInput> _input = ((TCBRef)tmp).getAbstracttcb().getInput();
        for (final TclInput i : _input) {
          {
            code.append(" ");
            code.append("?");
            code.append(i.getName());
          }
        }
        int _size = ((TCBRef)tmp).getAbstracttcb().getOutput().size();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          code.append(" ");
          code.append("=>");
          EList<TclOutput> _output = ((TCBRef)tmp).getAbstracttcb().getOutput();
          for (final TclOutput i_1 : _output) {
            {
              code.append(" ");
              code.append("?");
              code.append(i_1.getName());
            }
          }
        }
      }
    }
    code.append("))");
    code.append("\n");
    code.append("(return-value (ERROR (");
    code.append(r.getError().getError());
    code.append(")))");
    code.append("\n");
    code.append("(action (");
    code.append("\n");
    code.append(this.ActionInstructions(r.getActioninstruction(), r, "RULE", false));
    code.append("))");
    code.append(")");
    code.append("\n\n");
    return code.toString();
  }

  public String Function(final Function f) {
    this.cbt = TclGenerator.CurrentBlockType.FUNCTION;
    StringBuilder code = new StringBuilder();
    code.append("(defun");
    code.append(" ");
    code.append(this.BlockName(f));
    code.append(" ");
    code.append("(");
    EList<TclInput> _input = f.getInput();
    for (final TclInput i : _input) {
      {
        code.append(i.getName());
        code.append(" ");
      }
    }
    code.append(")");
    code.append("\n");
    code.append(this.ActionInstructions(f.getActioninstruction(), f, "FUNCTION", false));
    code.append(")");
    code.append("\n\n");
    return code.toString();
  }

  public String BlockName(final Block b) {
    String code = "";
    GenerationType _genType = b.getGenType();
    boolean _equals = Objects.equal(_genType, GenerationType.NAME);
    if (_equals) {
      code = b.getName();
    } else {
      if ((Objects.equal(b.getGenType(), GenerationType.EXTERNALNAME) || Objects.equal(b.getGenType(), GenerationType.IGNORE))) {
        code = b.getExternalName();
      }
    }
    return code;
  }

  public String getName(final AbstractTCB at) {
    String bName = this.BlockName(at);
    StringBuilder modifiedName = new StringBuilder();
    if ((at instanceof TCB)) {
      SubName _subname = ((TCB)at).getSubname();
      boolean _tripleNotEquals = (_subname != null);
      if (_tripleNotEquals) {
        if (((((TCB)at).eContainer() instanceof SameNameTCBs) && (((TCB)at).getName().indexOf("_") != (-1)))) {
          String[] name = null;
          name = ((TCB)at).getName().split("_");
          modifiedName.append(name[0]);
          modifiedName.append(" ");
          modifiedName.append("\'");
          modifiedName.append(((TCB)at).getSubname().getName());
        } else {
          modifiedName.append(bName);
          modifiedName.append(" ");
          modifiedName.append("\'");
          modifiedName.append(((TCB)at).getSubname().getName());
        }
        return modifiedName.toString();
      } else {
        return bName;
      }
    } else {
      return bName;
    }
  }

  public String getCompositeInstructionCode(final CompositeInstruction ci) {
    StringBuilder code = new StringBuilder();
    EList<AbstractCompositeInstruction> _abstractcompositeinstruction = ci.getAbstractcompositeinstruction();
    for (final AbstractCompositeInstruction i : _abstractcompositeinstruction) {
      {
        if ((i instanceof LispInstruction)) {
          code.append(((LispInstruction)i).getStr());
        } else {
          if ((i instanceof VariableRef)) {
            code.append(this.getVariableRefCode(((VariableRef)i)));
          } else {
            if ((i instanceof GetValue)) {
              code.append(this.getGetValue(((GetValue)i)));
            } else {
              if ((i instanceof KBInteraction)) {
                code.append(this.getKBInteraction(((KBInteraction)i)));
              }
            }
          }
        }
        code.append(" ");
      }
    }
    return code.toString();
  }

  public String getVariableRefCode(final VariableRef vr) {
    StringBuilder code = new StringBuilder();
    if (((vr.getVariable() instanceof TclParameter) && Objects.equal(this.cbt, TclGenerator.CurrentBlockType.TCB))) {
      code.append("?");
    } else {
      if ((((vr.getVariable() instanceof TclParameter) && Objects.equal(this.cbt, TclGenerator.CurrentBlockType.FUNCTION)) && (vr.eContainer().eContainer() instanceof AttributeValues))) {
        code.append(",");
      } else {
        if (((vr.getVariable() instanceof InternalVariable) && ((vr.eContainer().eContainer() instanceof AttributeValues) || (vr.eContainer().eContainer() instanceof TCBCall)))) {
          code.append(",");
        }
      }
    }
    code.append(vr.getVariable().getName());
    return code.toString();
  }

  public String getGetValue(final GetValue gv) {
    StringBuilder code = new StringBuilder();
    code.append("(get-value ");
    code.append(this.getCompositeInstructionCode(gv.getCompositeinstruction()));
    code.append(" \'");
    code.append(gv.getAttribute().getName());
    code.append(")");
    return code.toString();
  }

  public String getKBInteraction(final KBInteraction kbi) {
    StringBuilder code = new StringBuilder();
    if ((kbi instanceof KBQuery)) {
      code.append("(tcl-kb-query ");
    } else {
      if ((kbi instanceof KBQueryAll)) {
        code.append("(tcl-kb-query-all ");
      } else {
        if ((kbi instanceof KBUpdate)) {
          code.append("(tcl-kb-update ");
        } else {
          if ((kbi instanceof KBDelete)) {
            code.append("(tcl-kb-delete ");
          }
        }
      }
    }
    code.append(":key \'");
    code.append("(is-a");
    if ((kbi instanceof KBUpdate)) {
      EList<KeyAttribute> _keyattribute = ((KBUpdate)kbi).getKeyattribute();
      for (final KeyAttribute i : _keyattribute) {
        {
          code.append(" ");
          code.append(i.getAttribute().getName());
        }
      }
    } else {
      EList<AttributeValues> _attributevalues = kbi.getAttributevalues();
      for (final AttributeValues i_1 : _attributevalues) {
        {
          code.append(" ");
          code.append(i_1.getAttribute().getName());
        }
      }
    }
    code.append(")");
    code.append(" :value `(");
    code.append("(is-a ");
    code.append(kbi.getKbisagroup().getName());
    code.append(")");
    EList<AttributeValues> _attributevalues_1 = kbi.getAttributevalues();
    for (final AttributeValues i_2 : _attributevalues_1) {
      {
        code.append("(");
        code.append(i_2.getAttribute().getName());
        code.append(" ");
        code.append(this.getCompositeInstructionCode(i_2.getCompositeinstruction()));
        code.append(")");
      }
    }
    code.append(")");
    code.append(")");
    return code.toString();
  }

  public CharSequence generateGetDataForSolver() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(define-tcb (getDataForSolver)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(action (");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(tcl-push-back-plan :plan ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("`(");
    _builder.newLine();
    {
      for(final TCB i : this.provideTCBs) {
        _builder.append("\t\t\t\t");
        _builder.append("(");
        String _name = i.getName();
        _builder.append(_name, "\t\t\t\t");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("))");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateWriteDataForSolver() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(define-tcb (writeDataForSolver)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(action (");
    _builder.newLine();
    {
      for(final Function i : this.provideFunctions) {
        _builder.append("\t");
        CharSequence _generateProvideFunctionCall = this.generateProvideFunctionCall(i);
        _builder.append(_generateProvideFunctionCall, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("))");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateProvideFunctionCall(final Function f) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _containsKey = this.provideFunctionRequirementSpecifications.containsKey(f);
      boolean _not = (!_containsKey);
      if (_not) {
        _builder.append("(writeToFile \'");
        String _name = f.getProvides().getName();
        _builder.append(_name);
        _builder.append(" (");
        String _name_1 = f.getName();
        _builder.append(_name_1);
        _builder.append("))");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("(writeToFile \'");
        String _name_2 = f.getProvides().getName();
        _builder.append(_name_2);
        _builder.append(" (");
        String _name_3 = f.getName();
        _builder.append(_name_3);
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
        {
          List<String> _get = this.provideFunctionRequirementSpecifications.get(f);
          for(final String i : _get) {
            _builder.append("\t");
            _builder.append("(get-value (tcl-kb-query :key \'(is-a) :value `((is-a requirementSpecification))");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("           ");
            _builder.append(")");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\'");
            _builder.append(i, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(")");
            _builder.newLine();
          }
        }
        _builder.append("))");
        _builder.newLine();
      }
    }
    return _builder;
  }

  public CharSequence generateExecuteSolver() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(define-tcb (executeSolver)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(action (");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(uiop:run-program \"java DVGSolver_");
    String _dVGName = this.req.getDVGName();
    _builder.append(_dVGName, "\t\t");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("))");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    return _builder;
  }
}
