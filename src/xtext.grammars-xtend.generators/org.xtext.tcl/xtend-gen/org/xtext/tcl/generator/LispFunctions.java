package org.xtext.tcl.generator;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class LispFunctions {
  public static CharSequence generateReadDecodeAndWriteToKB() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(define-tcb (readDecodeAndWriteToKb ?json-file)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(action (");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(let ((in-string nil)(json-res nil)(module-insts-list nil))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(setf in-string (with-open-file (in-stream ?json-file :direction :input)");
    _builder.newLine();
    _builder.append("\t\t    \t");
    _builder.append("(let ((contents (make-string (file-length in-stream))))");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("(read-sequence contents in-stream)");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.append("contents");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append(")))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(let ((parsed-msg nil))");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("(format t \"Decode msg: ~a~%\" in-string)");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("(format t \"Typeof msg: ~a~%\" (type-of in-string))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("(handler-case");
    _builder.newLine();
    _builder.append("\t\t\t      ");
    _builder.append("(with-input-from-string (s in-string)");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("(let ((cl-json:*json-symbols-package* nil))");
    _builder.newLine();
    _builder.append("\t\t\t          ");
    _builder.append("(setf parsed-msg (cl-json:decode-json s))))");
    _builder.newLine();
    _builder.append("\t\t\t      ");
    _builder.append("(t (c)");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("(format t \"[decode-json-msg] ERROR decode msg json invalid : ~a~%\" c)");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("(setf parsed-msg nil)");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("(values nil c)))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(format t \"Parsed result ~s~%\" parsed-msg)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(setf dvg-configuration-list (cdr (assoc \'dvg-configuration parsed-msg)))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(dolist (dvg-configuration dvg-configuration-list)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("(let* ((building-block (cdr (assoc \'building-block dvg-configuration)))");
    _builder.newLine();
    _builder.append("\t\t\t          \t   ");
    _builder.append("(instance-index (cdr (assoc \'instance-index dvg-configuration)))");
    _builder.newLine();
    _builder.append("\t\t\t         \t   ");
    _builder.append("(variability-entity (cdr (assoc \'variability-entity dvg-configuration)))");
    _builder.newLine();
    _builder.append("\t\t\t         \t   ");
    _builder.append("(value (cdr (assoc \'value dvg-configuration)))");
    _builder.newLine();
    _builder.append("\t\t\t         \t  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t         ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("(tcl-kb-update :key \'(is-a building-block instance-index variability-entity) :value `((is-a dvg-configuration)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("(building-block ,building-block) (instance-index ,instance-index) (variability-entity ,variability-entity) (value ,value))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t   \t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("))");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    return _builder;
  }
}
