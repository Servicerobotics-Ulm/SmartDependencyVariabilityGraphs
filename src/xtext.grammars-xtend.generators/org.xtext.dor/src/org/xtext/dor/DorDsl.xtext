// automatically generated by Xtext
grammar org.xtext.dor.DorDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/dor" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.example.org/vi" as vi

DataObjectRepo returns DataObjectRepo:
	{DataObjectRepo}
	'DataObjectRepo'
	'{'
		(udod+=UnboundedDataObjectDef (udod+=UnboundedDataObjectDef)*)?
		(bdod+=BoundedDataObjectDef (bdod+=BoundedDataObjectDef)*)?
	'}';




VSPInit returns vi::VSPInit:
	ComplexVSPInit | BoolVSPInit | IntegerVSPInit | RealVSPInit | StringVSPInit;

TypeDef returns TypeDef:
	ReferenceDef | BoolDef | IntegerDef | RealDef | StringDef;



DataObjectDef returns DataObjectDef:
	BoundedDataObjectDef | UnboundedDataObjectDef;





Type returns vi::Type:
	Bool | Integer | Real | String0;


enum ElementRelationship returns ElementRelationship:
	AND = 'AND' | XOR = 'XOR'
;

UnboundedDataObjectDef returns UnboundedDataObjectDef:
	'UnboundedDataObjectDef'
	name=EString
	('['er=ElementRelationship']')?
	'{'
		('description' description=EString)?
		ed+=ElementDef ( "," ed+=ElementDef)*
	'}';

BoundedDataObjectDef returns BoundedDataObjectDef:
	'BoundedDataObjectDef'
	name=EString
	('['er=ElementRelationship']')?
	'{'
		('description' description=EString)?
		ed+=ElementDef ( "," ed+=ElementDef)*
		vi=VSPInit
	'}';

EString returns ecore::EString:
	STRING | ID;

ElementDef returns ElementDef:
	'ElementDef'
	name=EString
	'is' td=TypeDef
	(siunit=SIUnit)?
	;

SIUnit returns SIUnit:
	{SIUnit}
	'SIUnit'
	name=EString
	('prefix' prefix=Prefix)?
	;

ReferenceDef returns ReferenceDef:
	'=>'
	dod=[DataObjectDef|EString]
	('['cardinality=EString']')?
	;

BoolDef returns BoolDef:
	{BoolDef}
	'Bool'
	('['cardinality=EString']')?
	;

IntegerDef returns IntegerDef:
	{IntegerDef}
	'Integer'
	('['cardinality=EString']')?
	;

RealDef returns RealDef:
	{RealDef}
	'Real'
	('['cardinality=EString']')?
	;

StringDef returns StringDef:
	{StringDef}
	'String'
	('['cardinality=EString']')?
	;

Prefix returns Prefix:
	{Prefix}
	name=EString;

ComplexVSPInit returns vi::ComplexVSPInit:
	'ComplexVSPInit'
	'{'
		vi+=VI ( "," vi+=VI)*
	'}';

BoolVSPInit returns vi::BoolVSPInit:
	'BoolVSPInit'
	'[' vsp+=EBoolean ( "," vsp+=EBoolean)* ']' 
	;

IntegerVSPInit returns vi::IntegerVSPInit:
	{vi::IntegerVSPInit}
	'IntegerVSPInit'
	('[' vsp+=EInt ( "," vsp+=EInt)* ']')?
	(irg=IntegerRandomGenerator)?
	;

RealVSPInit returns vi::RealVSPInit:
	{vi::RealVSPInit}
	'RealVSPInit'
	('[' vsp+=EDouble ( "," vsp+=EDouble)* ']' )?
	(rrg=RealRandomGenerator)?
	;

StringVSPInit returns vi::StringVSPInit:
	'StringVSPInit'
	'[' vsp+=EString ( "," vsp+=EString)* ']' 
	;

VI returns vi::VI:
	'['
		e+=Element ( "," e+=Element)*
	']';

Element returns vi::Element:
	'Element'
	name=EString
	t=Type
	;

Bool returns vi::Bool:
	'BoolInit'
	'['
		bv+=BoolValue ( "," bv+=BoolValue)*
	']';

Integer returns vi::Integer:
	'IntegerInit'
	'['
		iv+=IntegerValue ( "," iv+=IntegerValue)*
	']';

Real returns vi::Real:
	'RealInit'
	'['
		rv+=RealValue ( "," rv+=RealValue)*
	']';

String0 returns vi::String:
	'StringInit'
	'['
		sv+=StringValue ( "," sv+=StringValue)*
	']';

BoolValue returns vi::BoolValue:
	value=EBoolean
	;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

IntegerValue returns vi::IntegerValue:
	value=EInt
	;

EInt returns ecore::EInt:
	'-'? INT;

RealValue returns vi::RealValue:
	value=EDouble
	;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

StringValue returns vi::StringValue:
	value=EString
	;

IntegerRandomGenerator returns vi::IntegerRandomGenerator:
	'IntegerRandomGenerator'
	'{'
		'number' number=EInt
		'min' min=EInt
		'max' max=EInt
	'}';

RealRandomGenerator returns vi::RealRandomGenerator:
	'RealRandomGenerator'
	'{'
		'number' number=EInt
		'min' min=EInt
		'max' max=EInt
	'}';
