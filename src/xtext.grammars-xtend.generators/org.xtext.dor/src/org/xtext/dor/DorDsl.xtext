// automatically generated by Xtext
grammar org.xtext.dor.DorDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/dor" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.example.org/vi" as vi

DataObjectRepo returns DataObjectRepo:
	{DataObjectRepo}
	'DataObjectRepo'
	'{'
		('udod' '{' udod+=UnboundedDataObjectDef ( "," udod+=UnboundedDataObjectDef)* '}' )?
		('bdod' '{' bdod+=BoundedDataObjectDef ( "," bdod+=BoundedDataObjectDef)* '}' )?
	'}';




VSPInit returns vi::VSPInit:
	ComplexVSPInit | BoolVSPInit | IntegerVSPInit | RealVSPInit | StringVSPInit;

TypeDef returns TypeDef:
	ReferenceDef | BoolDef | IntegerDef | RealDef | StringDef;



DataObjectDef returns DataObjectDef:
	BoundedDataObjectDef | UnboundedDataObjectDef;





Type returns vi::Type:
	Bool | Integer | Real | String0;





UnboundedDataObjectDef returns UnboundedDataObjectDef:
	'UnboundedDataObjectDef'
	name=EString
	'{'
		('description' description=EString)?
		'ed' '{' ed+=ElementDef ( "," ed+=ElementDef)* '}' 
	'}';

BoundedDataObjectDef returns BoundedDataObjectDef:
	'BoundedDataObjectDef'
	name=EString
	'{'
		('description' description=EString)?
		'ed' '{' ed+=ElementDef ( "," ed+=ElementDef)* '}' 
		'vi' vi=VSPInit
	'}';

EString returns ecore::EString:
	STRING | ID;

ElementDef returns ElementDef:
	'ElementDef'
	name=EString
	'{'
		'td' td=TypeDef
		('siunit' siunit=SIUnit)?
	'}';

SIUnit returns SIUnit:
	{SIUnit}
	'SIUnit'
	name=EString
	'{'
		('prefix' prefix=Prefix)?
	'}';

ReferenceDef returns ReferenceDef:
	'ReferenceDef'
	'{'
		('cardinality' cardinality=EString)?
		'dod' dod=[DataObjectDef|EString]
	'}';

BoolDef returns BoolDef:
	{BoolDef}
	'BoolDef'
	'{'
		('cardinality' cardinality=EString)?
	'}';

IntegerDef returns IntegerDef:
	{IntegerDef}
	'IntegerDef'
	'{'
		('cardinality' cardinality=EString)?
	'}';

RealDef returns RealDef:
	{RealDef}
	'RealDef'
	'{'
		('cardinality' cardinality=EString)?
	'}';

StringDef returns StringDef:
	{StringDef}
	'StringDef'
	'{'
		('cardinality' cardinality=EString)?
	'}';

Prefix returns Prefix:
	{Prefix}
	'Prefix'
	name=EString;

ComplexVSPInit returns vi::ComplexVSPInit:
	'ComplexVSPInit'
	'{'
		'vi' '{' vi+=VI ( "," vi+=VI)* '}' 
	'}';

BoolVSPInit returns vi::BoolVSPInit:
	'BoolVSPInit'
	'{'
		'vsp' '{' vsp+=EBoolean ( "," vsp+=EBoolean)* '}' 
	'}';

IntegerVSPInit returns vi::IntegerVSPInit:
	{vi::IntegerVSPInit}
	'IntegerVSPInit'
	'{'
		('vsp' '{' vsp+=EInt ( "," vsp+=EInt)* '}' )?
		('irg' irg=IntegerRandomGenerator)?
	'}';

RealVSPInit returns vi::RealVSPInit:
	{vi::RealVSPInit}
	'RealVSPInit'
	'{'
		('vsp' '{' vsp+=EDouble ( "," vsp+=EDouble)* '}' )?
		('rrg' rrg=RealRandomGenerator)?
	'}';

StringVSPInit returns vi::StringVSPInit:
	'StringVSPInit'
	'{'
		'vsp' '{' vsp+=EString ( "," vsp+=EString)* '}' 
	'}';

VI returns vi::VI:
	'VI'
	'{'
		'e' '{' e+=Element ( "," e+=Element)* '}' 
	'}';

Element returns vi::Element:
	'Element'
	name=EString
	'{'
		't' t=Type
	'}';

Bool returns vi::Bool:
	'Bool'
	'{'
		'bv' '{' bv+=BoolValue ( "," bv+=BoolValue)* '}' 
	'}';

Integer returns vi::Integer:
	'Integer'
	'{'
		'iv' '{' iv+=IntegerValue ( "," iv+=IntegerValue)* '}' 
	'}';

Real returns vi::Real:
	'Real'
	'{'
		'rv' '{' rv+=RealValue ( "," rv+=RealValue)* '}' 
	'}';

String0 returns vi::String:
	'String'
	'{'
		'sv' '{' sv+=StringValue ( "," sv+=StringValue)* '}' 
	'}';

BoolValue returns vi::BoolValue:
	value?='value'
	'BoolValue'
	;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

IntegerValue returns vi::IntegerValue:
	'IntegerValue'
	'{'
		'value' value=EInt
	'}';

EInt returns ecore::EInt:
	'-'? INT;

RealValue returns vi::RealValue:
	'RealValue'
	'{'
		'value' value=EDouble
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

StringValue returns vi::StringValue:
	'StringValue'
	'{'
		'value' value=EString
	'}';

IntegerRandomGenerator returns vi::IntegerRandomGenerator:
	'IntegerRandomGenerator'
	'{'
		'number' number=EInt
		'min' min=EInt
		'max' max=EInt
	'}';

RealRandomGenerator returns vi::RealRandomGenerator:
	'RealRandomGenerator'
	'{'
		'number' number=EInt
		'min' min=EInt
		'max' max=EInt
	'}';
