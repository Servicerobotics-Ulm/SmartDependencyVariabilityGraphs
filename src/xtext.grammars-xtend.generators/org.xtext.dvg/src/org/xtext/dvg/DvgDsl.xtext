// automatically generated by Xtext
grammar org.xtext.dvg.DvgDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/dor" as dor 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.example.org/vi" as vi
import "http://www.example.org/bbdvgtcl" 

DVG returns DVG:
	{DVG}
	'DVG'
	name=EString
	('outputName' outputName=EString)?
	('FinalOperation' finalOperation=FinalOperation)?
	'{'
		(pattern+=Pattern (pattern+=Pattern)*)?
		(bbcontainer+=BBContainer (bbcontainer+=BBContainer)*)?
	'}';
	
enum FinalOperation returns FinalOperation:
	MAX = 'MAX' | MIN = 'MIN';

Pattern returns Pattern:
	EPROD | EQUF | INIT | SAPRO | COMF | RPRO | APRO | TRAN | PTCC | CONT | MAGR | DMAGR;

BuildingBlock returns BuildingBlock:
	BuildingBlock_Impl | BuildingBlockInst;


Decomposition returns Decomposition:
	Loop | Sequential | Parallel | ConditionalFork | EquivalenceFork | Unsequenceable;



InputRelationship returns InputRelationship:
	Mandatory | Optional | AND | XOR | OR;




OutputPort returns OutputPort:
	OutputPort_Impl | InitPort;

InputPort returns InputPort:
	InputPort_Impl | ExtInputPort;

AbstractInitPort returns AbstractInitPort:
	InitPort | InitCPort | InitWSMPort;

OutputCPort returns OutputCPort:
	OutputCPort_Impl | InitCPort;



InputCPort returns InputCPort:
	InputCPort_Impl | ExtInputCPort;

ComparisonCOp returns ComparisonCOp:
	Equal | GreaterThan | LessThan;

OutputPPort returns OutputPPort:
	OutputWSMPort_Impl | InitWSMPort;


NormalizationCOp returns NormalizationCOp:
	LinearNormalization;

InputPPort returns InputPPort:
	InputWSMPort_Impl | ExtInputWSMPort;

RatingCOp returns RatingCOp:
	RatingCOp_Impl | WSM;


Fork returns Fork:
	ConditionalFork | EquivalenceFork;





VariabilityEntity returns VariabilityEntity:
	Output | Input | PropertyInst | ParameterInst | ContextInst | PortElement | Number | Condition;



VSPInit returns vi::VSPInit:
	ComplexVSPInit | BoolVSPInit | IntegerVSPInit | RealVSPInit | StringVSPInit;

DataObjectDef returns dor::DataObjectDef:
	BoundedDataObjectDef | UnboundedDataObjectDef;


Port returns Port:
	Output | Input;

TypeDef returns dor::TypeDef:
	ReferenceDef | BoolDef | IntegerDef | RealDef | StringDef;







Type returns vi::Type:
	Bool | Integer | Real | String0;




























InternalPortRef returns InternalPortRef:
	InputPort_Impl | InternalOutputPort | ExtInputPort;



OutputWSMPort returns OutputWSMPort:
	OutputWSMPort_Impl | InitWSMPort;

EString returns ecore::EString:
	STRING | ID;

BuildingBlock_Impl returns BuildingBlock:
	'BuildingBlock'
	name=EString
	'{'
		'blocktype' blocktype=BlockType
		('dt' '(' dt+=[Decomposition|EString] ( "," dt+=[Decomposition|EString])* ')' )?
		('allocationCandidates' '(' allocationCandidates+=[BuildingBlockDescription|EString] ( "," allocationCandidates+=[BuildingBlockDescription|EString])* ')' )?
		('ves' ves=VariabilityEntitySet)?
		('o' '{' o+=Output ( "," o+=Output)* '}' )?
		('ir' '{' ir+=InputRelationship ( "," ir+=InputRelationship)* '}' )?
		('sharedresources' sharedresources=SharedResources)?
	'}';

BBContainer returns BBContainer:
	{BBContainer}
	'BBContainer'
	'=>'
	(container=[Container|EString])?
	'{'
		(pattern+=Pattern (pattern+=Pattern)*)?
		(bbcontainer+=BBContainer (bbcontainer+=BBContainer)*)?
	'}';

EPROD returns EPROD:
	'EPROD'
	name=EString
	'{'
		op=OutputPort
		ip+=InputPort ( "," ip+=InputPort)*
	'}';

EQUF returns EQUF:
	'EQUF'
	name=EString
	'{'
		op=OutputPort
		ip=InputPort
	'}';

INIT returns INIT:
	'INIT'
	name=EString
	'{'
		ainip=AbstractInitPort
	'}';

SAPRO returns SAPRO:
	'SAPRO'
	name=EString
	'{'
		(op=OutputPort)?
		(ocp=OutputCPort)?	
		ip+=InputPort ( "," ip+=InputPort)*
		('O=f(I):' expr=Expression)?
		(ca=CombinationAssignment)?
	'}';

COMF returns COMF:
	'COMF'
	name=EString
	'{'
		op=OutputPort
		ip=InputPort
		icp=InputCPort
		'O=f(I):' co=ComparisonCOp
	'}';

RPRO returns RPRO:
	'RPRO'
	name=EString
	'{'
		(op=OutputPort)?
		(opp=OutputPPort)?	
		ip+=InputPort ( "," ip+=InputPort)*
		'O=f(I):' expr=Expression
	'}';

APRO returns APRO:
	'APRO'
	name=EString
	'{'
		(op=OutputPort)?
		(ocp=OutputCPort)?
		ip+=InputPort ( "," ip+=InputPort)*
		description+=Description ( "," description+=Description)*
	'}';

TRAN returns TRAN:
	'TRAN'
	name=EString
	'{'
		op=OutputPort
		ip=InputPort
		'O=f(I):' no=NormalizationCOp
	'}';

PTCC returns PTCC:
	'PTCC'
	name=EString
	'{'
		op=OutputPort
		ip+=InputPort ( "," ip+=InputPort)*
		ipp=InputPPort
		'max' '(' max+=EBoolean ( "," max+=EBoolean)* ')'
		'1:O=f(I):' '{' no+=NormalizationCOp ( "," no+=NormalizationCOp)* '}' 
		'2:O=f(I):' ro=RatingCOp
	'}';

CONT returns CONT:
	'CONT'
	name=EString
	'{'
		op=OutputPort
		ip+=InputPort ( "," ip+=InputPort)*
		ipp=InputPPort
		'O=f(I):' ro=RatingCOp
	'}';

MAGR returns MAGR:
	'MAGR'
	name=EString
	('Fork' f=[Fork|EString])?
	('Optional' o=[Optional|EString])?
	('XOR' x=[XOR|EString])?
	('OR' or=[OR|EString])?	
	'{'
		aggr+=AGGR ( "," aggr+=AGGR)*
	'}';

DMAGR returns DMAGR:
	'DMAGR'
	name=EString
	'{'
		daggr+=DAGGR ( "," daggr+=DAGGR)*
	'}';

OutputPort_Impl returns OutputPort:
	'OutputPort'
	name=EString
	'=>' ve=[VariabilityEntity|EString]
	'{'
		'VariabilityType' vt=VT
		'RepresentationType' rt=RT
		('Description' description=EString)?
		('BuildingBlockInstance' bbi=[BuildingBlockInst|EString])?
		('Index' gii=EInt)?
	'}';

InputPort_Impl returns InputPort:
	{InputPort}
	'InputPort'
	name=EString
	('=>' outputport=[OutputPort|EString])?
	;

enum VT returns VT:
	CONSTANT = 'CONSTANT' | ACTIVE = 'ACTIVE' | PASSIVE = 'PASSIVE';

EInt returns ecore::EInt:
	'-'? INT;

BuildingBlockInst returns BuildingBlockInst:
	'BuildingBlockInst'
	name=EString
	'{'
		'blocktype' blocktype=BlockType
		('dt' '(' dt+=[Decomposition|EString] ( "," dt+=[Decomposition|EString])* ')' )?
		('allocationCandidates' '(' allocationCandidates+=[BuildingBlockDescription|EString] ( "," allocationCandidates+=[BuildingBlockDescription|EString])* ')' )?
		'c' c=[Container|EString]
		('ves' ves=VariabilityEntitySet)?
		('o' '{' o+=Output ( "," o+=Output)* '}' )?
		('ir' '{' ir+=InputRelationship ( "," ir+=InputRelationship)* '}' )?
		('sharedresources' sharedresources=SharedResources)?
	'}';

enum RT returns RT:
				ABSOLUTE = 'ABSOLUTE' | RELATIVE = 'RELATIVE';

InitPort returns InitPort:
	'InitPort'
	name=EString
	'=>' ve=[VariabilityEntity|EString]
	'{'
		'VariabilityType' vt=VT
		'RepresentationType' rt=RT
		('Description' description=EString)?
		('Interface' interface=Interface)?
		(vi=VSPInit)?
		('BuildingBlockInstance' bbi=[BuildingBlockInst|EString])?
		('Index' gii=EInt)?
	'}';

Output returns Output:
	{Output}
	'Output'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

Input returns Input:
	{Input}
	'Input'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

PropertyInst returns PropertyInst:
	{PropertyInst}
	'PropertyInst'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

ParameterInst returns ParameterInst:
	{ParameterInst}
	'ParameterInst'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

ContextInst returns ContextInst:
	{ContextInst}
	'ContextInst'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

PortElement returns PortElement:
	'PortElement'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		'e' e=[dor::ElementDef|EString]
		'port' port=[Port|EString]
		('doc' doc=DataObjectDef)?
	'}';

Number returns Number:
	{Number}
	'Number'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

Condition returns Condition:
	{Condition}
	'Condition'
	name=EString
	'{'
		('description' description=EString)?
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

ElementDef returns dor::ElementDef:
	'ElementDef'
	name=EString
	'{'
		'td' td=TypeDef
		('siunit' siunit=SIUnit)?
	'}';

BoundedDataObjectDef returns dor::BoundedDataObjectDef:
	'BoundedDataObjectDef'
	name=EString
	'{'
		('description' description=EString)?
		'ed' '{' ed+=ElementDef ( "," ed+=ElementDef)* '}' 
		'vi' vi=VSPInit
	'}';

UnboundedDataObjectDef returns dor::UnboundedDataObjectDef:
	'UnboundedDataObjectDef'
	name=EString
	'{'
		('description' description=EString)?
		'ed' '{' ed+=ElementDef ( "," ed+=ElementDef)* '}' 
	'}';

SIUnit returns dor::SIUnit:
	{dor::SIUnit}
	'SIUnit'
	name=EString
	'{'
		('prefix' prefix=Prefix)?
	'}';

ReferenceDef returns dor::ReferenceDef:
	'ReferenceDef'
	'{'
		('cardinality' cardinality=EString)?
		'dod' dod=[dor::DataObjectDef|EString]
	'}';

BoolDef returns dor::BoolDef:
	{dor::BoolDef}
	'BoolDef'
	'{'
		('cardinality' cardinality=EString)?
	'}';

IntegerDef returns dor::IntegerDef:
	{dor::IntegerDef}
	'IntegerDef'
	'{'
		('cardinality' cardinality=EString)?
	'}';

RealDef returns dor::RealDef:
	{dor::RealDef}
	'RealDef'
	'{'
		('cardinality' cardinality=EString)?
	'}';

StringDef returns dor::StringDef:
	{dor::StringDef}
	'StringDef'
	'{'
		('cardinality' cardinality=EString)?
	'}';

Prefix returns dor::Prefix:
	{dor::Prefix}
	'Prefix'
	name=EString;

ComplexVSPInit returns vi::ComplexVSPInit:
	'ComplexVSPInit'
	'{'
		vi+=VI ( "," vi+=VI)*
	'}';

BoolVSPInit returns vi::BoolVSPInit:
	'BoolVSPInit'
	'[' vsp+=EBoolean ( "," vsp+=EBoolean)* ']' 
	;

IntegerVSPInit returns vi::IntegerVSPInit:
	{vi::IntegerVSPInit}
	'IntegerVSPInit'
	('[' vsp+=EInt ( "," vsp+=EInt)* ']')?
	(irg=IntegerRandomGenerator)?
	;

RealVSPInit returns vi::RealVSPInit:
	{vi::RealVSPInit}
	'RealVSPInit'
	('[' vsp+=EDouble ( "," vsp+=EDouble)* ']' )?
	(rrg=RealRandomGenerator)?
	;

StringVSPInit returns vi::StringVSPInit:
	'StringVSPInit'
	'[' vsp+=EString ( "," vsp+=EString)* ']' 
	;

VI returns vi::VI:
	'['
		e+=Element ( "," e+=Element)*
	']';

Element returns vi::Element:
	'Element'
	name=EString
	t=Type
	;


Bool returns vi::Bool:
	'BoolInit'
	'['
		bv+=BoolValue ( "," bv+=BoolValue)*
	']';

Integer returns vi::Integer:
	'IntegerInit'
	'['
		iv+=IntegerValue ( "," iv+=IntegerValue)*
	']';

Real returns vi::Real:
	'RealInit'
	'['
		rv+=RealValue ( "," rv+=RealValue)*
	']';

String0 returns vi::String:
	'StringInit'
	'['
		sv+=StringValue ( "," sv+=StringValue)*
	']';

BoolValue returns vi::BoolValue:
	value=EBoolean
	;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

IntegerValue returns vi::IntegerValue:
	value=EInt
	;

RealValue returns vi::RealValue:
	value=EDouble
	;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

StringValue returns vi::StringValue:
	value=EString
	;

IntegerRandomGenerator returns vi::IntegerRandomGenerator:
	'IntegerRandomGenerator'
	'{'
		'number' number=EInt
		'min' min=EInt
		'max' max=EInt
	'}';

RealRandomGenerator returns vi::RealRandomGenerator:
	'RealRandomGenerator'
	'{'
		'number' number=EInt
		'min' min=EInt
		'max' max=EInt
	'}';

VariabilityEntitySet returns VariabilityEntitySet:
	{VariabilityEntitySet}
	'VariabilityEntitySet'
	'{'
		('pas' pas=ParameterSet)?
		('prs' prs=PropertySet)?
		('cs' cs=ContextSet)?
		('pes' pes=PortElementSet)?
	'}';

enum BlockType returns BlockType:
	IDENTIFYING = 'IDENTIFYING' | SUPER_IDENTIFYING = 'SUPER_IDENTIFYING' | COMPOSED = 'COMPOSED' | ALLOCATABLE = 'ALLOCATABLE'
;

BuildingBlockDescription returns BuildingBlockDescription:
	'BuildingBlockDescription'
	name=EString
	'{'
		('dvg' dvg=[DVG|EString])?
		'bb' '{' bb+=BuildingBlock ( "," bb+=BuildingBlock)* '}' 
		('dt' '{' dt+=Decomposition ( "," dt+=Decomposition)* '}' )?
		('c' '{' c+=Container ( "," c+=Container)* '}' )?
	'}';

SharedResources returns SharedResources:
	'SharedResources'
	'{'
		'number' number=EInt
	'}';

ResourceGroupId returns ResourceGroupId:
	'ResourceGroupId'
	'{'
		'number' number=EInt
	'}';

Container returns Container:
	{Container}
	'Container'
	name=EString
	'{'
		('bbr' bbr=[BuildingBlock|EString])?
		('bbc' bbc=BuildingBlock)?
		('bbi' bbi=BuildingBlockInst)?
	'}';

Loop returns Loop:
	'Loop'
	name=EString
	'{'
		'c' '{' c+=Container ( "," c+=Container)* '}' 
		'n' n=Number
	'}';

Sequential returns Sequential:
	'Sequential'
	name=EString
	'{'
		'c' '{' c+=Container ( "," c+=Container)* '}' 
	'}';

Parallel returns Parallel:
	'Parallel'
	name=EString
	'{'
		'p' p=Policy
		'c' '{' c+=Container ( "," c+=Container)* '}' 
	'}';

ConditionalFork returns ConditionalFork:
	'ConditionalFork'
	name=EString
	'{'
		'c' '{' c+=Container ( "," c+=Container)* '}' 
		'co' co=Condition
	'}';

EquivalenceFork returns EquivalenceFork:
	'EquivalenceFork'
	name=EString
	'{'
		'c' '{' c+=Container ( "," c+=Container)* '}' 
	'}';

Unsequenceable returns Unsequenceable:
	'Unsequenceable'
	name=EString
	'{'
		'c' '{' c+=Container ( "," c+=Container)* '}' 
	'}';

enum Policy returns Policy:
				UNDEFINED = 'UNDEFINED' | WAITFORALL = 'WAITFORALL' | WAITFORFIRST = 'WAITFORFIRST';

ParameterSet returns ParameterSet:
	{ParameterSet}
	'ParameterSet'
	'{'
		('pi' '{' pi+=ParameterInst ( "," pi+=ParameterInst)* '}' )?
	'}';

PropertySet returns PropertySet:
	{PropertySet}
	'PropertySet'
	'{'
		('pi' '{' pi+=PropertyInst ( "," pi+=PropertyInst)* '}' )?
	'}';

ContextSet returns ContextSet:
	{ContextSet}
	'ContextSet'
	'{'
		('ci' '{' ci+=ContextInst ( "," ci+=ContextInst)* '}' )?
	'}';

PortElementSet returns PortElementSet:
	{PortElementSet}
	'PortElementSet'
	'{'
		('pe' '{' pe+=PortElement ( "," pe+=PortElement)* '}' )?
	'}';

Mandatory returns Mandatory:
	'Mandatory'
	name=EString
	'{'
		'in' in=Input
	'}';

Optional returns Optional:
	'Optional'
	name=EString
	'{'
		'in' in=Input
	'}';

AND returns AND:
	'AND'
	name=EString
	'{'
		'in' '{' in+=Input ( "," in+=Input)* '}' 
	'}';

XOR returns XOR:
	'XOR'
	name=EString
	'{'
		'in' '{' in+=Input ( "," in+=Input)* '}' 
	'}';

OR returns OR:
	'OR'
	name=EString
	'{'
		'in' '{' in+=Input ( "," in+=Input)* '}' 
	'}';

enum Interface returns Interface:
				INTERNAL = 'INTERNAL' | EXTERNAL = 'EXTERNAL';

ExtInputPort returns ExtInputPort:
	'ExtInputPort'
	name=EString
	('=>' outputport=[OutputPort|EString])?
	'{'
		'RepresentationType' rt=RT
		'DataObject' dor=[dor::DataObjectDef|EString]
		('Element' er=[dor::ElementDef|EString])?
	'}';

InitCPort returns InitCPort:
	'InitCPort'
	name=EString
	'=>' ve=[VariabilityEntity|EString]
	'{'
		'VariabilityType' vt=VT
		('Description' description=EString)?
		('Interface' interface=Interface)?
		(vi=VSPInit)?
		('BuildingBlockInstance' bbi=[BuildingBlockInst|EString])?
		('Index' gii=EInt)?
	'}';
	
InitWSMPort returns InitWSMPort:
	'InitWSMPort'
	name=EString
	'=>' ve=[VariabilityEntity|EString]
	'{'
		'VariabilityType' vt=VT
		('Description' description=EString)?
		('Interface' interface=Interface)?
		(sws=StaticWeights)?
		('BuildingBlockInstance' bbi=[BuildingBlockInst|EString])?
		('Index' gii=EInt)?
	'}';

StaticWeights returns StaticWeights:
	'StaticWeights'
	'('
		sw+=StaticWeight ( "," sw+=StaticWeight)*
	')';

StaticWeight returns StaticWeight:
	inputport=[InputPort|EString]
	':'
	weight=EDouble
	;

OutputCPort_Impl returns OutputCPort:
	'OutputCPort'
	name=EString
	'=>' ve=[VariabilityEntity|EString]
	'{'
		'VariabilityType' vt=VT
		('Description' description=EString)?
		('BuildingBlockInstance' bbi=[BuildingBlockInst|EString])?
		('Index' gii=EInt)?
	'}';

Expression returns Expression:
	expr=EString
	;

CombinationAssignment returns CombinationAssignment:
	'CombinationAssignment'
	'{'
		combination+=Combination ( "," combination+=Combination)*
	'}';

Combination returns Combination:
	'['
		element+=Element0 ( "," element+=Element0)*
	']'
	'='
	value=Value
	;

Element0 returns Element:
	index=EInt
	;

Value returns Value:
	value=EDouble
	;

InputCPort_Impl returns InputCPort:
	'InputCPort'
	name=EString
	'=>' outputcport=[OutputCPort|EString]
	;

ExtInputCPort returns ExtInputCPort:
	'ExtInputCPort'
	name=EString
	'=>' outputcport=[OutputCPort|EString]
	'{'
		'DataObject' dor=[dor::DataObjectDef|EString]
		('Element' er=[dor::ElementDef|EString])?
	'}';

Equal returns Equal:
	'==/!='
	'('
	'inverse' inverse=EBoolean
	('accuracy' accuracy=Accuracy)?
	')'
	;

GreaterThan returns GreaterThan:
	'>/>='
	'('
	'inclusive' inclusive=EBoolean
	')'
	;

LessThan returns LessThan:
	'</<='
	'('
	'inclusive' inclusive=EBoolean
	')'
	;

Accuracy returns Accuracy:
	value=EDouble
	;

OutputWSMPort_Impl returns OutputWSMPort:
	'OutputWSMPort'
	name=EString
	'=>' ve=[VariabilityEntity|EString]
	'{'
		'VariabilityType' vt=VT
		('Description' description=EString)?
		('BuildingBlockInstance' bbi=[BuildingBlockInst|EString])?
		('Index' gii=EInt)?
	'}';

Description returns Description:
	'Description'
	'{'
		(precond=Precondition)?
		core=Core
	'}';

Precondition returns Precondition:
	'Precondition'
	'{'
		init+=INIT ( "," init+=INIT)*
		internalcomf+=InternalCOMF ( "," internalcomf+=InternalCOMF)*
	'}';

Core returns Core:
	'Core'
	'{'
		iip+=InternalInputPort ( "," iip+=InternalInputPort)*
		iop=InternalOutputPort
		('O=f(I):' expr=Expression)?
		(ca=CombinationAssignment)?
	'}';

InternalCOMF returns InternalCOMF:
	'InternalCOMF'
	'{'
		iip=InternalInputPort
		icp=InputCPort
		iop=InternalOutputPort
		'O=f(I):' co=ComparisonCOp
	'}';

InternalOutputPort returns InternalOutputPort:
	'InternalOutputPort'
	name=EString
	'=>' ve=[VariabilityEntity|EString]
	'{'
		'VariabilityType' vt=VT
		'RepresentationType' rt=RT
		('Description' description=EString)?
		('BuildingBlockInstance' bbi=[BuildingBlockInst|EString])?
		('Index' gii=EInt)?
	'}';

InternalInputPort returns InternalInputPort:
	'InternalInputPort'
	name=EString
	'=>' internalportref=[InternalPortRef|EString]
	;

LinearNormalization returns LinearNormalization:
	'LinearNormalization'
	'('
		'direction' direction=Direction
		('min' min=Min)?
		('max' max=Max)?
	')';

enum Direction returns Direction:
				INC = 'INC' | DEC = 'DEC';

Min returns Min:
	value=EDouble
	;

Max returns Max:
	value=EDouble
	;

RatingCOp_Impl returns RatingCOp:
	{RatingCOp}
	'RatingCOp'
	;

InputWSMPort_Impl returns InputWSMPort:
	'InputWSMPort'
	name=EString
	'=>' outputwsmport=[OutputWSMPort|EString]
	;

ExtInputWSMPort returns ExtInputWSMPort:
	'ExtInputWSMPort'
	name=EString
	'=>' outputwsmport=[OutputWSMPort|EString]
	'{'
		'DataObject' dor=[dor::DataObjectDef|EString]
		('Element' er=[dor::ElementDef|EString])?
	'}';

WSM returns WSM:
	{WSM}
	'WSM'
	;

AGGR returns AGGR:
	'AGGR'
	'{'
		op=OutputPort
		ip+=InputPort ( "," ip+=InputPort)*
	'}';

DAGGR returns DAGGR:
	'DAGGR'
	'{'
		op=OutputPort
	'}';
