package org.xtext.bb.generator;

@SuppressWarnings("all")
public class Node {
  public String generateNodeClassCode() {
    StringBuilder code = new StringBuilder();
    code.append("class Node<T> {");
    code.append("\n\t");
    code.append("private String name;");
    code.append("\n\t");
    code.append("private List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,T>> vsp;");
    code.append("\n\t");
    code.append("private List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,List<T>>> vsp_2;");
    code.append("\n\t");
    code.append("public Node(String name) {");
    code.append("\n\t\t");
    code.append("this.name = name;");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("public Node(String name, List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,T>> vsp) {");
    code.append("\n\t\t");
    code.append("this.name = name;");
    code.append("\n\t\t");
    code.append("this.vsp = vsp;");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("public String name() {");
    code.append("\n\t\t");
    code.append("return this.name;");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,T>> vsp() {");
    code.append("\n\t\t");
    code.append("return this.vsp;");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,List<T>>> vsp_2() {");
    code.append("\n\t\t");
    code.append("return this.vsp_2;");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("T vsp(int slotIndex) {");
    code.append("\n\t\t");
    code.append("return this.vsp.get(slotIndex).getValue();");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("List<T> vsp_2(int slotIndex) {");
    code.append("\n\t\t");
    code.append("return this.vsp_2.get(slotIndex).getValue();");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("SimpleEntry<List<List<SimpleEntry<String,Integer>>>,T> slot(int slotIndex) {");
    code.append("\n\t\t");
    code.append("return this.vsp.get(slotIndex);");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("SimpleEntry<List<List<SimpleEntry<String,Integer>>>,List<T>> slot_2(int slotIndex) {");
    code.append("\n\t\t");
    code.append("return this.vsp_2.get(slotIndex);");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("\n\t");
    code.append("List<List<SimpleEntry<String,Integer>>> header(int slotIndex) {");
    code.append("\n\t\t");
    code.append("if (this instanceof NodeObjectList) {");
    code.append("\n\t\t\t");
    code.append("return this.vsp_2.get(slotIndex).getKey();");
    code.append("\n\t\t");
    code.append("}");
    code.append("\n\t\t");
    code.append("else {");
    code.append("\n\t\t\t");
    code.append("return this.vsp.get(slotIndex).getKey();");
    code.append("\n\t\t");
    code.append("}");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("public List<List<SimpleEntry<String,Integer>>> initUniqueResourceIdHeader(int id) {");
    code.append("\n\t\t");
    code.append("List<List<SimpleEntry<String,Integer>>> header = new ArrayList<List<SimpleEntry<String,Integer>>>();");
    code.append("\n\t\t");
    code.append("List<SimpleEntry<String,Integer>> headerRow = new ArrayList<SimpleEntry<String,Integer>>();");
    code.append("\n\t\t");
    code.append("SimpleEntry<String,Integer> pair = new SimpleEntry<String,Integer>(\"UNIQUE_RESOURCE_ID\", id);");
    code.append("\n\t\t");
    code.append("headerRow.add(pair);");
    code.append("\n\t\t");
    code.append("header.add(headerRow);");
    code.append("\n\t\t");
    code.append("return header;");
    code.append("}");
    code.append("\n\t");
    code.append("public void initLeaf(List<T> leafValues) {");
    code.append("\n\t\t");
    code.append("this.vsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,T>>();");
    code.append("\n\t\t");
    code.append("for (int i = 0; i < leafValues.size(); i++) {");
    code.append("\n\t\t\t");
    code.append("this.vsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>,T>(null,leafValues.get(i)));");
    code.append("\n\t\t");
    code.append("}");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("public void initLeaf_2(List<List<T>> leafValues) {");
    code.append("\n\t\t");
    code.append("this.vsp_2 = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,List<T>>>();");
    code.append("\n\t\t");
    code.append("for (int i = 0; i < leafValues.size(); i++) {");
    code.append("\n\t\t\t");
    code.append("this.vsp_2.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>,List<T>>(null,leafValues.get(i)));");
    code.append("\n\t\t");
    code.append("}");
    code.append("\n\t");
    code.append("}");
    code.append("public void initLeaf(List<T> leafValues, int id) {");
    code.append("\n\t\t");
    code.append("this.vsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,T>>();");
    code.append("\n\t\t");
    code.append("for (int i = 0; i < leafValues.size(); i++) {");
    code.append("\n\t\t\t");
    code.append("this.vsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>,T>(initUniqueResourceIdHeader(id),leafValues.get(i)));");
    code.append("\n\t\t");
    code.append("}");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("public void initLeaf_2(List<List<T>> leafValues, int id) {");
    code.append("\n\t\t");
    code.append("this.vsp_2 = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,List<T>>>();");
    code.append("\n\t\t");
    code.append("for (int i = 0; i < leafValues.size(); i++) {");
    code.append("\n\t\t\t");
    code.append("this.vsp_2.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>,List<T>>(initUniqueResourceIdHeader(id),leafValues.get(i)));");
    code.append("\n\t\t");
    code.append("}");
    code.append("\n\t");
    code.append("}");
    code.append("public void assignVSP_2(List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,List<T>>> p) {");
    code.append("\n\t\t");
    code.append("this.vsp_2 = p;");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("\n\t");
    code.append("List <T> values() {");
    code.append("\n\t\t");
    code.append("List<T> tmp = new ArrayList<T>();");
    code.append("\n\t\t");
    code.append("for (int i = 0; i < this.vsp.size(); i++) {");
    code.append("\n\t\t\t");
    code.append("tmp.add(this.vsp.get(i).getValue());");
    code.append("\n\t\t");
    code.append("}");
    code.append("\n\t");
    code.append("return tmp;");
    code.append("\n\t");
    code.append("}");
    code.append("\n");
    code.append("}");
    return code.toString();
  }

  public String generateNodeObjectClassCode() {
    StringBuilder code = new StringBuilder();
    code.append("class NodeObject extends Node<Object> {");
    code.append("\n\t");
    code.append("public NodeObject(String name) {");
    code.append("\n\t\t");
    code.append("super(name);");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("public NodeObject(String name, List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> vsp) {");
    code.append("\n\t\t");
    code.append("super(name,vsp);");
    code.append("\n\t");
    code.append("}");
    code.append("\n");
    code.append("}");
    return code.toString();
  }

  public String generateNodeObjectListClassCode() {
    StringBuilder code = new StringBuilder();
    code.append("class NodeObjectList extends Node<Object> {");
    code.append("\n\t");
    code.append("public NodeObjectList(String name) {");
    code.append("\n\t\t");
    code.append("super(name);");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("public NodeObjectList(String name, List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> vsp) {");
    code.append("\n\t\t");
    code.append("super(name,vsp);");
    code.append("\n\t");
    code.append("}");
    code.append("\n");
    code.append("}");
    return code.toString();
  }

  public String generateNodePsClassCode() {
    StringBuilder code = new StringBuilder();
    code.append("class NodePs extends Node<Map<String,Double>> {");
    code.append("\n\t");
    code.append("public NodePs(String name) {");
    code.append("\n\t\t");
    code.append("super(name);");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("public NodePs(String name, List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Map<String,Double>>> vsp) {");
    code.append("\n\t\t");
    code.append("super(name,vsp);");
    code.append("\n\t");
    code.append("}");
    code.append("\n");
    code.append("}");
    return code.toString();
  }
}
