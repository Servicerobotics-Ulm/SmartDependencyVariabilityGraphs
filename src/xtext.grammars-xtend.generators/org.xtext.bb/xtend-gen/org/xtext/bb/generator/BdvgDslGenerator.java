/**
 * generated by Xtext 2.21.0
 */
package org.xtext.bb.generator;

import bbn.AGGR;
import bbn.APRO;
import bbn.AbstractInitPort;
import bbn.AbstractInputPort;
import bbn.AbstractOutputPort;
import bbn.Accuracy;
import bbn.BBContainer;
import bbn.COMF;
import bbn.CONT;
import bbn.Combination;
import bbn.CombinationAssignment;
import bbn.ConditionalFork;
import bbn.Core;
import bbn.DMAGR;
import bbn.DVG;
import bbn.DVGPort;
import bbn.Description;
import bbn.Direction;
import bbn.EPROD;
import bbn.Equal;
import bbn.EquivalenceFork;
import bbn.Expression;
import bbn.Fork;
import bbn.GreaterThan;
import bbn.INIT;
import bbn.InitCPort;
import bbn.InitPort;
import bbn.InitWSMPort;
import bbn.InputCPort;
import bbn.InputPort;
import bbn.InputWSMPort;
import bbn.Interface;
import bbn.InternalCOMF;
import bbn.InternalInputPort;
import bbn.InternalOutputPort;
import bbn.LessThan;
import bbn.LinearNormalization;
import bbn.MAGR;
import bbn.NormalizationCOp;
import bbn.OR;
import bbn.Optional;
import bbn.OutputCPort;
import bbn.OutputPort;
import bbn.PTCC;
import bbn.Pattern;
import bbn.Precondition;
import bbn.RPRO;
import bbn.SAPRO;
import bbn.StaticWeight;
import bbn.TRAN;
import bbn.VT;
import bbn.VariabilityEntity;
import bbn.XOR;
import com.google.common.base.Objects;
import dor.BoolDef;
import dor.IntegerDef;
import dor.RealDef;
import dor.StringDef;
import dor.TypeDef;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.InputOutput;
import vi.BoolVSPInit;
import vi.ComplexVSPInit;
import vi.IntegerRandomGenerator;
import vi.IntegerVSPInit;
import vi.Real;
import vi.RealRandomGenerator;
import vi.RealVSPInit;
import vi.StringVSPInit;
import vi.Type;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BdvgDslGenerator extends AbstractGenerator {
  private StringBuilder TO_TCL;

  private StringBuilder CODE;

  private StringBuilder CODE_KB;

  private StringBuilder CODE_TCB;

  private StringBuilder CODE_TCB_CALL;

  private StringBuilder SOLVE_CODE;

  private StringBuilder INITIALIZATION_CODE;

  private StringBuilder LOCAL_RESOLUTION_CODE;

  private StringBuilder CALL_SEQUENCE_CODE;

  private Map<String, Pattern> PATTERN_MAP;

  private Map<Pattern, Boolean> IS_RESOLVED_MAP;

  private Map<Pattern, List<String>> DEPENDENCY_MAP;

  private String NUMERIC_VSP_STANDARD = "List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Double>>";

  private String SYMBOLIC_VSP_STANDARD = "List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,String>>";

  private String GENERIC_VSP_STANDARD_INPUT = "List<List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>>";

  private String GENERIC_VSP_STANDARD_OUTPUT = "List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>";

  private String PS_NODE = "List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,List<Object>>>";

  private Map<String, Integer> PASSIVE_LOOKUP;

  private List<AbstractMap.SimpleEntry<String, Integer>> PASSIVE_LOOKUP_LIST;

  private Map<String, Integer> ACTIVE;

  private Map<String, Integer> CONSTANT;

  private Pattern ROOT_PATTERN;

  private boolean CHECK_FOR_IS_SAM_IN_PRODUCTION = false;

  private boolean CHECK_FOR_IS_SAM_IN_CONTRADICTION = false;

  private Node no;

  private Helpers he;

  private Leafs le;

  private JavaFunctions jf;

  private LispFunctions lf;

  private Lookup lo;

  private DynamicSolutionLinks dsl;

  private Import imp;

  private FinalEvaluation fe;

  private List<List<Integer>> allocationsListListNoDuplicates;

  private Map<Integer, List<Pattern>> solutionDVGPattern;

  private Set<AbstractMap.SimpleEntry<Pattern, OutputPort>> depToDaggr;

  private Map<AbstractOutputPort, List<Pattern>> solutionInitInstances;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    InputOutput.<String>println("doGenerate");
  }

  private boolean generateStaticCode = true;

  private boolean sos = false;

  public Map<String, Integer> getActive() {
    return this.ACTIVE;
  }

  public Map<String, Integer> getPassive() {
    return this.PASSIVE_LOOKUP;
  }

  private Map<AbstractOutputPort, Integer> UNIQUE_RESOURCE_ID;

  public String root(final DVG dvg, final List<List<Integer>> allocationsListListNoDuplicates, final Map<Integer, List<Pattern>> solutionDVGPattern, final boolean gsc, final boolean sos) {
    this.allocationsListListNoDuplicates = allocationsListListNoDuplicates;
    this.solutionDVGPattern = solutionDVGPattern;
    this.generateStaticCode = gsc;
    this.sos = sos;
    HashSet<AbstractMap.SimpleEntry<Pattern, OutputPort>> _hashSet = new HashSet<AbstractMap.SimpleEntry<Pattern, OutputPort>>();
    this.depToDaggr = _hashSet;
    HashMap<AbstractOutputPort, List<Pattern>> _hashMap = new HashMap<AbstractOutputPort, List<Pattern>>();
    this.solutionInitInstances = _hashMap;
    HashMap<AbstractOutputPort, Integer> _hashMap_1 = new HashMap<AbstractOutputPort, Integer>();
    this.UNIQUE_RESOURCE_ID = _hashMap_1;
    Node _node = new Node();
    this.no = _node;
    Helpers _helpers = new Helpers();
    this.he = _helpers;
    Leafs _leafs = new Leafs();
    this.le = _leafs;
    JavaFunctions _javaFunctions = new JavaFunctions();
    this.jf = _javaFunctions;
    LispFunctions _lispFunctions = new LispFunctions();
    this.lf = _lispFunctions;
    Lookup _lookup = new Lookup();
    this.lo = _lookup;
    DynamicSolutionLinks _dynamicSolutionLinks = new DynamicSolutionLinks();
    this.dsl = _dynamicSolutionLinks;
    Import _import = new Import();
    this.imp = _import;
    FinalEvaluation _finalEvaluation = new FinalEvaluation();
    this.fe = _finalEvaluation;
    StringBuilder _stringBuilder = new StringBuilder();
    this.TO_TCL = _stringBuilder;
    HashMap<String, Integer> _hashMap_2 = new HashMap<String, Integer>();
    this.PASSIVE_LOOKUP = _hashMap_2;
    ArrayList<AbstractMap.SimpleEntry<String, Integer>> _arrayList = new ArrayList<AbstractMap.SimpleEntry<String, Integer>>();
    this.PASSIVE_LOOKUP_LIST = _arrayList;
    HashMap<String, Integer> _hashMap_3 = new HashMap<String, Integer>();
    this.ACTIVE = _hashMap_3;
    HashMap<String, Integer> _hashMap_4 = new HashMap<String, Integer>();
    this.CONSTANT = _hashMap_4;
    System.out.println("CODE GENERATOR!");
    StringBuilder _stringBuilder_1 = new StringBuilder();
    this.CODE = _stringBuilder_1;
    StringBuilder _stringBuilder_2 = new StringBuilder();
    this.CODE_KB = _stringBuilder_2;
    StringBuilder _stringBuilder_3 = new StringBuilder();
    this.CODE_TCB = _stringBuilder_3;
    StringBuilder _stringBuilder_4 = new StringBuilder();
    this.CODE_TCB_CALL = _stringBuilder_4;
    StringBuilder _stringBuilder_5 = new StringBuilder();
    this.SOLVE_CODE = _stringBuilder_5;
    StringBuilder _stringBuilder_6 = new StringBuilder();
    this.INITIALIZATION_CODE = _stringBuilder_6;
    StringBuilder _stringBuilder_7 = new StringBuilder();
    this.LOCAL_RESOLUTION_CODE = _stringBuilder_7;
    StringBuilder _stringBuilder_8 = new StringBuilder();
    this.CALL_SEQUENCE_CODE = _stringBuilder_8;
    HashMap<String, Pattern> _hashMap_5 = new HashMap<String, Pattern>();
    this.PATTERN_MAP = _hashMap_5;
    HashMap<Pattern, Boolean> _hashMap_6 = new HashMap<Pattern, Boolean>();
    this.IS_RESOLVED_MAP = _hashMap_6;
    HashMap<Pattern, List<String>> _hashMap_7 = new HashMap<Pattern, List<String>>();
    this.DEPENDENCY_MAP = _hashMap_7;
    if ((!this.sos)) {
      this.SOLVE_CODE.append("class Solve {");
    } else {
      String _name = dvg.getName();
      String _plus = ("class " + _name);
      String _plus_1 = (_plus + " {");
      this.SOLVE_CODE.append(_plus_1);
      this.SOLVE_CODE.append("\n\t");
      this.SOLVE_CODE.append("Node getNode(String name) {");
      this.SOLVE_CODE.append("\n\t");
      this.SOLVE_CODE.append("return NODE_COLLECTION.get(name);");
      this.SOLVE_CODE.append("\n\t");
      this.SOLVE_CODE.append("}");
      this.SOLVE_CODE.append("\n\t");
      this.SOLVE_CODE.append("int getAllocations() {");
      this.SOLVE_CODE.append("\n\t");
      int _size = this.allocationsListListNoDuplicates.size();
      String _plus_2 = ("return " + Integer.valueOf(_size));
      String _plus_3 = (_plus_2 + ";");
      this.SOLVE_CODE.append(_plus_3);
      this.SOLVE_CODE.append("\n\t");
      this.SOLVE_CODE.append("}");
    }
    this.SOLVE_CODE.append("\n\t");
    this.SOLVE_CODE.append("private Map<String, Node> NODE_COLLECTION;");
    this.SOLVE_CODE.append("\n\t");
    this.SOLVE_CODE.append("\n\t");
    this.INITIALIZATION_CODE.append("\n\t");
    this.INITIALIZATION_CODE.append("void init() {");
    this.INITIALIZATION_CODE.append("\n\t\t");
    this.INITIALIZATION_CODE.append("this.NODE_COLLECTION = new HashMap<String, Node>();");
    this.INITIALIZATION_CODE.append("\n\t\t");
    this.INITIALIZATION_CODE.append("List<Object> leafValues;");
    this.INITIALIZATION_CODE.append("\n\t\t");
    this.INITIALIZATION_CODE.append("List<List<Object>> leafValues_2;");
    this.INITIALIZATION_CODE.append("\n\t\t");
    this.INITIALIZATION_CODE.append("List<Map<String,Double>> leafValuesPsMapList;");
    this.INITIALIZATION_CODE.append("Map<String,Double> leafValuesPsMap;");
    this.INITIALIZATION_CODE.append("\n\t\t");
    this.INITIALIZATION_CODE.append("NodeObject nodeObject;");
    this.INITIALIZATION_CODE.append("\n\t\t");
    this.INITIALIZATION_CODE.append("NodeObjectList nodeObjectList;");
    this.INITIALIZATION_CODE.append("\n\t\t");
    this.INITIALIZATION_CODE.append("NodePs nodePs;");
    this.INITIALIZATION_CODE.append("\n\t\t");
    this.INITIALIZATION_CODE.append("Random random;");
    this.INITIALIZATION_CODE.append("\n\t\t");
    this.INITIALIZATION_CODE.append("String[] dataFromFile;");
    this.INITIALIZATION_CODE.append("\n\t\t");
    this.INITIALIZATION_CODE.append("\n\t\t");
    if ((!sos)) {
      this.CALL_SEQUENCE_CODE.append("\n\t");
      this.CALL_SEQUENCE_CODE.append("void solve() {");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
      this.CALL_SEQUENCE_CODE.append("List<Node> params;");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
      this.CALL_SEQUENCE_CODE.append("List<List<Node>> params_2d;");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
      this.CALL_SEQUENCE_CODE.append("int solution = -1;");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
      this.CALL_SEQUENCE_CODE.append("double prevValue = 0.0;");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
      this.CALL_SEQUENCE_CODE.append("int solutionIndex = -1;");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
      this.CALL_SEQUENCE_CODE.append("SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object> solutionSlot = null;");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
      String _string = Integer.valueOf(this.allocationsListListNoDuplicates.size()).toString();
      String _plus_4 = ("for (int allocation = 0; allocation < " + _string);
      String _plus_5 = (_plus_4 + "; allocation++) {");
      this.CALL_SEQUENCE_CODE.append(_plus_5);
      this.CALL_SEQUENCE_CODE.append("System.out.println(\"**********************************************************************************\");");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
      this.CALL_SEQUENCE_CODE.append("System.out.println(\"**********************************************************************************\");");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
      this.CALL_SEQUENCE_CODE.append("System.out.println(\"**********************************************************************************\");");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
    } else {
      this.CALL_SEQUENCE_CODE.append("\n\t");
      this.CALL_SEQUENCE_CODE.append("Node solve(String name, int allocation) {");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
      this.CALL_SEQUENCE_CODE.append("List<Node> params;");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
      this.CALL_SEQUENCE_CODE.append("List<List<Node>> params_2d;");
      this.CALL_SEQUENCE_CODE.append("\n\t\t");
    }
    this.determineAbsoluteDependencies(dvg);
    boolean isValid = true;
    Set<Map.Entry<Pattern, List<String>>> _entrySet = this.DEPENDENCY_MAP.entrySet();
    for (final Map.Entry<Pattern, List<String>> i : _entrySet) {
      {
        boolean isSAM = this.he.isSAM(i.getValue());
        if (((!isSAM) && (((i.getKey() instanceof CONT) || (i.getKey() instanceof PTCC)) || (i.getKey() instanceof EPROD)))) {
          isValid = false;
          String _name_1 = i.getKey().getName();
          String _plus_6 = ("ERROR: There is no SAM-Situation for " + _name_1);
          String _plus_7 = (_plus_6 + "! Please fix the problem.");
          System.err.println(_plus_7);
        }
        String _name_2 = i.getKey().getName();
        String _plus_8 = (_name_2 + ": ");
        System.out.println(_plus_8);
        List<String> _value = i.getValue();
        for (final String j : _value) {
          {
            System.out.print(j);
            System.out.print("\t");
          }
        }
        System.out.println();
      }
    }
    isValid = true;
    if (isValid) {
      String name = null;
      name = dvg.getName();
      this.globalResolution(dvg);
      this.INITIALIZATION_CODE.append("\n\t");
      this.INITIALIZATION_CODE.append("}");
      String rootNodeName = null;
      if ((this.ROOT_PATTERN instanceof RPRO)) {
        rootNodeName = ((RPRO)this.ROOT_PATTERN).getOp().getName();
      } else {
        if ((this.ROOT_PATTERN instanceof APRO)) {
          rootNodeName = ((APRO)this.ROOT_PATTERN).getOp().getName();
        } else {
          if ((this.ROOT_PATTERN instanceof SAPRO)) {
            rootNodeName = ((SAPRO)this.ROOT_PATTERN).getOp().getName();
          } else {
            if ((this.ROOT_PATTERN instanceof CONT)) {
              rootNodeName = ((CONT)this.ROOT_PATTERN).getOp().getName();
            } else {
              if ((this.ROOT_PATTERN instanceof PTCC)) {
                rootNodeName = ((PTCC)this.ROOT_PATTERN).getOp().getName();
              } else {
                if ((this.ROOT_PATTERN instanceof EPROD)) {
                  rootNodeName = ((EPROD)this.ROOT_PATTERN).getOp().getName();
                }
              }
            }
          }
        }
      }
      System.out.println(("***************************** rootNodeName: " + rootNodeName));
      if ((!sos)) {
        this.CALL_SEQUENCE_CODE.append(this.fe.getNonSoSCode(rootNodeName, this.ACTIVE, this.PASSIVE_LOOKUP, this.TO_TCL));
      } else {
        this.CALL_SEQUENCE_CODE.append(this.fe.getSoSCode());
      }
      System.out.println("---------");
      System.out.println("PASSIVE LOOKUP");
      Set<Map.Entry<String, Integer>> _entrySet_1 = this.PASSIVE_LOOKUP.entrySet();
      for (final Map.Entry<String, Integer> i_1 : _entrySet_1) {
        String _key = i_1.getKey();
        String _plus_6 = (_key + " : ");
        Integer _value = i_1.getValue();
        String _plus_7 = (_plus_6 + _value);
        System.out.println(_plus_7);
      }
      System.out.println("PASSIVE LOOKUP_LIST");
      for (final AbstractMap.SimpleEntry<String, Integer> i_2 : this.PASSIVE_LOOKUP_LIST) {
        String _key_1 = i_2.getKey();
        String _plus_8 = (_key_1 + " : ");
        Integer _value_1 = i_2.getValue();
        String _plus_9 = (_plus_8 + _value_1);
        System.out.println(_plus_9);
      }
      System.out.println("ACTIVE");
      Set<Map.Entry<String, Integer>> _entrySet_2 = this.ACTIVE.entrySet();
      for (final Map.Entry<String, Integer> i_3 : _entrySet_2) {
        String _key_2 = i_3.getKey();
        String _plus_10 = (_key_2 + " : ");
        Integer _value_2 = i_3.getValue();
        String _plus_11 = (_plus_10 + _value_2);
        System.out.println(_plus_11);
      }
      System.out.println("---------");
      int _size_1 = this.PASSIVE_LOOKUP.size();
      boolean _greaterThan = (_size_1 > 0);
      if (_greaterThan) {
      }
      this.CALL_SEQUENCE_CODE.append("\n\t");
      this.CALL_SEQUENCE_CODE.append("}");
      this.SOLVE_CODE.append(this.jf.generateGetCartesianProductFunction());
      this.SOLVE_CODE.append("\n\n");
      this.SOLVE_CODE.append(this.jf.generateIsSAM());
      this.SOLVE_CODE.append("\n\n");
      this.SOLVE_CODE.append(this.jf.generateIsValidCombinationIgnoreResource());
      this.SOLVE_CODE.append("\n\n");
      this.SOLVE_CODE.append(this.jf.generateIsValidCombinationInverse());
      this.SOLVE_CODE.append("\n\n");
      this.SOLVE_CODE.append(this.jf.generateIsValidCombinationMerge());
      this.SOLVE_CODE.append("\n\n");
      this.SOLVE_CODE.append(this.jf.generateIsValidCombinationIgnore());
      this.SOLVE_CODE.append("\n\n");
      this.SOLVE_CODE.append(this.jf.generateIsDominated());
      this.SOLVE_CODE.append("\n\n");
      this.SOLVE_CODE.append(this.jf.generateMaxFunction());
      this.SOLVE_CODE.append("\n\n");
      this.SOLVE_CODE.append(this.jf.generateMinFunction());
      this.SOLVE_CODE.append("\n\n");
      this.SOLVE_CODE.append(this.lf.generateGetDataFromFile());
      this.SOLVE_CODE.append("\n\n");
      this.SOLVE_CODE.append(this.LOCAL_RESOLUTION_CODE);
      this.SOLVE_CODE.append("\n\n");
      this.SOLVE_CODE.append(this.INITIALIZATION_CODE);
      this.SOLVE_CODE.append("\n\n");
      this.SOLVE_CODE.append(this.CALL_SEQUENCE_CODE);
      this.SOLVE_CODE.append("\n");
      this.SOLVE_CODE.append("}");
      if (this.generateStaticCode) {
        this.CODE.append(this.imp.getImportCode());
        this.CODE.append("\n\n");
        this.CODE.append(this.no.generateNodeClassCode());
        this.CODE.append("\n\n");
        this.CODE.append(this.no.generateNodeObjectClassCode());
        this.CODE.append("\n\n");
        this.CODE.append(this.no.generateNodeObjectListClassCode());
        this.CODE.append("\n\n");
        this.CODE.append(this.no.generateNodePsClassCode());
        this.CODE.append("\n\n");
      }
      this.CODE.append(this.SOLVE_CODE);
      this.CODE.append("\n\n");
      if ((!this.sos)) {
        this.CODE.append((("public class DVGSolver_" + name) + "{"));
        this.CODE.append("\n\t");
        this.CODE.append("public static void main (String[] args) {");
        this.CODE.append("\n\t\t");
        this.CODE.append("Solve solve = new Solve();");
        this.CODE.append("\n\t\t");
        this.CODE.append("solve.init();");
        this.CODE.append("\n\t\t");
        this.CODE.append("solve.solve();");
        this.CODE.append("\n\t");
        this.CODE.append("}");
        this.CODE.append("\n");
        this.CODE.append("}");
        this.CODE.append("\n\n");
      }
      StringBuilder tcldvgpre = new StringBuilder();
      tcldvgpre.append("(define-tcb (writeKBData)\n");
      tcldvgpre.append("(action (\n");
      StringBuilder tcldvgpost = new StringBuilder();
      tcldvgpost.append(")))\n");
      StringBuilder tcldvg = new StringBuilder();
      tcldvg.append("(defun writeSmartSoftData ()\n");
      tcldvg.append("(execute \'(writeKBData))\n");
      tcldvg.append(this.CODE_TCB_CALL);
      tcldvg.append(")\n");
      tcldvg.append(tcldvgpre);
      tcldvg.append(this.CODE_KB);
      tcldvg.append(tcldvgpost);
      tcldvg.append(this.CODE_TCB);
      tcldvg.append(this.lf.lispCodeWriteToFile());
      return this.CODE.toString();
    }
    return null;
  }

  public void determineAbsoluteDependencies(final DVG dvg) {
    this.dsl.determineDMAGRReferences(dvg);
    EList<Pattern> _pattern = dvg.getPattern();
    for (final Pattern i : _pattern) {
      this.IS_RESOLVED_MAP.put(i, Boolean.valueOf(false));
    }
    EList<Pattern> _pattern_1 = dvg.getPattern();
    for (final Pattern i_1 : _pattern_1) {
      this.DEPENDENCY_MAP.put(i_1, this.getNext(i_1));
    }
    EList<BBContainer> _bbcontainer = dvg.getBbcontainer();
    for (final BBContainer i_2 : _bbcontainer) {
      {
        InputOutput.<String>println("######################################### bb container");
        this.determineAbsoluteDependencies(i_2);
      }
    }
  }

  public void determineAbsoluteDependencies(final BBContainer bbc) {
    EList<Pattern> _pattern = bbc.getPattern();
    for (final Pattern i : _pattern) {
      this.DEPENDENCY_MAP.put(i, this.getNext(i));
    }
    EList<BBContainer> _bbcontainer = bbc.getBbcontainer();
    for (final BBContainer i_1 : _bbcontainer) {
      this.determineAbsoluteDependencies(i_1);
    }
  }

  public List<String> getNext(final Pattern lp) {
    List<String> stringList = new ArrayList<String>();
    if ((lp instanceof RPRO)) {
      EList<InputPort> _ip = ((RPRO)lp).getIp();
      for (final InputPort i : _ip) {
        OutputPort _outputport = i.getOutputport();
        boolean _tripleNotEquals = (_outputport != null);
        if (_tripleNotEquals) {
          stringList.add(i.getOutputport().getName());
          Pattern lpr = this.he.getPattern(i.getOutputport());
          if ((lpr instanceof MAGR)) {
            AGGR la = this.he.getAGGR(i.getOutputport());
            stringList.addAll(this.getNext(la, ((MAGR)lpr).getName()));
          } else {
            stringList.addAll(this.getNext(lpr));
          }
        } else {
          stringList.add(i.getName());
        }
      }
    } else {
      if ((lp instanceof SAPRO)) {
        EList<InputPort> _ip_1 = ((SAPRO)lp).getIp();
        for (final InputPort i_1 : _ip_1) {
          OutputPort _outputport_1 = i_1.getOutputport();
          boolean _tripleNotEquals_1 = (_outputport_1 != null);
          if (_tripleNotEquals_1) {
            stringList.add(i_1.getOutputport().getName());
            Pattern lpr_1 = this.he.getPattern(i_1.getOutputport());
            if ((lpr_1 instanceof MAGR)) {
              AGGR la_1 = this.he.getAGGR(i_1.getOutputport());
              stringList.addAll(this.getNext(la_1, ((MAGR)lpr_1).getName()));
            } else {
              stringList.addAll(this.getNext(lpr_1));
            }
          } else {
            stringList.add(i_1.getName());
          }
        }
      } else {
        if ((lp instanceof APRO)) {
          EList<InputPort> _ip_2 = ((APRO)lp).getIp();
          for (final InputPort i_2 : _ip_2) {
            OutputPort _outputport_2 = i_2.getOutputport();
            boolean _tripleNotEquals_2 = (_outputport_2 != null);
            if (_tripleNotEquals_2) {
              stringList.add(i_2.getOutputport().getName());
              Pattern lpr_2 = this.he.getPattern(i_2.getOutputport());
              if ((lpr_2 instanceof MAGR)) {
                AGGR la_2 = this.he.getAGGR(i_2.getOutputport());
                stringList.addAll(this.getNext(la_2, ((MAGR)lpr_2).getName()));
              } else {
                stringList.addAll(this.getNext(lpr_2));
              }
            } else {
              stringList.add(i_2.getName());
            }
          }
        } else {
          if ((lp instanceof MAGR)) {
            EList<AGGR> _aggr = ((MAGR)lp).getAggr();
            for (final AGGR i_3 : _aggr) {
              EList<InputPort> _ip_3 = i_3.getIp();
              for (final InputPort j : _ip_3) {
                OutputPort _outputport_3 = j.getOutputport();
                boolean _tripleNotEquals_3 = (_outputport_3 != null);
                if (_tripleNotEquals_3) {
                  stringList.add(j.getOutputport().getName());
                  Pattern lpr_3 = this.he.getPattern(j.getOutputport());
                  if ((lpr_3 instanceof MAGR)) {
                    AGGR la_3 = this.he.getAGGR(j.getOutputport());
                    stringList.addAll(this.getNext(la_3, ((MAGR)lpr_3).getName()));
                  } else {
                    stringList.addAll(this.getNext(lpr_3));
                  }
                } else {
                  stringList.add(j.getName());
                }
              }
            }
          } else {
            if ((lp instanceof CONT)) {
              EList<InputPort> _ip_4 = ((CONT)lp).getIp();
              for (final InputPort i_4 : _ip_4) {
                OutputPort _outputport_4 = i_4.getOutputport();
                boolean _tripleNotEquals_4 = (_outputport_4 != null);
                if (_tripleNotEquals_4) {
                  stringList.add(i_4.getOutputport().getName());
                  Pattern lpr_4 = this.he.getPattern(i_4.getOutputport());
                  if ((lpr_4 instanceof MAGR)) {
                    AGGR la_4 = this.he.getAGGR(i_4.getOutputport());
                    stringList.addAll(this.getNext(la_4, ((MAGR)lpr_4).getName()));
                  } else {
                    stringList.addAll(this.getNext(lpr_4));
                  }
                } else {
                  stringList.add(i_4.getName());
                }
              }
              EObject tmp = ((CONT)lp).getIpp();
              if ((tmp instanceof InputWSMPort)) {
                stringList.add(((InputWSMPort)tmp).getOutputwsmport().getName());
                Pattern lpr_5 = this.he.getPattern(((InputWSMPort)tmp).getOutputwsmport());
                stringList.addAll(this.getNext(lpr_5));
              }
            } else {
              if ((lp instanceof EPROD)) {
                EList<InputPort> _ip_5 = ((EPROD)lp).getIp();
                for (final InputPort i_5 : _ip_5) {
                  OutputPort _outputport_5 = i_5.getOutputport();
                  boolean _tripleNotEquals_5 = (_outputport_5 != null);
                  if (_tripleNotEquals_5) {
                    stringList.add(i_5.getOutputport().getName());
                    Pattern lpr_6 = this.he.getPattern(i_5.getOutputport());
                    if ((lpr_6 instanceof MAGR)) {
                      AGGR la_5 = this.he.getAGGR(i_5.getOutputport());
                      stringList.addAll(this.getNext(la_5, ((MAGR)lpr_6).getName()));
                    } else {
                      stringList.addAll(this.getNext(lpr_6));
                    }
                  } else {
                    stringList.add(i_5.getName());
                  }
                }
              } else {
                if ((lp instanceof TRAN)) {
                  OutputPort _outputport_6 = ((TRAN)lp).getIp().getOutputport();
                  boolean _tripleNotEquals_6 = (_outputport_6 != null);
                  if (_tripleNotEquals_6) {
                    stringList.add(((TRAN)lp).getIp().getOutputport().getName());
                    Pattern lpr_7 = this.he.getPattern(((TRAN)lp).getIp().getOutputport());
                    if ((lpr_7 instanceof MAGR)) {
                      AGGR la_6 = this.he.getAGGR(((TRAN)lp).getIp().getOutputport());
                      stringList.addAll(this.getNext(la_6, ((MAGR)lpr_7).getName()));
                    } else {
                      stringList.addAll(this.getNext(lpr_7));
                    }
                  } else {
                    stringList.add(((TRAN)lp).getIp().getName());
                  }
                } else {
                  if ((lp instanceof COMF)) {
                    OutputPort _outputport_7 = ((COMF)lp).getIp().getOutputport();
                    boolean _tripleNotEquals_7 = (_outputport_7 != null);
                    if (_tripleNotEquals_7) {
                      stringList.add(((COMF)lp).getIp().getOutputport().getName());
                      Pattern lpr_8 = this.he.getPattern(((COMF)lp).getIp().getOutputport());
                      if ((lpr_8 instanceof MAGR)) {
                        AGGR la_7 = this.he.getAGGR(((COMF)lp).getIp().getOutputport());
                        stringList.addAll(this.getNext(la_7, ((MAGR)lpr_8).getName()));
                      } else {
                        stringList.addAll(this.getNext(lpr_8));
                      }
                    } else {
                      stringList.add(((COMF)lp).getIp().getOutputport().getName());
                    }
                    stringList.add(((COMF)lp).getIcp().getOutputcport().getName());
                    Pattern lpr_9 = this.he.getPattern(((COMF)lp).getIcp().getOutputcport());
                    stringList.addAll(this.getNext(lpr_9));
                  } else {
                    if ((lp instanceof PTCC)) {
                      EList<InputPort> _ip_6 = ((PTCC)lp).getIp();
                      for (final InputPort i_6 : _ip_6) {
                        OutputPort _outputport_8 = i_6.getOutputport();
                        boolean _tripleNotEquals_8 = (_outputport_8 != null);
                        if (_tripleNotEquals_8) {
                          stringList.add(i_6.getOutputport().getName());
                          Pattern lpr_10 = this.he.getPattern(i_6.getOutputport());
                          if ((lpr_10 instanceof MAGR)) {
                            AGGR la_8 = this.he.getAGGR(i_6.getOutputport());
                            stringList.addAll(this.getNext(la_8, ((MAGR)lpr_10).getName()));
                          } else {
                            stringList.addAll(this.getNext(lpr_10));
                          }
                        } else {
                          stringList.add(i_6.getName());
                        }
                      }
                      EObject tmp_1 = ((PTCC)lp).getIpp();
                      if ((tmp_1 instanceof InputWSMPort)) {
                        stringList.add(((InputWSMPort)tmp_1).getOutputwsmport().getName());
                        Pattern lpr_11 = this.he.getPattern(((InputWSMPort)tmp_1).getOutputwsmport());
                        stringList.addAll(this.getNext(lpr_11));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    this.IS_RESOLVED_MAP.put(lp, Boolean.valueOf(true));
    return stringList;
  }

  public List<String> getNext(final AGGR a, final String pname) {
    List<String> stringList = new ArrayList<String>();
    stringList.add(pname);
    EList<InputPort> _ip = a.getIp();
    for (final InputPort i : _ip) {
      OutputPort _outputport = i.getOutputport();
      boolean _tripleNotEquals = (_outputport != null);
      if (_tripleNotEquals) {
        stringList.add(i.getOutputport().getName());
        Pattern lpr = this.he.getPattern(i.getOutputport());
        if ((lpr instanceof MAGR)) {
          AGGR la = this.he.getAGGR(i.getOutputport());
          stringList.addAll(this.getNext(la, ((MAGR)lpr).getName()));
        } else {
          stringList.addAll(this.getNext(lpr));
        }
      } else {
        stringList.add(i.getName());
      }
    }
    return stringList;
  }

  public void globalResolution(final DVG dvg) {
    Set<Map.Entry<Pattern, Boolean>> _entrySet = this.IS_RESOLVED_MAP.entrySet();
    for (final Map.Entry<Pattern, Boolean> i : _entrySet) {
      i.setValue(Boolean.valueOf(false));
    }
    Set<Map.Entry<Pattern, Boolean>> _entrySet_1 = this.IS_RESOLVED_MAP.entrySet();
    for (final Map.Entry<Pattern, Boolean> i_1 : _entrySet_1) {
    }
    EList<Pattern> _pattern = dvg.getPattern();
    for (final Pattern i_2 : _pattern) {
      Boolean _get = this.IS_RESOLVED_MAP.get(i_2);
      boolean _not = (!(_get).booleanValue());
      if (_not) {
        this.resolveNext(i_2);
      }
    }
  }

  public String getInstanceName(final Pattern lp) {
    if ((lp instanceof INIT)) {
      int instanceCounter = this.solutionInitInstances.get(((INIT)lp).getAinip()).size();
      String name = ((INIT)lp).getAinip().getName();
      String _string = Integer.valueOf(instanceCounter).toString();
      String _plus = ((name + "_") + _string);
      name = _plus;
      return name;
    }
    return null;
  }

  public StringBuilder resolveNext(final Pattern lp) {
    StringBuilder _xblockexpression = null;
    {
      String _name = lp.getName();
      String _plus = ("TIMO LP:NAME" + _name);
      System.out.println(_plus);
      List<DVGPort> inputSet = new ArrayList<DVGPort>();
      List<List<DVGPort>> inputSetAg = new ArrayList<List<DVGPort>>();
      List<AbstractInputPort> inputSetInputs = new ArrayList<AbstractInputPort>();
      List<List<AbstractMap.SimpleEntry<AbstractOutputPort, String>>> allocInputSet = new ArrayList<List<AbstractMap.SimpleEntry<AbstractOutputPort, String>>>();
      List<Boolean> isAlloc = new ArrayList<Boolean>();
      if ((lp instanceof INIT)) {
        Interface _interface = ((INIT)lp).getAinip().getInterface();
        boolean _tripleEquals = (_interface == null);
        if (_tripleEquals) {
          this.generateLeaf(((INIT)lp).getAinip());
        } else {
          if (((((INIT)lp).getAinip().getInterface() != null) && Objects.equal(((INIT)lp).getAinip().getInterface(), Interface.STANDARD))) {
            this.generateLeaf(((INIT)lp).getAinip());
          } else {
            if (((((INIT)lp).getAinip().getInterface() != null) && Objects.equal(((INIT)lp).getAinip().getInterface(), Interface.FROMTCL))) {
              String _kbisa = ((INIT)lp).getAinip().getKbisa();
              boolean _tripleNotEquals = (_kbisa != null);
              if (_tripleNotEquals) {
                String _kbisa_1 = ((INIT)lp).getAinip().getKbisa();
                String _plus_1 = ("(setf result (get-value (tcl-kb-query :key \'(is-a name) :value `((is-a " + _kbisa_1);
                String _plus_2 = (_plus_1 + ")(name ");
                String _kbname = ((INIT)lp).getAinip().getKbname();
                String _plus_3 = (_plus_2 + _kbname);
                String _plus_4 = (_plus_3 + "))) \'");
                String _kbvalue = ((INIT)lp).getAinip().getKbvalue();
                String _plus_5 = (_plus_4 + _kbvalue);
                String _plus_6 = (_plus_5 + "))\n");
                this.CODE_KB.append(_plus_6);
                String _name_1 = ((INIT)lp).getAinip().getName();
                String _plus_7 = ("(writeToFile \'" + _name_1);
                String _plus_8 = (_plus_7 + " ");
                String _plus_9 = (_plus_8 + "result)\n");
                this.CODE_KB.append(_plus_9);
              } else {
                String _tcbname = ((INIT)lp).getAinip().getTcbname();
                boolean _tripleNotEquals_1 = (_tcbname != null);
                if (_tripleNotEquals_1) {
                  String _tcbname_1 = ((INIT)lp).getAinip().getTcbname();
                  String _plus_10 = ("(execute \'(" + _tcbname_1);
                  String _plus_11 = (_plus_10 + "))\n");
                  this.CODE_TCB_CALL.append(_plus_11);
                  String _tcbname_2 = ((INIT)lp).getAinip().getTcbname();
                  String _plus_12 = ("(define-tcb (" + _tcbname_2);
                  String _plus_13 = (_plus_12 + ")\n");
                  this.CODE_TCB.append(_plus_13);
                  this.CODE_TCB.append("(action ())\n");
                  this.CODE_TCB.append("(plan(\n");
                  boolean _isIsList = ((INIT)lp).getAinip().isIsList();
                  if (_isIsList) {
                    String _tclCmd = ((INIT)lp).getAinip().getTclCmd();
                    String _plus_14 = ("(" + _tclCmd);
                    String _plus_15 = (_plus_14 + " => ?p0)\n");
                    this.CODE_TCB.append(_plus_15);
                    String _name_2 = ((INIT)lp).getName();
                    String _plus_16 = ("(writeToFile \'" + _name_2);
                    String _plus_17 = (_plus_16 + " ?p0");
                    this.CODE_TCB.append(_plus_17);
                  } else {
                    String _tclCmd_1 = ((INIT)lp).getAinip().getTclCmd();
                    String _plus_18 = ("(" + _tclCmd_1);
                    String _plus_19 = (_plus_18 + " => ");
                    this.CODE_TCB.append(_plus_19);
                    for (int i = 0; (i < ((INIT)lp).getAinip().getNrParams()); i++) {
                      this.CODE_TCB.append((("?p" + Integer.valueOf(i)) + " "));
                    }
                    this.CODE_TCB.append(")\n");
                    String _tcbname_3 = ((INIT)lp).getAinip().getTcbname();
                    String _plus_20 = ("(" + _tcbname_3);
                    String _plus_21 = (_plus_20 + "_toList ");
                    this.CODE_TCB.append(_plus_21);
                    for (int i = 0; (i < ((INIT)lp).getAinip().getNrParams()); i++) {
                      this.CODE_TCB.append((("?p" + Integer.valueOf(i)) + " "));
                    }
                    this.CODE_TCB.append(")\n");
                  }
                  this.CODE_TCB.append(")))\n");
                  boolean _isIsList_1 = ((INIT)lp).getAinip().isIsList();
                  if (_isIsList_1) {
                  } else {
                    String _tcbname_4 = ((INIT)lp).getAinip().getTcbname();
                    String _plus_22 = ("(define-tcb (" + _tcbname_4);
                    String _plus_23 = (_plus_22 + "_toList ");
                    this.CODE_TCB.append(_plus_23);
                    for (int i = 0; (i < ((INIT)lp).getAinip().getNrParams()); i++) {
                      this.CODE_TCB.append((("?p" + Integer.valueOf(i)) + " "));
                    }
                    this.CODE_TCB.append(")\n");
                    this.CODE_TCB.append("(action(\n");
                    this.CODE_TCB.append("(setf listvar (list ");
                    for (int i = 0; (i < ((INIT)lp).getAinip().getNrParams()); i++) {
                      this.CODE_TCB.append((("\'?p" + Integer.valueOf(i)) + " "));
                    }
                    this.CODE_TCB.append("))\n");
                    String _name_3 = ((INIT)lp).getAinip().getName();
                    String _plus_24 = ("(writeToFile \'" + _name_3);
                    String _plus_25 = (_plus_24 + " listvar");
                    String _plus_26 = (_plus_25 + ")\n");
                    this.CODE_TCB.append(_plus_26);
                    this.CODE_TCB.append("))\n");
                    this.CODE_TCB.append(")\n");
                  }
                }
              }
              String res = null;
              boolean _isComplexDo = this.he.isComplexDo(((INIT)lp).getAinip().getVe());
              if (_isComplexDo) {
                res = this.le.generateLeafValuesInitComplexTcl(((INIT)lp).getAinip().getName());
              } else {
                res = this.le.generateLeafValuesInitTcl(((INIT)lp).getAinip().getName());
              }
              this.INITIALIZATION_CODE.append(res);
            } else {
              if (((((INIT)lp).getAinip().getInterface() != null) && Objects.equal(((INIT)lp).getAinip().getInterface(), Interface.TOTCL))) {
                this.generateLeaf(((INIT)lp).getAinip());
                this.TO_TCL.append("l = new ArrayList<Object>();\n");
                String _toTclName = ((INIT)lp).getAinip().getToTclName();
                String _plus_27 = ("l.add(\"" + _toTclName);
                String _plus_28 = (_plus_27 + "\");\n");
                this.TO_TCL.append(_plus_28);
                int _toTclInst = ((INIT)lp).getAinip().getToTclInst();
                String _plus_29 = ("l.add(" + Integer.valueOf(_toTclInst));
                String _plus_30 = (_plus_29 + ");\n");
                this.TO_TCL.append(_plus_30);
                String _name_4 = ((INIT)lp).getAinip().getName();
                String _plus_31 = ("TO_TCL.put(\"" + _name_4);
                String _plus_32 = (_plus_31 + "\",l);\n");
                this.TO_TCL.append(_plus_32);
              }
            }
          }
        }
        this.addVariationPoints(((INIT)lp));
      } else {
        if ((lp instanceof RPRO)) {
          EList<InputPort> _ip = ((RPRO)lp).getIp();
          for (final InputPort i : _ip) {
            {
              inputSetInputs.add(i);
              inputSet.add(i.getOutputport());
              Pattern lpr = this.he.getPattern(i.getOutputport());
              boolean _containsKey = this.IS_RESOLVED_MAP.containsKey(lpr);
              boolean _not = (!_containsKey);
              if (_not) {
                this.IS_RESOLVED_MAP.put(lpr, Boolean.valueOf(false));
                this.resolveNext(lpr);
              } else {
                Boolean _get = this.IS_RESOLVED_MAP.get(lpr);
                boolean _not_1 = (!(_get).booleanValue());
                if (_not_1) {
                  this.resolveNext(lpr);
                }
              }
            }
          }
        } else {
          if ((lp instanceof SAPRO)) {
            EList<InputPort> _ip_1 = ((SAPRO)lp).getIp();
            for (final InputPort i_1 : _ip_1) {
              {
                inputSetInputs.add(i_1);
                inputSet.add(i_1.getOutputport());
                Pattern lpr = this.he.getPattern(i_1.getOutputport());
                boolean _containsKey = this.IS_RESOLVED_MAP.containsKey(lpr);
                boolean _not = (!_containsKey);
                if (_not) {
                  this.IS_RESOLVED_MAP.put(lpr, Boolean.valueOf(false));
                  this.resolveNext(lpr);
                } else {
                  Boolean _get = this.IS_RESOLVED_MAP.get(lpr);
                  boolean _not_1 = (!(_get).booleanValue());
                  if (_not_1) {
                    this.resolveNext(lpr);
                  }
                }
              }
            }
          } else {
            if ((lp instanceof APRO)) {
              EList<InputPort> _ip_2 = ((APRO)lp).getIp();
              for (final InputPort i_2 : _ip_2) {
                {
                  Pattern lpr = this.he.getPattern(i_2.getOutputport());
                  inputSetInputs.add(i_2);
                  if ((lpr instanceof DMAGR)) {
                    this.handleDMAGRDep(lp, i_2, allocInputSet, isAlloc);
                  } else {
                    inputSet.add(i_2.getOutputport());
                    isAlloc.add(Boolean.valueOf(false));
                    boolean _containsKey = this.IS_RESOLVED_MAP.containsKey(lpr);
                    boolean _not = (!_containsKey);
                    if (_not) {
                      this.IS_RESOLVED_MAP.put(lpr, Boolean.valueOf(false));
                      this.resolveNext(lpr);
                    } else {
                      Boolean _get = this.IS_RESOLVED_MAP.get(lpr);
                      boolean _not_1 = (!(_get).booleanValue());
                      if (_not_1) {
                        this.resolveNext(lpr);
                      }
                    }
                  }
                }
              }
            } else {
              if ((lp instanceof MAGR)) {
                Fork _f = ((MAGR)lp).getF();
                boolean _tripleNotEquals_2 = (_f != null);
                if (_tripleNotEquals_2) {
                  Fork _f_1 = ((MAGR)lp).getF();
                  if ((_f_1 instanceof EquivalenceFork)) {
                    this.ACTIVE.put(((MAGR)lp).getName(), Integer.valueOf(((MAGR)lp).getAggr().get(0).getIp().size()));
                  } else {
                    Fork _f_2 = ((MAGR)lp).getF();
                    if ((_f_2 instanceof ConditionalFork)) {
                      this.PASSIVE_LOOKUP.put(((MAGR)lp).getName(), Integer.valueOf(((MAGR)lp).getAggr().get(0).getIp().size()));
                      String _name_5 = ((MAGR)lp).getName();
                      int _size = ((MAGR)lp).getAggr().get(0).getIp().size();
                      AbstractMap.SimpleEntry<String, Integer> _simpleEntry = new AbstractMap.SimpleEntry<String, Integer>(_name_5, Integer.valueOf(_size));
                      this.PASSIVE_LOOKUP_LIST.add(_simpleEntry);
                    }
                  }
                } else {
                  Optional _o = ((MAGR)lp).getO();
                  boolean _tripleNotEquals_3 = (_o != null);
                  if (_tripleNotEquals_3) {
                    this.ACTIVE.put(((MAGR)lp).getName(), Integer.valueOf(((MAGR)lp).getAggr().get(0).getIp().size()));
                  } else {
                    OR _or = ((MAGR)lp).getOr();
                    boolean _tripleNotEquals_4 = (_or != null);
                    if (_tripleNotEquals_4) {
                      this.ACTIVE.put(((MAGR)lp).getName(), Integer.valueOf(((MAGR)lp).getAggr().get(0).getIp().size()));
                    } else {
                      XOR _x = ((MAGR)lp).getX();
                      boolean _tripleNotEquals_5 = (_x != null);
                      if (_tripleNotEquals_5) {
                        this.ACTIVE.put(((MAGR)lp).getName(), Integer.valueOf(((MAGR)lp).getAggr().get(0).getIp().size()));
                      }
                    }
                  }
                }
                EList<AGGR> _aggr = ((MAGR)lp).getAggr();
                for (final AGGR i_3 : _aggr) {
                  {
                    List<DVGPort> tmp = new ArrayList<DVGPort>();
                    EList<InputPort> _ip_3 = i_3.getIp();
                    for (final InputPort j : _ip_3) {
                      {
                        inputSetInputs.add(j);
                        tmp.add(j.getOutputport());
                        Pattern lpr = this.he.getPattern(j.getOutputport());
                        boolean _containsKey = this.IS_RESOLVED_MAP.containsKey(lpr);
                        boolean _not = (!_containsKey);
                        if (_not) {
                          this.IS_RESOLVED_MAP.put(lpr, Boolean.valueOf(false));
                          this.resolveNext(lpr);
                        } else {
                          Boolean _get = this.IS_RESOLVED_MAP.get(lpr);
                          boolean _not_1 = (!(_get).booleanValue());
                          if (_not_1) {
                            this.resolveNext(lpr);
                          }
                        }
                      }
                    }
                    inputSetAg.add(tmp);
                  }
                }
              } else {
                if ((lp instanceof DMAGR)) {
                } else {
                  if ((lp instanceof CONT)) {
                    EList<InputPort> _ip_3 = ((CONT)lp).getIp();
                    for (final InputPort i_4 : _ip_3) {
                      {
                        inputSetInputs.add(i_4);
                        inputSet.add(i_4.getOutputport());
                        Pattern lpr = this.he.getPattern(i_4.getOutputport());
                        boolean _containsKey = this.IS_RESOLVED_MAP.containsKey(lpr);
                        boolean _not = (!_containsKey);
                        if (_not) {
                          this.IS_RESOLVED_MAP.put(lpr, Boolean.valueOf(false));
                          this.resolveNext(lpr);
                        } else {
                          Boolean _get = this.IS_RESOLVED_MAP.get(lpr);
                          boolean _not_1 = (!(_get).booleanValue());
                          if (_not_1) {
                            this.resolveNext(lpr);
                          }
                        }
                      }
                    }
                    EObject tmp = ((CONT)lp).getIpp();
                    if ((tmp instanceof InputWSMPort)) {
                      inputSetInputs.add(((AbstractInputPort)tmp));
                      inputSet.add(((InputWSMPort)tmp).getOutputwsmport());
                      Pattern lpr = this.he.getPattern(((InputWSMPort)tmp).getOutputwsmport());
                      boolean _containsKey = this.IS_RESOLVED_MAP.containsKey(lpr);
                      boolean _not = (!_containsKey);
                      if (_not) {
                        this.IS_RESOLVED_MAP.put(lpr, Boolean.valueOf(false));
                        this.resolveNext(lpr);
                      } else {
                        Boolean _get = this.IS_RESOLVED_MAP.get(lpr);
                        boolean _not_1 = (!(_get).booleanValue());
                        if (_not_1) {
                          this.resolveNext(lpr);
                        }
                      }
                    }
                  } else {
                    if ((lp instanceof EPROD)) {
                      EList<InputPort> _ip_4 = ((EPROD)lp).getIp();
                      for (final InputPort i_5 : _ip_4) {
                        {
                          inputSetInputs.add(i_5);
                          inputSet.add(i_5.getOutputport());
                          Pattern lpr_1 = this.he.getPattern(i_5.getOutputport());
                          boolean _containsKey_1 = this.IS_RESOLVED_MAP.containsKey(lpr_1);
                          boolean _not_2 = (!_containsKey_1);
                          if (_not_2) {
                            this.IS_RESOLVED_MAP.put(lpr_1, Boolean.valueOf(false));
                            this.resolveNext(lpr_1);
                          } else {
                            Boolean _get_1 = this.IS_RESOLVED_MAP.get(lpr_1);
                            boolean _not_3 = (!(_get_1).booleanValue());
                            if (_not_3) {
                              this.resolveNext(lpr_1);
                            }
                          }
                        }
                      }
                    } else {
                      if ((lp instanceof TRAN)) {
                        inputSetInputs.add(((TRAN)lp).getIp());
                        inputSet.add(((TRAN)lp).getIp().getOutputport());
                        Pattern lpr_1 = this.he.getPattern(((TRAN)lp).getIp().getOutputport());
                        boolean _containsKey_1 = this.IS_RESOLVED_MAP.containsKey(lpr_1);
                        boolean _not_2 = (!_containsKey_1);
                        if (_not_2) {
                          this.IS_RESOLVED_MAP.put(lpr_1, Boolean.valueOf(false));
                          this.resolveNext(lpr_1);
                        } else {
                          Boolean _get_1 = this.IS_RESOLVED_MAP.get(lpr_1);
                          boolean _not_3 = (!(_get_1).booleanValue());
                          if (_not_3) {
                            this.resolveNext(lpr_1);
                          }
                        }
                      } else {
                        if ((lp instanceof COMF)) {
                          inputSetInputs.add(((COMF)lp).getIp());
                          Pattern lpr_2 = this.he.getPattern(((COMF)lp).getIp().getOutputport());
                          if ((lpr_2 instanceof DMAGR)) {
                            this.handleDMAGRDep(lp, ((COMF)lp).getIp(), allocInputSet, isAlloc);
                            inputSetInputs.add(((COMF)lp).getIcp());
                            inputSet.add(((COMF)lp).getIcp().getOutputcport());
                            isAlloc.add(Boolean.valueOf(false));
                            lpr_2 = this.he.getPattern(((COMF)lp).getIcp().getOutputcport());
                            boolean _containsKey_2 = this.IS_RESOLVED_MAP.containsKey(lpr_2);
                            boolean _not_4 = (!_containsKey_2);
                            if (_not_4) {
                              this.IS_RESOLVED_MAP.put(lpr_2, Boolean.valueOf(false));
                              this.resolveNext(lpr_2);
                            } else {
                              Boolean _get_2 = this.IS_RESOLVED_MAP.get(lpr_2);
                              boolean _not_5 = (!(_get_2).booleanValue());
                              if (_not_5) {
                                this.resolveNext(lpr_2);
                              }
                            }
                          } else {
                            inputSet.add(((COMF)lp).getIp().getOutputport());
                            isAlloc.add(Boolean.valueOf(false));
                            boolean _containsKey_3 = this.IS_RESOLVED_MAP.containsKey(lpr_2);
                            boolean _not_6 = (!_containsKey_3);
                            if (_not_6) {
                              this.IS_RESOLVED_MAP.put(lpr_2, Boolean.valueOf(false));
                              this.resolveNext(lpr_2);
                            } else {
                              Boolean _get_3 = this.IS_RESOLVED_MAP.get(lpr_2);
                              boolean _not_7 = (!(_get_3).booleanValue());
                              if (_not_7) {
                                this.resolveNext(lpr_2);
                              }
                            }
                            inputSetInputs.add(((COMF)lp).getIcp());
                            inputSet.add(((COMF)lp).getIcp().getOutputcport());
                            lpr_2 = this.he.getPattern(((COMF)lp).getIcp().getOutputcport());
                            boolean _containsKey_4 = this.IS_RESOLVED_MAP.containsKey(lpr_2);
                            boolean _not_8 = (!_containsKey_4);
                            if (_not_8) {
                              this.IS_RESOLVED_MAP.put(lpr_2, Boolean.valueOf(false));
                              this.resolveNext(lpr_2);
                            } else {
                              Boolean _get_4 = this.IS_RESOLVED_MAP.get(lpr_2);
                              boolean _not_9 = (!(_get_4).booleanValue());
                              if (_not_9) {
                                this.resolveNext(lpr_2);
                              }
                            }
                          }
                        } else {
                          if ((lp instanceof PTCC)) {
                            EList<InputPort> _ip_5 = ((PTCC)lp).getIp();
                            for (final InputPort i_6 : _ip_5) {
                              {
                                inputSetInputs.add(i_6);
                                inputSet.add(i_6.getOutputport());
                                Pattern lpr_3 = this.he.getPattern(i_6.getOutputport());
                                boolean _containsKey_5 = this.IS_RESOLVED_MAP.containsKey(lpr_3);
                                boolean _not_10 = (!_containsKey_5);
                                if (_not_10) {
                                  this.IS_RESOLVED_MAP.put(lpr_3, Boolean.valueOf(false));
                                  this.resolveNext(lpr_3);
                                } else {
                                  Boolean _get_5 = this.IS_RESOLVED_MAP.get(lpr_3);
                                  boolean _not_11 = (!(_get_5).booleanValue());
                                  if (_not_11) {
                                    this.resolveNext(lpr_3);
                                  }
                                }
                              }
                            }
                            EObject tmp_1 = ((PTCC)lp).getIpp();
                            if ((tmp_1 instanceof InputWSMPort)) {
                              inputSetInputs.add(((AbstractInputPort)tmp_1));
                              inputSet.add(((InputWSMPort)tmp_1).getOutputwsmport());
                              Pattern lpr_3 = this.he.getPattern(((InputWSMPort)tmp_1).getOutputwsmport());
                              boolean _containsKey_5 = this.IS_RESOLVED_MAP.containsKey(lpr_3);
                              boolean _not_10 = (!_containsKey_5);
                              if (_not_10) {
                                this.IS_RESOLVED_MAP.put(lpr_3, Boolean.valueOf(false));
                                this.resolveNext(lpr_3);
                              } else {
                                Boolean _get_5 = this.IS_RESOLVED_MAP.get(lpr_3);
                                boolean _not_11 = (!(_get_5).booleanValue());
                                if (_not_11) {
                                  this.resolveNext(lpr_3);
                                }
                              }
                            }
                          } else {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      this.ROOT_PATTERN = lp;
      this.resolve(lp, inputSetInputs);
      this.IS_RESOLVED_MAP.put(lp, Boolean.valueOf(true));
      StringBuilder _xifexpression = null;
      if ((lp instanceof MAGR)) {
        _xifexpression = this.CALL_SEQUENCE_CODE.append(this.jf.generateCallSequenceCodeAg(((MAGR)lp).getName(), inputSetAg));
      } else {
        StringBuilder _xifexpression_1 = null;
        if (((!(lp instanceof INIT)) && (!(lp instanceof DMAGR)))) {
          _xifexpression_1 = this.CALL_SEQUENCE_CODE.append(this.jf.generateCallSequenceCode(lp.getName(), inputSet, allocInputSet, isAlloc));
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }

  public void handleDMAGRDep(final Pattern lp, final InputPort i, final List<List<AbstractMap.SimpleEntry<AbstractOutputPort, String>>> allocInputSet, final List<Boolean> isAlloc) {
    List<AbstractMap.SimpleEntry<AbstractOutputPort, String>> ais = this.getMatchingSolutionOutputForEachAllocation(lp, i);
    String _name = lp.getName();
    String _plus = ("&/&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&: " + _name);
    InputOutput.<String>println(_plus);
    for (final AbstractMap.SimpleEntry<AbstractOutputPort, String> f : ais) {
      InputOutput.<String>println(f.getKey().getName());
    }
    allocInputSet.add(ais);
    isAlloc.add(Boolean.valueOf(true));
    for (final AbstractMap.SimpleEntry<AbstractOutputPort, String> a : ais) {
      {
        Pattern lpr = this.he.getPattern(a.getKey());
        if ((lpr instanceof INIT)) {
          boolean _containsKey = this.solutionInitInstances.containsKey(a.getKey());
          boolean _not = (!_containsKey);
          if (_not) {
            List<Pattern> tmp = new ArrayList<Pattern>();
            tmp.add(lp);
            this.solutionInitInstances.put(a.getKey(), tmp);
            String n = this.getInstanceName(lpr);
            a.setValue(n);
            if (((((INIT)lpr).getAinip().getInterface() == null) || ((((INIT)lpr).getAinip().getInterface() != null) && Objects.equal(((INIT)lpr).getAinip().getInterface(), Interface.STANDARD)))) {
              if (this.sos) {
                this.generateLeaf(((INIT)lpr).getAinip(), n, (this.UNIQUE_RESOURCE_ID.get(((INIT)lpr).getAinip())).intValue());
              } else {
                this.generateLeaf(((INIT)lpr).getAinip(), n);
              }
            }
          } else {
            List<Pattern> tmp_1 = this.solutionInitInstances.get(a.getKey());
            boolean _contains = tmp_1.contains(lp);
            boolean _not_1 = (!_contains);
            if (_not_1) {
              tmp_1.add(lp);
              this.solutionInitInstances.put(a.getKey(), tmp_1);
              String n_1 = this.getInstanceName(lpr);
              a.setValue(n_1);
              if (((((INIT)lpr).getAinip().getInterface() == null) || ((((INIT)lpr).getAinip().getInterface() != null) && Objects.equal(((INIT)lpr).getAinip().getInterface(), Interface.STANDARD)))) {
                if (this.sos) {
                  this.generateLeaf(((INIT)lpr).getAinip(), n_1, (this.UNIQUE_RESOURCE_ID.get(((INIT)lpr).getAinip())).intValue());
                } else {
                  this.generateLeaf(((INIT)lpr).getAinip(), n_1);
                }
              }
            } else {
              String n_2 = this.getInstanceName(lpr);
              a.setValue(n_2);
            }
          }
          this.addVariationPoints(((INIT)lpr));
        } else {
          boolean _containsKey_1 = this.IS_RESOLVED_MAP.containsKey(lpr);
          boolean _not_2 = (!_containsKey_1);
          if (_not_2) {
            this.IS_RESOLVED_MAP.put(lpr, Boolean.valueOf(false));
            this.resolveNext(lpr);
          } else {
            Boolean _get = this.IS_RESOLVED_MAP.get(lpr);
            boolean _not_3 = (!(_get).booleanValue());
            if (_not_3) {
              this.resolveNext(lpr);
            }
          }
        }
      }
    }
  }

  public List<AbstractMap.SimpleEntry<AbstractOutputPort, String>> getMatchingSolutionOutputForEachAllocation(final Pattern p, final InputPort ip) {
    List<AbstractMap.SimpleEntry<AbstractOutputPort, String>> solutionOutputAllocations = new ArrayList<AbstractMap.SimpleEntry<AbstractOutputPort, String>>();
    for (int j = 0; (j < this.allocationsListListNoDuplicates.size()); j++) {
      {
        int solution = (-1);
        int _size = this.allocationsListListNoDuplicates.get(0).size();
        boolean _equals = (_size == 1);
        if (_equals) {
          solution = (this.allocationsListListNoDuplicates.get(j).get(0)).intValue();
        } else {
          solution = (this.allocationsListListNoDuplicates.get(j).get(this.he.getResGroupOfPattern(p))).intValue();
        }
        List<Pattern> solutionPatterns = this.solutionDVGPattern.get(Integer.valueOf(solution));
        for (final Pattern m : solutionPatterns) {
          VariabilityEntity _ve = ip.getOutputport().getVe();
          VariabilityEntity _veFromPattern = this.he.getVeFromPattern(m);
          boolean _equals_1 = Objects.equal(_ve, _veFromPattern);
          if (_equals_1) {
            if ((m instanceof INIT)) {
              AbstractInitPort _ainip = ((INIT)m).getAinip();
              String _name = ((INIT)m).getAinip().getName();
              AbstractMap.SimpleEntry<AbstractOutputPort, String> _simpleEntry = new AbstractMap.SimpleEntry<AbstractOutputPort, String>(_ainip, _name);
              solutionOutputAllocations.add(_simpleEntry);
              String _name_1 = ((INIT)m).getAinip().getName();
              String _plus = ("m.ainip: " + _name_1);
              InputOutput.<String>println(_plus);
              this.UNIQUE_RESOURCE_ID.put(((INIT)m).getAinip(), Integer.valueOf(solution));
            }
          }
        }
      }
    }
    return solutionOutputAllocations;
  }

  public Object resolve(final Pattern lp, final List<AbstractInputPort> inputSet) {
    Object _xifexpression = null;
    if ((lp instanceof COMF)) {
      _xifexpression = this.resolve(((COMF)lp));
    } else {
      Object _xifexpression_1 = null;
      if ((lp instanceof RPRO)) {
        StringBuilder _xifexpression_2 = null;
        if (((((RPRO)lp).getOpp() != null) && (((RPRO)lp).getOp() != null))) {
          System.out.println("ERROR: RPRO can not have both a outputport and a OutputPSNode!");
        } else {
          StringBuilder _xifexpression_3 = null;
          if (((((RPRO)lp).getOpp() != null) && (((RPRO)lp).getOp() == null))) {
            _xifexpression_3 = this.resolve(((RPRO)lp), inputSet, true);
          } else {
            StringBuilder _xifexpression_4 = null;
            if (((((RPRO)lp).getOpp() == null) && (((RPRO)lp).getOp() != null))) {
              _xifexpression_4 = this.resolve(((RPRO)lp), inputSet, false);
            } else {
              System.out.println("ERROR: RPRO has no outputport!");
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      } else {
        Object _xifexpression_5 = null;
        if ((lp instanceof SAPRO)) {
          _xifexpression_5 = this.resolve(((SAPRO)lp), inputSet);
        } else {
          Object _xifexpression_6 = null;
          if ((lp instanceof APRO)) {
            _xifexpression_6 = this.resolve(((APRO)lp), inputSet);
          } else {
            Object _xifexpression_7 = null;
            if ((lp instanceof MAGR)) {
              _xifexpression_7 = this.resolve(((MAGR)lp));
            } else {
              Object _xifexpression_8 = null;
              if ((lp instanceof TRAN)) {
                _xifexpression_8 = this.resolve(((TRAN)lp));
              } else {
                String _xifexpression_9 = null;
                if ((lp instanceof CONT)) {
                  _xifexpression_9 = this.resolve(((CONT)lp));
                } else {
                  String _xifexpression_10 = null;
                  if ((lp instanceof EPROD)) {
                    _xifexpression_10 = this.resolve(((EPROD)lp));
                  } else {
                    String _xifexpression_11 = null;
                    if ((lp instanceof PTCC)) {
                      _xifexpression_11 = this.resolve(((PTCC)lp));
                    } else {
                      _xifexpression_11 = null;
                    }
                    _xifexpression_10 = _xifexpression_11;
                  }
                  _xifexpression_9 = _xifexpression_10;
                }
                _xifexpression_8 = _xifexpression_9;
              }
              _xifexpression_7 = ((Object)_xifexpression_8);
            }
            _xifexpression_6 = ((Object)_xifexpression_7);
          }
          _xifexpression_5 = ((Object)_xifexpression_6);
        }
        _xifexpression_1 = ((Object)_xifexpression_5);
      }
      _xifexpression = ((Object)_xifexpression_1);
    }
    return _xifexpression;
  }

  public String generateLeafCS(final InitCPort inn) {
    String res = "";
    EObject tmp = inn.getVi();
    if ((tmp instanceof BoolVSPInit)) {
      res = this.le.generateLeafValuesInitBool(inn.getName(), ((BoolVSPInit)tmp).getVsp());
    } else {
      if ((tmp instanceof IntegerVSPInit)) {
        IntegerRandomGenerator _irg = ((IntegerVSPInit)tmp).getIrg();
        boolean _tripleNotEquals = (_irg != null);
        if (_tripleNotEquals) {
          res = this.le.generateRandomIntegers(inn.getName(), ((IntegerVSPInit)tmp).getIrg().getNumber(), ((IntegerVSPInit)tmp).getIrg().getMin(), ((IntegerVSPInit)tmp).getIrg().getMax());
        } else {
          res = this.le.generateLeafValuesInitInteger(inn.getName(), ((IntegerVSPInit)tmp).getVsp());
        }
      } else {
        if ((tmp instanceof RealVSPInit)) {
          RealRandomGenerator _rrg = ((RealVSPInit)tmp).getRrg();
          boolean _tripleNotEquals_1 = (_rrg != null);
          if (_tripleNotEquals_1) {
            res = this.le.generateRandomReals(inn.getName(), ((RealVSPInit)tmp).getRrg().getNumber(), ((RealVSPInit)tmp).getRrg().getMin(), ((RealVSPInit)tmp).getRrg().getMax());
          } else {
            res = this.le.generateLeafValuesInitReal(inn.getName(), ((RealVSPInit)tmp).getVsp());
          }
        } else {
          if ((tmp instanceof StringVSPInit)) {
            res = this.le.generateLeafValuesInitString(inn.getName(), ((StringVSPInit)tmp).getVsp());
          }
        }
      }
    }
    return res;
  }

  public StringBuilder generateLeaf(final AbstractInitPort inn) {
    StringBuilder _xblockexpression = null;
    {
      String res = "";
      StringBuilder _xifexpression = null;
      if ((inn instanceof InitPort)) {
        StringBuilder _xblockexpression_1 = null;
        {
          EObject tmp = ((InitPort)inn).getVi();
          if ((tmp instanceof BoolVSPInit)) {
            res = this.le.generateLeafValuesInitBool(((InitPort)inn).getName(), ((BoolVSPInit)tmp).getVsp());
          } else {
            if ((tmp instanceof IntegerVSPInit)) {
              IntegerRandomGenerator _irg = ((IntegerVSPInit)tmp).getIrg();
              boolean _tripleNotEquals = (_irg != null);
              if (_tripleNotEquals) {
                res = this.le.generateRandomIntegers(((InitPort)inn).getName(), ((IntegerVSPInit)tmp).getIrg().getNumber(), ((IntegerVSPInit)tmp).getIrg().getMin(), ((IntegerVSPInit)tmp).getIrg().getMax());
              } else {
                res = this.le.generateLeafValuesInitInteger(((InitPort)inn).getName(), ((IntegerVSPInit)tmp).getVsp());
              }
            } else {
              if ((tmp instanceof RealVSPInit)) {
                RealRandomGenerator _rrg = ((RealVSPInit)tmp).getRrg();
                boolean _tripleNotEquals_1 = (_rrg != null);
                if (_tripleNotEquals_1) {
                  res = this.le.generateRandomReals(((InitPort)inn).getName(), ((RealVSPInit)tmp).getRrg().getNumber(), ((RealVSPInit)tmp).getRrg().getMin(), ((RealVSPInit)tmp).getRrg().getMax());
                } else {
                  res = this.le.generateLeafValuesInitReal(((InitPort)inn).getName(), ((RealVSPInit)tmp).getVsp());
                }
              } else {
                if ((tmp instanceof StringVSPInit)) {
                  res = this.le.generateLeafValuesInitString(((InitPort)inn).getName(), ((StringVSPInit)tmp).getVsp());
                } else {
                  if ((tmp instanceof ComplexVSPInit)) {
                    int _size = ((ComplexVSPInit)tmp).getVi().get(0).getE().size();
                    boolean _greaterThan = (_size > 1);
                    if (_greaterThan) {
                      Type ty = null;
                      List<List<Object>> vsp = new ArrayList<List<Object>>();
                      for (int i = 0; (i < ((ComplexVSPInit)tmp).getVi().size()); i++) {
                        {
                          List<Object> vi = new ArrayList<Object>();
                          for (int j = 0; (j < ((ComplexVSPInit)tmp).getVi().get(i).getE().size()); j++) {
                            {
                              ty = ((ComplexVSPInit)tmp).getVi().get(i).getE().get(j).getT();
                              if ((ty instanceof Real)) {
                                vi.add(Double.valueOf(((Real)ty).getRv().get(0).getValue()));
                              }
                            }
                          }
                          vsp.add(vi);
                          res = this.le.generateLeafValuesInit(((InitPort)inn).getName(), vsp);
                        }
                      }
                    } else {
                      int _size_1 = ((ComplexVSPInit)tmp).getVi().get(0).getE().size();
                      boolean _equals = (_size_1 == 1);
                      if (_equals) {
                        Type ty_1 = null;
                        List<List<Object>> vsp_1 = new ArrayList<List<Object>>();
                        for (int i = 0; (i < ((ComplexVSPInit)tmp).getVi().size()); i++) {
                          {
                            List<Object> vi = new ArrayList<Object>();
                            ty_1 = ((ComplexVSPInit)tmp).getVi().get(i).getE().get(0).getT();
                            if ((ty_1 instanceof Real)) {
                              for (int j = 0; (j < ((Real)ty_1).getRv().size()); j++) {
                                vi.add(Double.valueOf(((Real)ty_1).getRv().get(j).getValue()));
                              }
                              vsp_1.add(vi);
                            }
                            res = this.le.generateLeafValuesInit(((InitPort)inn).getName(), vsp_1);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _xblockexpression_1 = this.INITIALIZATION_CODE.append(res);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        StringBuilder _xifexpression_1 = null;
        if ((inn instanceof InitCPort)) {
          StringBuilder _xblockexpression_2 = null;
          {
            EObject tmp = ((InitCPort)inn).getVi();
            if ((tmp instanceof BoolVSPInit)) {
              res = this.le.generateLeafValuesInitBool(((InitCPort)inn).getName(), ((BoolVSPInit)tmp).getVsp());
            } else {
              if ((tmp instanceof IntegerVSPInit)) {
                IntegerRandomGenerator _irg = ((IntegerVSPInit)tmp).getIrg();
                boolean _tripleNotEquals = (_irg != null);
                if (_tripleNotEquals) {
                  res = this.le.generateRandomIntegers(((InitCPort)inn).getName(), ((IntegerVSPInit)tmp).getIrg().getNumber(), ((IntegerVSPInit)tmp).getIrg().getMin(), ((IntegerVSPInit)tmp).getIrg().getMax());
                } else {
                  res = this.le.generateLeafValuesInitInteger(((InitCPort)inn).getName(), ((IntegerVSPInit)tmp).getVsp());
                }
              } else {
                if ((tmp instanceof RealVSPInit)) {
                  RealRandomGenerator _rrg = ((RealVSPInit)tmp).getRrg();
                  boolean _tripleNotEquals_1 = (_rrg != null);
                  if (_tripleNotEquals_1) {
                    res = this.le.generateRandomReals(((InitCPort)inn).getName(), ((RealVSPInit)tmp).getRrg().getNumber(), ((RealVSPInit)tmp).getRrg().getMin(), ((RealVSPInit)tmp).getRrg().getMax());
                  } else {
                    res = this.le.generateLeafValuesInitReal(((InitCPort)inn).getName(), ((RealVSPInit)tmp).getVsp());
                  }
                } else {
                  if ((tmp instanceof StringVSPInit)) {
                    res = this.le.generateLeafValuesInitString(((InitCPort)inn).getName(), ((StringVSPInit)tmp).getVsp());
                  }
                }
              }
            }
            _xblockexpression_2 = this.INITIALIZATION_CODE.append(res);
          }
          _xifexpression_1 = _xblockexpression_2;
        } else {
          StringBuilder _xifexpression_2 = null;
          if ((inn instanceof InitWSMPort)) {
            StringBuilder _xblockexpression_3 = null;
            {
              Map<String, Double> dwStruct = new HashMap<String, Double>();
              EList<StaticWeight> _sw = ((InitWSMPort)inn).getSws().getSw();
              for (final StaticWeight i : _sw) {
                dwStruct.put(i.getInputport().getOutputport().getName(), Double.valueOf(i.getWeight()));
              }
              _xblockexpression_3 = this.INITIALIZATION_CODE.append(this.le.generateLeafValuesInit(((InitWSMPort)inn).getName(), dwStruct));
            }
            _xifexpression_2 = _xblockexpression_3;
          }
          _xifexpression_1 = _xifexpression_2;
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }

  public StringBuilder generateLeaf(final AbstractInitPort inn, final String name) {
    StringBuilder _xblockexpression = null;
    {
      String res = "";
      StringBuilder _xifexpression = null;
      if ((inn instanceof InitPort)) {
        StringBuilder _xblockexpression_1 = null;
        {
          EObject tmp = ((InitPort)inn).getVi();
          if ((tmp instanceof BoolVSPInit)) {
            res = this.le.generateLeafValuesInitBool(name, ((BoolVSPInit)tmp).getVsp());
          } else {
            if ((tmp instanceof IntegerVSPInit)) {
              IntegerRandomGenerator _irg = ((IntegerVSPInit)tmp).getIrg();
              boolean _tripleNotEquals = (_irg != null);
              if (_tripleNotEquals) {
                res = this.le.generateRandomIntegers(name, ((IntegerVSPInit)tmp).getIrg().getNumber(), ((IntegerVSPInit)tmp).getIrg().getMin(), ((IntegerVSPInit)tmp).getIrg().getMax());
              } else {
                res = this.le.generateLeafValuesInitInteger(name, ((IntegerVSPInit)tmp).getVsp());
              }
            } else {
              if ((tmp instanceof RealVSPInit)) {
                RealRandomGenerator _rrg = ((RealVSPInit)tmp).getRrg();
                boolean _tripleNotEquals_1 = (_rrg != null);
                if (_tripleNotEquals_1) {
                  res = this.le.generateRandomReals(name, ((RealVSPInit)tmp).getRrg().getNumber(), ((RealVSPInit)tmp).getRrg().getMin(), ((RealVSPInit)tmp).getRrg().getMax());
                } else {
                  res = this.le.generateLeafValuesInitReal(name, ((RealVSPInit)tmp).getVsp());
                }
              } else {
                if ((tmp instanceof StringVSPInit)) {
                  res = this.le.generateLeafValuesInitString(name, ((StringVSPInit)tmp).getVsp());
                } else {
                  if ((tmp instanceof ComplexVSPInit)) {
                    int _size = ((ComplexVSPInit)tmp).getVi().get(0).getE().size();
                    boolean _greaterThan = (_size > 1);
                    if (_greaterThan) {
                      Type ty = null;
                      List<List<Object>> vsp = new ArrayList<List<Object>>();
                      for (int i = 0; (i < ((ComplexVSPInit)tmp).getVi().size()); i++) {
                        {
                          List<Object> vi = new ArrayList<Object>();
                          for (int j = 0; (j < ((ComplexVSPInit)tmp).getVi().get(i).getE().size()); j++) {
                            {
                              ty = ((ComplexVSPInit)tmp).getVi().get(i).getE().get(j).getT();
                              if ((ty instanceof Real)) {
                                vi.add(Double.valueOf(((Real)ty).getRv().get(0).getValue()));
                              }
                            }
                          }
                          vsp.add(vi);
                          res = this.le.generateLeafValuesInit(name, vsp);
                        }
                      }
                    } else {
                      int _size_1 = ((ComplexVSPInit)tmp).getVi().get(0).getE().size();
                      boolean _equals = (_size_1 == 1);
                      if (_equals) {
                        Type ty_1 = null;
                        List<List<Object>> vsp_1 = new ArrayList<List<Object>>();
                        for (int i = 0; (i < ((ComplexVSPInit)tmp).getVi().size()); i++) {
                          {
                            List<Object> vi = new ArrayList<Object>();
                            ty_1 = ((ComplexVSPInit)tmp).getVi().get(i).getE().get(0).getT();
                            if ((ty_1 instanceof Real)) {
                              for (int j = 0; (j < ((Real)ty_1).getRv().size()); j++) {
                                vi.add(Double.valueOf(((Real)ty_1).getRv().get(j).getValue()));
                              }
                              vsp_1.add(vi);
                            }
                            res = this.le.generateLeafValuesInit(name, vsp_1);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _xblockexpression_1 = this.INITIALIZATION_CODE.append(res);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        StringBuilder _xifexpression_1 = null;
        if ((inn instanceof InitCPort)) {
          StringBuilder _xblockexpression_2 = null;
          {
            EObject tmp = ((InitCPort)inn).getVi();
            if ((tmp instanceof BoolVSPInit)) {
              res = this.le.generateLeafValuesInitBool(name, ((BoolVSPInit)tmp).getVsp());
            } else {
              if ((tmp instanceof IntegerVSPInit)) {
                IntegerRandomGenerator _irg = ((IntegerVSPInit)tmp).getIrg();
                boolean _tripleNotEquals = (_irg != null);
                if (_tripleNotEquals) {
                  res = this.le.generateRandomIntegers(name, ((IntegerVSPInit)tmp).getIrg().getNumber(), ((IntegerVSPInit)tmp).getIrg().getMin(), ((IntegerVSPInit)tmp).getIrg().getMax());
                } else {
                  res = this.le.generateLeafValuesInitInteger(name, ((IntegerVSPInit)tmp).getVsp());
                }
              } else {
                if ((tmp instanceof RealVSPInit)) {
                  RealRandomGenerator _rrg = ((RealVSPInit)tmp).getRrg();
                  boolean _tripleNotEquals_1 = (_rrg != null);
                  if (_tripleNotEquals_1) {
                    res = this.le.generateRandomReals(name, ((RealVSPInit)tmp).getRrg().getNumber(), ((RealVSPInit)tmp).getRrg().getMin(), ((RealVSPInit)tmp).getRrg().getMax());
                  } else {
                    res = this.le.generateLeafValuesInitReal(name, ((RealVSPInit)tmp).getVsp());
                  }
                } else {
                  if ((tmp instanceof StringVSPInit)) {
                    res = this.le.generateLeafValuesInitString(name, ((StringVSPInit)tmp).getVsp());
                  }
                }
              }
            }
            _xblockexpression_2 = this.INITIALIZATION_CODE.append(res);
          }
          _xifexpression_1 = _xblockexpression_2;
        } else {
          StringBuilder _xifexpression_2 = null;
          if ((inn instanceof InitWSMPort)) {
            StringBuilder _xblockexpression_3 = null;
            {
              Map<String, Double> dwStruct = new HashMap<String, Double>();
              EList<StaticWeight> _sw = ((InitWSMPort)inn).getSws().getSw();
              for (final StaticWeight i : _sw) {
                dwStruct.put(i.getInputport().getOutputport().getName(), Double.valueOf(i.getWeight()));
              }
              _xblockexpression_3 = this.INITIALIZATION_CODE.append(this.le.generateLeafValuesInit(name, dwStruct));
            }
            _xifexpression_2 = _xblockexpression_3;
          }
          _xifexpression_1 = _xifexpression_2;
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }

  public StringBuilder generateLeaf(final AbstractInitPort inn, final String name, final int id) {
    StringBuilder _xblockexpression = null;
    {
      String res = "";
      StringBuilder _xifexpression = null;
      if ((inn instanceof InitPort)) {
        StringBuilder _xblockexpression_1 = null;
        {
          EObject tmp = ((InitPort)inn).getVi();
          if ((tmp instanceof BoolVSPInit)) {
            res = this.le.generateLeafValuesInitBool(name, ((BoolVSPInit)tmp).getVsp(), id);
          } else {
            if ((tmp instanceof IntegerVSPInit)) {
              IntegerRandomGenerator _irg = ((IntegerVSPInit)tmp).getIrg();
              boolean _tripleNotEquals = (_irg != null);
              if (_tripleNotEquals) {
                res = this.le.generateRandomIntegers(name, ((IntegerVSPInit)tmp).getIrg().getNumber(), ((IntegerVSPInit)tmp).getIrg().getMin(), ((IntegerVSPInit)tmp).getIrg().getMax());
              } else {
                res = this.le.generateLeafValuesInitInteger(name, ((IntegerVSPInit)tmp).getVsp(), id);
              }
            } else {
              if ((tmp instanceof RealVSPInit)) {
                RealRandomGenerator _rrg = ((RealVSPInit)tmp).getRrg();
                boolean _tripleNotEquals_1 = (_rrg != null);
                if (_tripleNotEquals_1) {
                  res = this.le.generateRandomReals(name, ((RealVSPInit)tmp).getRrg().getNumber(), ((RealVSPInit)tmp).getRrg().getMin(), ((RealVSPInit)tmp).getRrg().getMax());
                } else {
                  res = this.le.generateLeafValuesInitReal(name, ((RealVSPInit)tmp).getVsp(), id);
                }
              } else {
                if ((tmp instanceof StringVSPInit)) {
                  res = this.le.generateLeafValuesInitString(name, ((StringVSPInit)tmp).getVsp(), id);
                } else {
                  if ((tmp instanceof ComplexVSPInit)) {
                    int _size = ((ComplexVSPInit)tmp).getVi().get(0).getE().size();
                    boolean _greaterThan = (_size > 1);
                    if (_greaterThan) {
                      Type ty = null;
                      List<List<Object>> vsp = new ArrayList<List<Object>>();
                      for (int i = 0; (i < ((ComplexVSPInit)tmp).getVi().size()); i++) {
                        {
                          List<Object> vi = new ArrayList<Object>();
                          for (int j = 0; (j < ((ComplexVSPInit)tmp).getVi().get(i).getE().size()); j++) {
                            {
                              ty = ((ComplexVSPInit)tmp).getVi().get(i).getE().get(j).getT();
                              if ((ty instanceof Real)) {
                                vi.add(Double.valueOf(((Real)ty).getRv().get(0).getValue()));
                              }
                            }
                          }
                          vsp.add(vi);
                          res = this.le.generateLeafValuesInit(name, vsp, id);
                        }
                      }
                    } else {
                      int _size_1 = ((ComplexVSPInit)tmp).getVi().get(0).getE().size();
                      boolean _equals = (_size_1 == 1);
                      if (_equals) {
                        Type ty_1 = null;
                        List<List<Object>> vsp_1 = new ArrayList<List<Object>>();
                        for (int i = 0; (i < ((ComplexVSPInit)tmp).getVi().size()); i++) {
                          {
                            List<Object> vi = new ArrayList<Object>();
                            ty_1 = ((ComplexVSPInit)tmp).getVi().get(i).getE().get(0).getT();
                            if ((ty_1 instanceof Real)) {
                              for (int j = 0; (j < ((Real)ty_1).getRv().size()); j++) {
                                vi.add(Double.valueOf(((Real)ty_1).getRv().get(j).getValue()));
                              }
                              vsp_1.add(vi);
                            }
                            res = this.le.generateLeafValuesInit(name, vsp_1, id);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _xblockexpression_1 = this.INITIALIZATION_CODE.append(res);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        StringBuilder _xifexpression_1 = null;
        if ((inn instanceof InitCPort)) {
          StringBuilder _xblockexpression_2 = null;
          {
            EObject tmp = ((InitCPort)inn).getVi();
            if ((tmp instanceof BoolVSPInit)) {
              res = this.le.generateLeafValuesInitBool(name, ((BoolVSPInit)tmp).getVsp());
            } else {
              if ((tmp instanceof IntegerVSPInit)) {
                IntegerRandomGenerator _irg = ((IntegerVSPInit)tmp).getIrg();
                boolean _tripleNotEquals = (_irg != null);
                if (_tripleNotEquals) {
                  res = this.le.generateRandomIntegers(name, ((IntegerVSPInit)tmp).getIrg().getNumber(), ((IntegerVSPInit)tmp).getIrg().getMin(), ((IntegerVSPInit)tmp).getIrg().getMax());
                } else {
                  res = this.le.generateLeafValuesInitInteger(name, ((IntegerVSPInit)tmp).getVsp());
                }
              } else {
                if ((tmp instanceof RealVSPInit)) {
                  RealRandomGenerator _rrg = ((RealVSPInit)tmp).getRrg();
                  boolean _tripleNotEquals_1 = (_rrg != null);
                  if (_tripleNotEquals_1) {
                    res = this.le.generateRandomReals(name, ((RealVSPInit)tmp).getRrg().getNumber(), ((RealVSPInit)tmp).getRrg().getMin(), ((RealVSPInit)tmp).getRrg().getMax());
                  } else {
                    res = this.le.generateLeafValuesInitReal(name, ((RealVSPInit)tmp).getVsp());
                  }
                } else {
                  if ((tmp instanceof StringVSPInit)) {
                    res = this.le.generateLeafValuesInitString(name, ((StringVSPInit)tmp).getVsp());
                  }
                }
              }
            }
            _xblockexpression_2 = this.INITIALIZATION_CODE.append(res);
          }
          _xifexpression_1 = _xblockexpression_2;
        } else {
          StringBuilder _xifexpression_2 = null;
          if ((inn instanceof InitWSMPort)) {
            StringBuilder _xblockexpression_3 = null;
            {
              Map<String, Double> dwStruct = new HashMap<String, Double>();
              EList<StaticWeight> _sw = ((InitWSMPort)inn).getSws().getSw();
              for (final StaticWeight i : _sw) {
                dwStruct.put(i.getInputport().getOutputport().getName(), Double.valueOf(i.getWeight()));
              }
              _xblockexpression_3 = this.INITIALIZATION_CODE.append(this.le.generateLeafValuesInit(name, dwStruct));
            }
            _xifexpression_2 = _xblockexpression_3;
          }
          _xifexpression_1 = _xifexpression_2;
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }

  public StringBuilder resolve(final COMF p) {
    StringBuilder _xblockexpression = null;
    {
      StringBuilder code = new StringBuilder();
      code.append("void");
      code.append(" ");
      String _name = p.getName();
      String _plus = ("resolve_" + _name);
      code.append(_plus);
      code.append("(");
      code.append("List<Node>");
      code.append(" ");
      code.append("I");
      code.append(") {");
      code.append("\n\t");
      code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> ovsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>();");
      code.append("\n\t");
      code.append("Object newValue = 0.0;");
      code.append("\n\t");
      TypeDef _typeFromVe = this.he.getTypeFromVe(p.getIp().getOutputport().getVe());
      if ((_typeFromVe instanceof BoolDef)) {
        code.append("List<Boolean> toCheck = new ArrayList<Boolean>();");
        code.append("\n\t");
        code.append("List<Boolean> filter = new ArrayList<Boolean>();");
      } else {
        TypeDef _typeFromVe_1 = this.he.getTypeFromVe(p.getIp().getOutputport().getVe());
        if ((_typeFromVe_1 instanceof IntegerDef)) {
          code.append("List<Integer> toCheck = new ArrayList<Integer>();");
          code.append("\n\t");
          code.append("List<Integer> filter = new ArrayList<Integer>();");
        } else {
          TypeDef _typeFromVe_2 = this.he.getTypeFromVe(p.getIp().getOutputport().getVe());
          if ((_typeFromVe_2 instanceof RealDef)) {
            code.append("List<Double> toCheck = new ArrayList<Double>();");
            code.append("\n\t");
            code.append("List<Double> filter = new ArrayList<Double>();");
          } else {
            TypeDef _typeFromVe_3 = this.he.getTypeFromVe(p.getIp().getOutputport().getVe());
            if ((_typeFromVe_3 instanceof StringDef)) {
              code.append("List<String> toCheck = new ArrayList<String>();");
              code.append("\n\t");
              code.append("List<String> filter = new ArrayList<String>();");
            } else {
              System.err.println("TypeDef not supported!");
            }
          }
        }
      }
      code.append("\n\t");
      code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> toCheckVsp = I.get(0).vsp();");
      code.append("\n\t");
      code.append("for (int i = 0; i < toCheckVsp.size(); i++) {");
      code.append("\n\t\t");
      TypeDef _typeFromVe_4 = this.he.getTypeFromVe(p.getIp().getOutputport().getVe());
      if ((_typeFromVe_4 instanceof BoolDef)) {
        code.append("toCheck.add(((Boolean)toCheckVsp.get(i).getValue()).booleanValue());");
      } else {
        TypeDef _typeFromVe_5 = this.he.getTypeFromVe(p.getIp().getOutputport().getVe());
        if ((_typeFromVe_5 instanceof IntegerDef)) {
          code.append("toCheck.add(((Integer)toCheckVsp.get(i).getValue()).intValue());");
        } else {
          TypeDef _typeFromVe_6 = this.he.getTypeFromVe(p.getIp().getOutputport().getVe());
          if ((_typeFromVe_6 instanceof RealDef)) {
            code.append("toCheck.add(((Number)toCheckVsp.get(i).getValue()).doubleValue());");
          } else {
            TypeDef _typeFromVe_7 = this.he.getTypeFromVe(p.getIp().getOutputport().getVe());
            if ((_typeFromVe_7 instanceof StringDef)) {
              code.append("toCheck.add(toCheckVsp.get(i).getValue().toString());");
            } else {
              System.err.println("TypeDef not supported!");
            }
          }
        }
      }
      code.append("\n\t");
      code.append("}");
      code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> filterVsp = I.get(1).vsp();");
      code.append("\n\t");
      code.append("List<List<SimpleEntry<String,Integer>>> htmp;");
      code.append("\n\t");
      code.append("for (int i = 0; i < filterVsp.size(); i++) {");
      code.append("\n\t\t");
      TypeDef _typeFromVe_8 = this.he.getTypeFromVe(p.getIp().getOutputport().getVe());
      if ((_typeFromVe_8 instanceof BoolDef)) {
        code.append("filter.add(((Boolean)filterVsp.get(i).getValue()).booleanValue());");
      } else {
        TypeDef _typeFromVe_9 = this.he.getTypeFromVe(p.getIp().getOutputport().getVe());
        if ((_typeFromVe_9 instanceof IntegerDef)) {
          code.append("filter.add(((Integer)filterVsp.get(i).getValue()).intValue());");
        } else {
          TypeDef _typeFromVe_10 = this.he.getTypeFromVe(p.getIp().getOutputport().getVe());
          if ((_typeFromVe_10 instanceof RealDef)) {
            code.append("filter.add(((Double)filterVsp.get(i).getValue()).doubleValue());");
          } else {
            TypeDef _typeFromVe_11 = this.he.getTypeFromVe(p.getIp().getOutputport().getVe());
            if ((_typeFromVe_11 instanceof StringDef)) {
              code.append("filter.add(filterVsp.get(i).getValue().toString());");
            } else {
              System.err.println("TypeDef not supported!");
            }
          }
        }
      }
      code.append("\n\t");
      code.append("}");
      code.append("for (int i = 0; i < toCheckVsp.size(); i++) {");
      code.append("\n\t\t");
      code.append("for (int j = 0; j < filterVsp.size(); j++) {");
      code.append("\n\t\t\t");
      EObject tmp = p.getCo();
      if ((tmp instanceof LessThan)) {
        if (((this.he.getTypeFromVe(p.getIp().getOutputport().getVe()) instanceof BoolDef) || (this.he.getTypeFromVe(p.getIp().getOutputport().getVe()) instanceof StringDef))) {
          System.err.println("ERROR: LessThan undefined for Bool or String");
        }
        boolean _isInclusive = ((LessThan)tmp).isInclusive();
        if (_isInclusive) {
          code.append("if (toCheck.get(i) <= filter.get(j)) {");
        } else {
          code.append("if (toCheck.get(i) < filter.get(j)) {");
        }
      } else {
        if ((tmp instanceof GreaterThan)) {
          if (((this.he.getTypeFromVe(p.getIp().getOutputport().getVe()) instanceof BoolDef) || (this.he.getTypeFromVe(p.getIp().getOutputport().getVe()) instanceof StringDef))) {
            System.err.println("ERROR: GreaterThan undefined for Bool or String");
          }
          boolean _isInclusive_1 = ((GreaterThan)tmp).isInclusive();
          if (_isInclusive_1) {
            code.append("if (toCheck.get(i) >= filter.get(j)) {");
          } else {
            code.append("if (toCheck.get(i) > filter.get(j)) {");
          }
        } else {
          if ((tmp instanceof Equal)) {
            if (((((Equal)tmp).getAccuracy() != null) && (((this.he.getTypeFromVe(p.getIp().getOutputport().getVe()) instanceof BoolDef) || (this.he.getTypeFromVe(p.getIp().getOutputport().getVe()) instanceof StringDef)) || (this.he.getTypeFromVe(p.getIp().getOutputport().getVe()) instanceof IntegerDef)))) {
              System.err.println("WARNING: Accuracy for Bool,String or Integer is ignored!");
            }
            Accuracy _accuracy = ((Equal)tmp).getAccuracy();
            boolean _tripleEquals = (_accuracy == null);
            if (_tripleEquals) {
              boolean _isInverse = ((Equal)tmp).isInverse();
              if (_isInverse) {
                code.append("if (toCheck.get(i) != filter.get(j)) {");
              } else {
                code.append("if (toCheck.get(i) == filter.get(j)) {");
              }
            } else {
              boolean _isInverse_1 = ((Equal)tmp).isInverse();
              if (_isInverse_1) {
                String _string = Double.valueOf(((Equal)tmp).getAccuracy().getValue()).toString();
                String _plus_1 = ("if (Math.abs(toCheck.get(i)-filter.get(j)) > " + _string);
                String _plus_2 = (_plus_1 + ") {");
                code.append(_plus_2);
              } else {
                String _string_1 = Double.valueOf(((Equal)tmp).getAccuracy().getValue()).toString();
                String _plus_3 = ("if (Math.abs(toCheck.get(i)-filter.get(j)) < " + _string_1);
                String _plus_4 = (_plus_3 + ") {");
                code.append(_plus_4);
              }
            }
          }
        }
      }
      code.append("\n\t\t\t\t");
      code.append("List<List<SimpleEntry<String,Integer>>> header = new ArrayList<List<SimpleEntry<String,Integer>>>();");
      code.append("\n\t\t\t\t");
      code.append("List<SimpleEntry<String,Integer>> headerRow = new ArrayList<SimpleEntry<String,Integer>>();");
      code.append("\n\t\t\t\t");
      code.append("headerRow.add(new SimpleEntry<String,Integer>(I.get(0).name(),i));");
      code.append("\n\t\t\t\t");
      code.append("if (toCheckVsp.get(i).getKey() != null) {");
      code.append("\n\t\t\t\t\t");
      code.append("htmp = toCheckVsp.get(i).getKey();");
      code.append("\n\t\t\t\t\t");
      code.append("for (List<SimpleEntry<String,Integer>> row : htmp) {");
      code.append("\n\t\t\t\t\t\t");
      code.append("for (SimpleEntry<String,Integer> entry : row) {");
      code.append("\n\t\t\t\t\t\t\t");
      code.append("headerRow.add(entry);");
      code.append("\n\t\t\t\t\t\t");
      code.append("}");
      code.append("\n\t\t\t\t\t");
      code.append("}");
      code.append("\n\t\t\t\t");
      code.append("}");
      code.append("\n\t\t\t");
      code.append("header.add(headerRow);");
      code.append("\n\t\t\t");
      code.append("headerRow = new ArrayList<SimpleEntry<String,Integer>>();");
      code.append("\n\t\t\t");
      code.append("headerRow.add(new SimpleEntry<String,Integer>(I.get(1).name(),j));");
      code.append("\n\t\t\t");
      code.append("if (filterVsp.get(j).getKey() != null) {");
      code.append("\n\t\t\t\t");
      code.append("htmp = filterVsp.get(j).getKey();");
      code.append("\n\t\t\t\t");
      code.append("for (List<SimpleEntry<String,Integer>> row : htmp) {");
      code.append("\n\t\t\t\t\t");
      code.append("for (SimpleEntry<String,Integer> entry : row) {");
      code.append("\n\t\t\t\t\t\t");
      code.append("headerRow.add(entry);");
      code.append("\n\t\t\t\t\t");
      code.append("}");
      code.append("\n\t\t\t\t");
      code.append("}");
      code.append("\n\t\t\t");
      code.append("}");
      code.append("\n\t\t");
      code.append("header.add(headerRow);");
      code.append("\n\t\t");
      code.append("newValue = newValue = toCheck.get(i);");
      code.append("\n\t\t");
      code.append("ovsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>, Object>(header, newValue));");
      code.append("\n\t\t");
      code.append("}");
      code.append("}");
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
      String _name_1 = p.getOp().getName();
      String _plus_5 = ("this.NODE_COLLECTION.put(\"" + _name_1);
      String _plus_6 = (_plus_5 + "\", new NodeObject(\"");
      String _name_2 = p.getOp().getName();
      String _plus_7 = (_plus_6 + _name_2);
      String _plus_8 = (_plus_7 + "\", ovsp));");
      code.append(_plus_8);
      code.append("\n");
      code.append("}");
      this.LOCAL_RESOLUTION_CODE.append(code);
      _xblockexpression = this.LOCAL_RESOLUTION_CODE.append("\n\n");
    }
    return _xblockexpression;
  }

  public String resolve(final InternalCOMF p, final String name) {
    StringBuilder code = new StringBuilder();
    code.append("void");
    code.append(" ");
    code.append(name);
    code.append("(");
    code.append("List<Node>");
    code.append(" ");
    code.append("I");
    code.append(") {");
    code.append("\n\t");
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> ovsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>();");
    code.append("\n\t");
    code.append("Object newValue = 0.0;");
    code.append("\n\t");
    EObject tmp = p.getIip().getInternalportref();
    if ((tmp instanceof InputPort)) {
      TypeDef _typeFromVe = this.he.getTypeFromVe(((InputPort)tmp).getOutputport().getVe());
      if ((_typeFromVe instanceof BoolDef)) {
        code.append("List<Boolean> toCheck = new ArrayList<Boolean>();");
        code.append("\n\t");
        code.append("List<Boolean> filter = new ArrayList<Boolean>();");
      } else {
        TypeDef _typeFromVe_1 = this.he.getTypeFromVe(((InputPort)tmp).getOutputport().getVe());
        if ((_typeFromVe_1 instanceof IntegerDef)) {
          code.append("List<Integer> toCheck = new ArrayList<Integer>();");
          code.append("\n\t");
          code.append("List<Integer> filter = new ArrayList<Integer>();");
        } else {
          TypeDef _typeFromVe_2 = this.he.getTypeFromVe(((InputPort)tmp).getOutputport().getVe());
          if ((_typeFromVe_2 instanceof RealDef)) {
            code.append("List<Double> toCheck = new ArrayList<Double>();");
            code.append("\n\t");
            code.append("List<Double> filter = new ArrayList<Double>();");
          } else {
            TypeDef _typeFromVe_3 = this.he.getTypeFromVe(((InputPort)tmp).getOutputport().getVe());
            if ((_typeFromVe_3 instanceof StringDef)) {
              code.append("List<String> toCheck = new ArrayList<String>();");
              code.append("\n\t");
              code.append("List<String> filter = new ArrayList<String>();");
            } else {
              System.err.println("TypeDef not supported!");
            }
          }
        }
      }
    } else {
      if ((tmp instanceof InternalOutputPort)) {
        TypeDef _typeFromVe_4 = this.he.getTypeFromVe(((InternalOutputPort)tmp).getVe());
        if ((_typeFromVe_4 instanceof BoolDef)) {
          code.append("List<Boolean> toCheck = new ArrayList<Boolean>();");
          code.append("\n\t");
          code.append("List<Boolean> filter = new ArrayList<Boolean>();");
        } else {
          TypeDef _typeFromVe_5 = this.he.getTypeFromVe(((InternalOutputPort)tmp).getVe());
          if ((_typeFromVe_5 instanceof IntegerDef)) {
            code.append("List<Integer> toCheck = new ArrayList<Integer>();");
            code.append("\n\t");
            code.append("List<Integer> filter = new ArrayList<Integer>();");
          } else {
            TypeDef _typeFromVe_6 = this.he.getTypeFromVe(((InternalOutputPort)tmp).getVe());
            if ((_typeFromVe_6 instanceof RealDef)) {
              code.append("List<Double> toCheck = new ArrayList<Double>();");
              code.append("\n\t");
              code.append("List<Double> filter = new ArrayList<Double>();");
            } else {
              TypeDef _typeFromVe_7 = this.he.getTypeFromVe(((InternalOutputPort)tmp).getVe());
              if ((_typeFromVe_7 instanceof StringDef)) {
                code.append("List<String> toCheck = new ArrayList<String>();");
                code.append("\n\t");
                code.append("List<String> filter = new ArrayList<String>();");
              } else {
                System.err.println("TypeDef not supported!");
              }
            }
          }
        }
      }
    }
    code.append("\n\t");
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> toCheckVsp = I.get(0).vsp();");
    code.append("\n\t");
    code.append("for (int i = 0; i < toCheckVsp.size(); i++) {");
    code.append("\n\t\t");
    if ((tmp instanceof InputPort)) {
      TypeDef _typeFromVe_8 = this.he.getTypeFromVe(((InputPort)tmp).getOutputport().getVe());
      if ((_typeFromVe_8 instanceof BoolDef)) {
        code.append("toCheck.add(((Boolean)toCheckVsp.get(i).getValue()).booleanValue());");
      } else {
        TypeDef _typeFromVe_9 = this.he.getTypeFromVe(((InputPort)tmp).getOutputport().getVe());
        if ((_typeFromVe_9 instanceof IntegerDef)) {
          code.append("toCheck.add(((Integer)toCheckVsp.get(i).getValue()).intValue());");
        } else {
          TypeDef _typeFromVe_10 = this.he.getTypeFromVe(((InputPort)tmp).getOutputport().getVe());
          if ((_typeFromVe_10 instanceof RealDef)) {
            code.append("toCheck.add(((Number)toCheckVsp.get(i).getValue()).doubleValue());");
          } else {
            TypeDef _typeFromVe_11 = this.he.getTypeFromVe(((InputPort)tmp).getOutputport().getVe());
            if ((_typeFromVe_11 instanceof StringDef)) {
              code.append("toCheck.add(toCheckVsp.get(i).getValue().toString());");
            } else {
              System.err.println("TypeDef not supported!");
            }
          }
        }
      }
    } else {
      if ((tmp instanceof InternalOutputPort)) {
        TypeDef _typeFromVe_12 = this.he.getTypeFromVe(((InternalOutputPort)tmp).getVe());
        if ((_typeFromVe_12 instanceof BoolDef)) {
          code.append("toCheck.add(((Boolean)toCheckVsp.get(i).getValue()).booleanValue());");
        } else {
          TypeDef _typeFromVe_13 = this.he.getTypeFromVe(((InternalOutputPort)tmp).getVe());
          if ((_typeFromVe_13 instanceof IntegerDef)) {
            code.append("toCheck.add(((Integer)toCheckVsp.get(i).getValue()).intValue());");
          } else {
            TypeDef _typeFromVe_14 = this.he.getTypeFromVe(((InternalOutputPort)tmp).getVe());
            if ((_typeFromVe_14 instanceof RealDef)) {
              code.append("toCheck.add(((Number)toCheckVsp.get(i).getValue()).doubleValue());");
            } else {
              TypeDef _typeFromVe_15 = this.he.getTypeFromVe(((InternalOutputPort)tmp).getVe());
              if ((_typeFromVe_15 instanceof StringDef)) {
                code.append("toCheck.add(toCheckVsp.get(i).getValue().toString());");
              } else {
                System.err.println("TypeDef not supported!");
              }
            }
          }
        }
      }
    }
    code.append("\n\t");
    code.append("}");
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> filterVsp = I.get(1).vsp();");
    code.append("\n\t");
    code.append("List<List<SimpleEntry<String,Integer>>> htmp;");
    code.append("\n\t");
    code.append("for (int i = 0; i < filterVsp.size(); i++) {");
    code.append("\n\t\t");
    if ((tmp instanceof InputPort)) {
      TypeDef _typeFromVe_16 = this.he.getTypeFromVe(((InputPort)tmp).getOutputport().getVe());
      if ((_typeFromVe_16 instanceof BoolDef)) {
        code.append("filter.add(((Boolean)filterVsp.get(i).getValue()).booleanValue());");
      } else {
        TypeDef _typeFromVe_17 = this.he.getTypeFromVe(((InputPort)tmp).getOutputport().getVe());
        if ((_typeFromVe_17 instanceof IntegerDef)) {
          code.append("filter.add(((Integer)filterVsp.get(i).getValue()).intValue());");
        } else {
          TypeDef _typeFromVe_18 = this.he.getTypeFromVe(((InputPort)tmp).getOutputport().getVe());
          if ((_typeFromVe_18 instanceof RealDef)) {
            code.append("filter.add(((Double)filterVsp.get(i).getValue()).doubleValue());");
          } else {
            TypeDef _typeFromVe_19 = this.he.getTypeFromVe(((InputPort)tmp).getOutputport().getVe());
            if ((_typeFromVe_19 instanceof StringDef)) {
              code.append("filter.add(filterVsp.get(i).getValue().toString());");
            } else {
              System.err.println("TypeDef not supported!");
            }
          }
        }
      }
    } else {
      if ((tmp instanceof InternalOutputPort)) {
        TypeDef _typeFromVe_20 = this.he.getTypeFromVe(((InternalOutputPort)tmp).getVe());
        if ((_typeFromVe_20 instanceof BoolDef)) {
          code.append("filter.add(((Boolean)filterVsp.get(i).getValue()).booleanValue());");
        } else {
          TypeDef _typeFromVe_21 = this.he.getTypeFromVe(((InternalOutputPort)tmp).getVe());
          if ((_typeFromVe_21 instanceof IntegerDef)) {
            code.append("filter.add(((Integer)filterVsp.get(i).getValue()).intValue());");
          } else {
            TypeDef _typeFromVe_22 = this.he.getTypeFromVe(((InternalOutputPort)tmp).getVe());
            if ((_typeFromVe_22 instanceof RealDef)) {
              code.append("filter.add(((Double)filterVsp.get(i).getValue()).doubleValue());");
            } else {
              TypeDef _typeFromVe_23 = this.he.getTypeFromVe(((InternalOutputPort)tmp).getVe());
              if ((_typeFromVe_23 instanceof StringDef)) {
                code.append("filter.add(filterVsp.get(i).getValue().toString());");
              } else {
                System.err.println("TypeDef not supported!");
              }
            }
          }
        }
      }
    }
    code.append("\n\t");
    code.append("}");
    code.append("for (int i = 0; i < toCheckVsp.size(); i++) {");
    code.append("\n\t\t");
    code.append("for (int j = 0; j < filterVsp.size(); j++) {");
    code.append("\n\t\t\t");
    EObject tmpc = p.getCo();
    if ((tmpc instanceof LessThan)) {
      boolean _isInclusive = ((LessThan)tmpc).isInclusive();
      if (_isInclusive) {
        code.append("if (toCheck.get(i) <= filter.get(j)) {");
      } else {
        code.append("if (toCheck.get(i) < filter.get(j)) {");
      }
    } else {
      if ((tmpc instanceof GreaterThan)) {
        boolean _isInclusive_1 = ((GreaterThan)tmpc).isInclusive();
        if (_isInclusive_1) {
          code.append("if (toCheck.get(i) >= filter.get(j)) {");
        } else {
          code.append("if (toCheck.get(i) > filter.get(j)) {");
        }
      } else {
        if ((tmpc instanceof Equal)) {
          Accuracy _accuracy = ((Equal)tmpc).getAccuracy();
          boolean _tripleEquals = (_accuracy == null);
          if (_tripleEquals) {
            boolean _isInverse = ((Equal)tmpc).isInverse();
            if (_isInverse) {
              code.append("if (toCheck.get(i) != filter.get(j)) {");
            } else {
              code.append("if (toCheck.get(i) == filter.get(j)) {");
            }
          } else {
            boolean _isInverse_1 = ((Equal)tmpc).isInverse();
            if (_isInverse_1) {
              String _string = Double.valueOf(((Equal)tmpc).getAccuracy().getValue()).toString();
              String _plus = ("if (Math.abs(toCheck.get(i)-filter.get(j)) > " + _string);
              String _plus_1 = (_plus + ") {");
              code.append(_plus_1);
            } else {
              String _string_1 = Double.valueOf(((Equal)tmpc).getAccuracy().getValue()).toString();
              String _plus_2 = ("if (Math.abs(toCheck.get(i)-filter.get(j)) < " + _string_1);
              String _plus_3 = (_plus_2 + ") {");
              code.append(_plus_3);
            }
          }
        }
      }
    }
    code.append("\n\t\t\t\t");
    code.append("List<List<SimpleEntry<String,Integer>>> header = new ArrayList<List<SimpleEntry<String,Integer>>>();");
    code.append("\n\t\t\t\t");
    code.append("List<SimpleEntry<String,Integer>> headerRow = new ArrayList<SimpleEntry<String,Integer>>();");
    code.append("\n\t\t\t\t");
    code.append("headerRow.add(new SimpleEntry<String,Integer>(I.get(0).name(),i));");
    code.append("\n\t\t\t\t");
    code.append("if (toCheckVsp.get(i).getKey() != null) {");
    code.append("\n\t\t\t\t\t");
    code.append("htmp = toCheckVsp.get(i).getKey();");
    code.append("\n\t\t\t\t\t");
    code.append("for (List<SimpleEntry<String,Integer>> row : htmp) {");
    code.append("\n\t\t\t\t\t\t");
    code.append("for (SimpleEntry<String,Integer> entry : row) {");
    code.append("\n\t\t\t\t\t\t\t");
    code.append("headerRow.add(entry);");
    code.append("\n\t\t\t\t\t\t");
    code.append("}");
    code.append("\n\t\t\t\t\t");
    code.append("}");
    code.append("\n\t\t\t\t");
    code.append("}");
    code.append("\n\t\t\t");
    code.append("header.add(headerRow);");
    code.append("\n\t\t\t");
    code.append("headerRow = new ArrayList<SimpleEntry<String,Integer>>();");
    code.append("\n\t\t\t");
    code.append("headerRow.add(new SimpleEntry<String,Integer>(I.get(1).name(),j));");
    code.append("\n\t\t\t");
    code.append("if (filterVsp.get(j).getKey() != null) {");
    code.append("\n\t\t\t\t");
    code.append("htmp = filterVsp.get(j).getKey();");
    code.append("\n\t\t\t\t");
    code.append("for (List<SimpleEntry<String,Integer>> row : htmp) {");
    code.append("\n\t\t\t\t\t");
    code.append("for (SimpleEntry<String,Integer> entry : row) {");
    code.append("\n\t\t\t\t\t\t");
    code.append("headerRow.add(entry);");
    code.append("\n\t\t\t\t\t");
    code.append("}");
    code.append("\n\t\t\t\t");
    code.append("}");
    code.append("\n\t\t\t");
    code.append("}");
    code.append("\n\t\t");
    code.append("header.add(headerRow);");
    code.append("\n\t\t");
    code.append("newValue = newValue = toCheck.get(i);");
    code.append("\n\t\t");
    code.append("ovsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>, Object>(header, newValue));");
    code.append("\n\t\t");
    code.append("}");
    code.append("}");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    String _name = p.getIop().getName();
    String _plus_4 = ("this.NODE_COLLECTION.put(\"" + _name);
    String _plus_5 = (_plus_4 + "\", new NodeObject(\"");
    String _name_1 = p.getIop().getName();
    String _plus_6 = (_plus_5 + _name_1);
    String _plus_7 = (_plus_6 + "\", ovsp));");
    code.append(_plus_7);
    code.append("\n");
    code.append("}");
    return code.toString();
  }

  public StringBuilder resolve(final RPRO p, final List<AbstractInputPort> inputSet, final boolean isPs) {
    StringBuilder _xblockexpression = null;
    {
      StringBuilder code = new StringBuilder();
      code.append("void");
      code.append(" ");
      String _name = p.getName();
      String _plus = ("resolve_" + _name);
      code.append(_plus);
      code.append("(");
      code.append("List<Node>");
      code.append(" ");
      code.append("I");
      code.append(") {");
      code.append("\n\t");
      if (this.CHECK_FOR_IS_SAM_IN_PRODUCTION) {
        code.append("List<List<List<SimpleEntry<String,Integer>>>> headerList = new ArrayList<List<List<SimpleEntry<String,Integer>>>>();");
        code.append("\n\t");
        code.append("for (int i = 0; i < I.size(); i++) {");
        code.append("\n\t\t");
        code.append("if (I.get(i).vsp(0) != null) {");
        code.append("\n\t\t\t");
        code.append("headerList.add(I.get(i).header(0));");
        code.append("\n\t\t");
        code.append("}");
        code.append("\n\t");
        code.append("}");
        code.append("\n\t");
        code.append("if (headerList.size() > 0 && isSAM(headerList)) {");
        code.append("\n\t\t");
        String _name_1 = p.getName();
        String _plus_1 = ("System.err.println(\"ERROR: There is a not allowed SAM-Situation for Production pattern " + _name_1);
        String _plus_2 = (_plus_1 + "!\");");
        code.append(_plus_2);
        code.append("\n\t");
        code.append("}");
        code.append("\n\t");
      }
      if (isPs) {
        code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Map<String,Double>>> ovsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Map<String,Double>>>();");
        code.append("\n\t");
        code.append("Map<String,Double> newValue;");
        code.append("\n\t");
      } else {
        code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> ovsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>();");
        code.append("\n\t");
        code.append("Object newValue;");
        code.append("\n\t");
      }
      StringBuilder fdefcode = new StringBuilder();
      fdefcode.append("\n\t");
      if (isPs) {
        String _name_2 = p.getName();
        String _plus_3 = ("Map<String,Double> operator_" + _name_2);
        String _plus_4 = (_plus_3 + "(List<Object> valueList");
        fdefcode.append(_plus_4);
      } else {
        String _name_3 = p.getName();
        String _plus_5 = ("Object operator_" + _name_3);
        String _plus_6 = (_plus_5 + "(List<Object> valueList");
        fdefcode.append(_plus_6);
      }
      StringBuilder fcallcode = new StringBuilder();
      fcallcode.append("\n\t");
      String _name_4 = p.getName();
      String _plus_7 = ("operator_" + _name_4);
      String _plus_8 = (_plus_7 + "(valueList");
      fcallcode.append(_plus_8);
      List<String> processedMin = new ArrayList<String>();
      List<String> processedMax = new ArrayList<String>();
      code.append("List<Object> vtmp;");
      code.append("\n\t");
      List<String> tmp = this.he.getSymbolsForMinOperators(p.getExpr().getExpr());
      for (final String i : tmp) {
        boolean _contains = processedMin.contains(i);
        boolean _not = (!_contains);
        if (_not) {
          int index = this.he.getTh(i, inputSet);
          code.append((("vtmp = I.get(" + Integer.valueOf(index)) + ").values();"));
          code.append("\n\t");
          code.append((("double min_" + i) + " = min(vtmp);"));
          code.append("\n\t");
          fdefcode.append((", double min_" + i));
          fcallcode.append((",min_" + i));
          processedMin.add(i);
        }
      }
      tmp = this.he.getSymbolsForMaxOperators(p.getExpr().getExpr());
      for (final String i_1 : tmp) {
        boolean _contains_1 = processedMax.contains(i_1);
        boolean _not_1 = (!_contains_1);
        if (_not_1) {
          int index_1 = this.he.getTh(i_1, inputSet);
          code.append((("vtmp = I.get(" + Integer.valueOf(index_1)) + ").values();"));
          code.append("\n\t");
          code.append((("double max_" + i_1) + " = max(vtmp);"));
          code.append("\n\t");
          fdefcode.append((", double max_" + i_1));
          fcallcode.append((",max_" + i_1));
          processedMax.add(i_1);
        }
      }
      fdefcode.append(") {");
      fcallcode.append(");");
      code.append("List<List<Integer>> ir = new ArrayList<List<Integer>>();");
      code.append("\n\t");
      code.append("for (Node i : I) {");
      code.append("\n\t\t");
      code.append("List<Integer> tmp = new ArrayList<Integer>();");
      code.append("\n\t\t");
      code.append("for (int j = 0; j < i.vsp().size(); j++) {");
      code.append("\n\t\t\t");
      code.append("tmp.add(j);");
      code.append("\n\t\t");
      code.append("}");
      code.append("\n\t\t");
      code.append("ir.add(tmp);");
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
      code.append("List<List<Integer>> cp = getCartesianProduct(new ArrayList<Integer>(), 0, ir, new ArrayList<List<Integer>>());");
      code.append("\n\t");
      code.append("for (int i = 0; i < cp.size(); i++) {");
      code.append("\n\t\t");
      code.append("List<List<SimpleEntry<String,Integer>>> header = new ArrayList<List<SimpleEntry<String,Integer>>>();");
      code.append("\n\t\t");
      code.append("for (int j = 0; j < cp.get(i).size(); j++) {");
      code.append(this.jf.generateHeaderRow());
      code.append("\n\t\t");
      code.append("}");
      code.append("\n\t\t");
      code.append("if (isValidCombination(header)) {");
      code.append("\n\t\t");
      code.append("List<Object> valueList = new ArrayList<Object>();");
      code.append("\n\t\t\t");
      code.append("for (int j = 0; j < I.size(); j++) {");
      code.append("\n\t\t\t\t");
      code.append("valueList.add(I.get(j).vsp(cp.get(i).get(j)));");
      code.append("\n\t\t\t");
      code.append("}");
      code.append("\n\t\t\t");
      code.append(("newValue = " + fcallcode));
      code.append("\n\t\t\t");
      if (isPs) {
        code.append("ovsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>, Map<String,Double>>(header, newValue));");
      } else {
        code.append("ovsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>, Object>(header, newValue));");
      }
      code.append("\n\t\t");
      code.append("}");
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
      if (isPs) {
        String _name_5 = p.getOpp().getName();
        String _plus_9 = ("this.NODE_COLLECTION.put(\"" + _name_5);
        String _plus_10 = (_plus_9 + "\", new NodePs(\"");
        String _name_6 = p.getOpp().getName();
        String _plus_11 = (_plus_10 + _name_6);
        String _plus_12 = (_plus_11 + "\", ovsp));");
        code.append(_plus_12);
      } else {
        String _name_7 = p.getOp().getName();
        String _plus_13 = ("this.NODE_COLLECTION.put(\"" + _name_7);
        String _plus_14 = (_plus_13 + "\", new NodeObject(\"");
        String _name_8 = p.getOp().getName();
        String _plus_15 = (_plus_14 + _name_8);
        String _plus_16 = (_plus_15 + "\", ovsp));");
        code.append(_plus_16);
      }
      code.append("\n");
      code.append("}");
      this.LOCAL_RESOLUTION_CODE.append(code);
      this.LOCAL_RESOLUTION_CODE.append("\n\n");
      if (isPs) {
        fdefcode.append(this.he.generateExpressionCodePs(p.getName(), p.getExpr().getExpr(), inputSet));
      } else {
        fdefcode.append(this.he.generateExpressionCode(p.getName(), p.getExpr().getExpr(), inputSet));
      }
      fdefcode.append("\n\t");
      fdefcode.append("}");
      this.LOCAL_RESOLUTION_CODE.append(fdefcode);
      _xblockexpression = this.LOCAL_RESOLUTION_CODE.append("\n\n");
    }
    return _xblockexpression;
  }

  public StringBuilder resolve(final SAPRO p, final List<AbstractInputPort> inputSet) {
    StringBuilder _xblockexpression = null;
    {
      StringBuilder code = new StringBuilder();
      code.append("void");
      code.append(" ");
      String _name = p.getName();
      String _plus = ("resolve_" + _name);
      code.append(_plus);
      code.append("(");
      code.append("List<Node>");
      code.append(" ");
      code.append("I");
      code.append(") {");
      code.append("\n\t");
      if (this.CHECK_FOR_IS_SAM_IN_PRODUCTION) {
        code.append("List<List<List<SimpleEntry<String,Integer>>>> headerList = new ArrayList<List<List<SimpleEntry<String,Integer>>>>();");
        code.append("\n\t");
        code.append("for (int i = 0; i < I.size(); i++) {");
        code.append("\n\t\t");
        code.append("if (I.get(i).vsp(0) != null) {");
        code.append("\n\t\t\t");
        code.append("headerList.add(I.get(i).header(0));");
        code.append("\n\t\t");
        code.append("}");
        code.append("\n\t");
        code.append("}");
        code.append("\n\t");
        code.append("if (headerList.size() > 0 && isSAM(headerList)) {");
        code.append("\n\t\t");
        String _name_1 = p.getName();
        String _plus_1 = ("System.err.println(\"ERROR: There is a not allowed SAM-Situation for Production pattern " + _name_1);
        String _plus_2 = (_plus_1 + "!\");");
        code.append(_plus_2);
        code.append("\n\t");
        code.append("}");
        code.append("\n\t");
      }
      code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> ovsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>();");
      code.append("\n\t");
      code.append("Object newValue;");
      code.append("\n\t");
      StringBuilder fdefcode = new StringBuilder();
      fdefcode.append("\n\t");
      String _name_2 = p.getName();
      String _plus_3 = ("Object operator_" + _name_2);
      String _plus_4 = (_plus_3 + "(List<Object> valueList");
      fdefcode.append(_plus_4);
      StringBuilder fcallcode = new StringBuilder();
      fcallcode.append("\n\t");
      String _name_3 = p.getName();
      String _plus_5 = ("operator_" + _name_3);
      String _plus_6 = (_plus_5 + "(valueList");
      fcallcode.append(_plus_6);
      List<String> processedMin = new ArrayList<String>();
      List<String> processedMax = new ArrayList<String>();
      code.append("List<Object> vtmp;");
      code.append("\n\t");
      List<String> tmp = this.he.getSymbolsForMinOperators(p.getExpr().getExpr());
      for (final String i : tmp) {
        boolean _contains = processedMin.contains(i);
        boolean _not = (!_contains);
        if (_not) {
          int index = this.he.getTh(i, inputSet);
          code.append((("vtmp = I.get(" + Integer.valueOf(index)) + ").values();"));
          code.append("\n\t");
          code.append((("double min_" + i) + " = min(vtmp);"));
          code.append("\n\t");
          fdefcode.append((", double min_" + i));
          fcallcode.append((",min_" + i));
          processedMin.add(i);
        }
      }
      tmp = this.he.getSymbolsForMaxOperators(p.getExpr().getExpr());
      for (final String i_1 : tmp) {
        boolean _contains_1 = processedMax.contains(i_1);
        boolean _not_1 = (!_contains_1);
        if (_not_1) {
          int index_1 = this.he.getTh(i_1, inputSet);
          code.append((("vtmp = I.get(" + Integer.valueOf(index_1)) + ").values();"));
          code.append("\n\t");
          code.append((("double max_" + i_1) + " = max(vtmp);"));
          code.append("\n\t");
          fdefcode.append((", double max_" + i_1));
          fcallcode.append((",max_" + i_1));
          processedMax.add(i_1);
        }
      }
      fdefcode.append(") {");
      fcallcode.append(");");
      code.append("List<List<Integer>> ir = new ArrayList<List<Integer>>();");
      code.append("\n\t");
      code.append("for (Node i : I) {");
      code.append("\n\t\t");
      code.append("List<Integer> tmp = new ArrayList<Integer>();");
      code.append("\n\t\t");
      code.append("for (int j = 0; j < i.vsp().size(); j++) {");
      code.append("\n\t\t\t");
      code.append("tmp.add(j);");
      code.append("\n\t\t");
      code.append("}");
      code.append("\n\t\t");
      code.append("ir.add(tmp);");
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
      code.append("List<List<Integer>> cp = getCartesianProduct(new ArrayList<Integer>(), 0, ir, new ArrayList<List<Integer>>());");
      code.append("\n\t");
      code.append("for (int i = 0; i < cp.size(); i++) {");
      code.append("\n\t\t");
      code.append("List<List<SimpleEntry<String,Integer>>> header = new ArrayList<List<SimpleEntry<String,Integer>>>();");
      code.append("\n\t\t");
      code.append("for (int j = 0; j < cp.get(i).size(); j++) {");
      code.append(this.jf.generateHeaderRow());
      code.append("\n\t\t");
      code.append("}");
      code.append("\n\t\t");
      code.append("if (isValidCombination(header)) {");
      code.append("\n\t\t\t");
      code.append("List<Object> valueList = new ArrayList<Object>();");
      code.append("\n\t\t\t");
      code.append("for (int j = 0; j < I.size(); j++) {");
      code.append("\n\t\t\t\t");
      code.append("valueList.add(I.get(j).vsp(cp.get(i).get(j)));");
      code.append("\n\t\t\t");
      code.append("}");
      code.append("\n\t\t\t");
      code.append(("newValue = " + fcallcode));
      code.append("\n\t\t\t");
      code.append("ovsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>, Object>(header, newValue));");
      code.append("}");
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
      OutputPort _op = p.getOp();
      boolean _tripleNotEquals = (_op != null);
      if (_tripleNotEquals) {
        String _name_4 = p.getOp().getName();
        String _plus_7 = ("this.NODE_COLLECTION.put(\"" + _name_4);
        String _plus_8 = (_plus_7 + "\", new NodeObject(\"");
        String _name_5 = p.getOp().getName();
        String _plus_9 = (_plus_8 + _name_5);
        String _plus_10 = (_plus_9 + "\", ovsp));");
        code.append(_plus_10);
      } else {
        OutputCPort _ocp = p.getOcp();
        boolean _tripleNotEquals_1 = (_ocp != null);
        if (_tripleNotEquals_1) {
          String _name_6 = p.getOcp().getName();
          String _plus_11 = ("this.NODE_COLLECTION.put(\"" + _name_6);
          String _plus_12 = (_plus_11 + "\", new NodeObject(\"");
          String _name_7 = p.getOcp().getName();
          String _plus_13 = (_plus_12 + _name_7);
          String _plus_14 = (_plus_13 + "\", ovsp));");
          code.append(_plus_14);
        }
      }
      code.append("\n");
      code.append("}");
      this.LOCAL_RESOLUTION_CODE.append(code);
      this.LOCAL_RESOLUTION_CODE.append("\n\n");
      fdefcode.append(this.he.generateExpressionCode(p.getName(), p.getExpr().getExpr(), inputSet));
      fdefcode.append("\n\t");
      fdefcode.append("}");
      this.LOCAL_RESOLUTION_CODE.append(fdefcode);
      _xblockexpression = this.LOCAL_RESOLUTION_CODE.append("\n\n");
    }
    return _xblockexpression;
  }

  public StringBuilder resolve(final APRO p, final List<AbstractInputPort> inputSet) {
    StringBuilder _xblockexpression = null;
    {
      StringBuilder code = new StringBuilder();
      StringBuilder icscode = new StringBuilder();
      for (int i = 0; (i < p.getDescription().size()); i++) {
        Description _get = p.getDescription().get(i);
        String _name = p.getName();
        String _plus = ("resolve_" + _name);
        String _plus_1 = (_plus + "_d_");
        String _string = Integer.valueOf(i).toString();
        String _plus_2 = (_plus_1 + _string);
        code.append(this.resolve(_get, _plus_2, inputSet));
      }
      icscode.append("void");
      icscode.append(" ");
      String _name = p.getName();
      String _plus = ("resolve_" + _name);
      icscode.append(_plus);
      icscode.append("(");
      icscode.append("List<Node>");
      icscode.append(" ");
      icscode.append("IObsolete");
      icscode.append(") {");
      icscode.append("\n\t");
      icscode.append("NodeObject nodeObject;");
      icscode.append("\n\t");
      icscode.append("List<Object> leafValues;");
      icscode.append("\n\t");
      icscode.append("List<Node> params;");
      icscode.append("\n\t");
      for (int i = 0; (i < p.getDescription().size()); i++) {
        Description _get = p.getDescription().get(i);
        String _name_1 = p.getName();
        String _plus_1 = ("resolve_" + _name_1);
        String _plus_2 = (_plus_1 + "_d_");
        String _string = Integer.valueOf(i).toString();
        String _plus_3 = (_plus_2 + _string);
        icscode.append(this.generateDescriptionCallCode(_get, _plus_3));
      }
      int _size = p.getDescription().size();
      boolean _greaterThan = (_size > 1);
      if (_greaterThan) {
        icscode.append("List<Node> I = new ArrayList<Node>();");
        for (int i = 0; (i < p.getDescription().size()); i++) {
          String _name_1 = p.getDescription().get(i).getCore().getIop().getName();
          String _plus_1 = ("I.add(this.NODE_COLLECTION.get(\"" + _name_1);
          String _plus_2 = (_plus_1 + "\"));");
          icscode.append(_plus_2);
        }
        icscode.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> ovsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>();");
        icscode.append("\n\t");
        icscode.append("Object newValue;");
        icscode.append("\n\t");
        icscode.append("List<List<Integer>> ir = new ArrayList<List<Integer>>();");
        icscode.append("\n\t");
        icscode.append("for (int i = 0; i < I.size(); i++) {");
        icscode.append("\n\t\t");
        icscode.append("for (int j = 0; j < I.get(i).vsp().size(); j++) {");
        icscode.append("\n\t\t\t");
        icscode.append("List<List<SimpleEntry<String,Integer>>> header = new ArrayList<List<SimpleEntry<String,Integer>>>();");
        icscode.append("\n\t\t\t");
        icscode.append("List<SimpleEntry<String,Integer>> headerRow = new ArrayList<SimpleEntry<String,Integer>>();");
        icscode.append("\n\t\t\t");
        icscode.append("headerRow.add(new SimpleEntry<String, Integer>(I.get(i).name(), j));");
        icscode.append("\n\t\t\t");
        icscode.append("if (I.get(i).header(j) != null) {");
        icscode.append("\n\t\t\t\t");
        icscode.append("List<List<SimpleEntry<String,Integer>>> htmp = I.get(i).header(j);");
        icscode.append("\n\t\t\t\t");
        icscode.append("for (List<SimpleEntry<String,Integer>> row : htmp) {");
        icscode.append("\n\t\t\t\t\t");
        icscode.append("for (SimpleEntry<String,Integer> entry : row) {");
        icscode.append("\n\t\t\t\t\t\t");
        icscode.append("headerRow.add(entry);");
        icscode.append("\n\t\t\t\t\t");
        icscode.append("}");
        icscode.append("\n\t\t\t\t");
        icscode.append("}");
        icscode.append("\n\t\t\t");
        icscode.append("}");
        icscode.append("\n\t\t\t");
        icscode.append("header.add(headerRow);");
        icscode.append("\n\t\t\t");
        icscode.append("newValue = I.get(i).vsp(j);");
        icscode.append("ovsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>, Object>(header, newValue));");
        OutputPort _op = p.getOp();
        boolean _tripleNotEquals = (_op != null);
        if (_tripleNotEquals) {
          String _name_1 = p.getOp().getName();
          String _plus_1 = ("this.NODE_COLLECTION.put(\"" + _name_1);
          String _plus_2 = (_plus_1 + "\", new NodeObject(\"");
          String _name_2 = p.getOp().getName();
          String _plus_3 = (_plus_2 + _name_2);
          String _plus_4 = (_plus_3 + "\", ovsp));");
          icscode.append(_plus_4);
        } else {
          String _name_3 = p.getOcp().getName();
          String _plus_5 = ("this.NODE_COLLECTION.put(\"" + _name_3);
          String _plus_6 = (_plus_5 + "\", new NodeObject(\"");
          String _name_4 = p.getOcp().getName();
          String _plus_7 = (_plus_6 + _name_4);
          String _plus_8 = (_plus_7 + "\", ovsp));");
          icscode.append(_plus_8);
        }
        icscode.append("\n\t\t");
        icscode.append("}");
        icscode.append("\n\t");
        icscode.append("}");
      } else {
        OutputPort _op_1 = p.getOp();
        boolean _tripleNotEquals_1 = (_op_1 != null);
        if (_tripleNotEquals_1) {
          String _name_5 = p.getOp().getName();
          String _plus_9 = ("this.NODE_COLLECTION.put(\"" + _name_5);
          String _plus_10 = (_plus_9 + "\", new NodeObject(\"");
          String _name_6 = p.getOp().getName();
          String _plus_11 = (_plus_10 + _name_6);
          String _plus_12 = (_plus_11 + "\", this.NODE_COLLECTION.get(\"");
          String _name_7 = p.getDescription().get(0).getCore().getIop().getName();
          String _plus_13 = (_plus_12 + _name_7);
          String _plus_14 = (_plus_13 + "\").vsp()));");
          icscode.append(_plus_14);
        } else {
          String _name_8 = p.getOcp().getName();
          String _plus_15 = ("this.NODE_COLLECTION.put(\"" + _name_8);
          String _plus_16 = (_plus_15 + "\", new NodeObject(\"");
          String _name_9 = p.getOcp().getName();
          String _plus_17 = (_plus_16 + _name_9);
          String _plus_18 = (_plus_17 + "\", this.NODE_COLLECTION.get(\"");
          String _name_10 = p.getDescription().get(0).getCore().getIop().getName();
          String _plus_19 = (_plus_18 + _name_10);
          String _plus_20 = (_plus_19 + "\").vsp()));");
          icscode.append(_plus_20);
        }
      }
      icscode.append("\n");
      icscode.append("}");
      this.LOCAL_RESOLUTION_CODE.append(code);
      this.LOCAL_RESOLUTION_CODE.append("\n\n");
      this.LOCAL_RESOLUTION_CODE.append(icscode);
      _xblockexpression = this.LOCAL_RESOLUTION_CODE.append("\n\n");
    }
    return _xblockexpression;
  }

  public String generateDescriptionCallCode(final Description d, final String name) {
    StringBuilder code = new StringBuilder();
    Precondition _precond = d.getPrecond();
    boolean _tripleNotEquals = (_precond != null);
    if (_tripleNotEquals) {
      for (int i = 0; (i < d.getPrecond().getInternalcomf().size()); i++) {
        {
          EObject tmp = d.getPrecond().getInternalcomf().get(i).getIip().getInternalportref();
          InputCPort tmpc = d.getPrecond().getInternalcomf().get(i).getIcp();
          EObject tmpco = tmpc.getOutputcport();
          if ((tmpco instanceof InitCPort)) {
            code.append(this.generateLeafCS(((InitCPort)tmpco)));
            code.append("\n\t");
          }
          if ((tmp instanceof InputPort)) {
            code.append("params = new ArrayList<Node>();");
            code.append("\n\t");
            String _name = ((InputPort)tmp).getOutputport().getName();
            String _plus = ("params.add(this.NODE_COLLECTION.get(\"" + _name);
            String _plus_1 = (_plus + "\"));");
            code.append(_plus_1);
            code.append("\n\t");
            String _name_1 = tmpc.getOutputcport().getName();
            String _plus_2 = ("params.add(this.NODE_COLLECTION.get(\"" + _name_1);
            String _plus_3 = (_plus_2 + "\"));");
            code.append(_plus_3);
            code.append((((name + "_p_") + Integer.valueOf(i)) + "(params);"));
            code.append("\n\t");
          }
        }
      }
    }
    StringBuilder params = new StringBuilder();
    code.append("params = new ArrayList<Node>();");
    code.append("\n\t");
    EList<InternalInputPort> _iip = d.getCore().getIip();
    for (final InternalInputPort i : _iip) {
      {
        EObject tmp = i.getInternalportref();
        if ((tmp instanceof InputPort)) {
          String _name = ((InputPort)tmp).getOutputport().getName();
          String _plus = ("params.add(this.NODE_COLLECTION.get(\"" + _name);
          String _plus_1 = (_plus + "\"));");
          params.append(_plus_1);
          params.append("\n\t");
        } else {
          if ((tmp instanceof InternalOutputPort)) {
            String _name_1 = ((InternalOutputPort)tmp).getName();
            String _plus_2 = ("params.add(this.NODE_COLLECTION.get(\"" + _name_1);
            String _plus_3 = (_plus_2 + "\"));");
            params.append(_plus_3);
            params.append("\n\t");
          }
        }
      }
    }
    code.append(params);
    code.append("\n\t");
    code.append("\n\t");
    code.append((name + "_c(IObsolete);"));
    return code.toString();
  }

  public String resolve(final Description d, final String name, final List<AbstractInputPort> inputSet) {
    StringBuilder code = new StringBuilder();
    Precondition _precond = d.getPrecond();
    boolean _tripleNotEquals = (_precond != null);
    if (_tripleNotEquals) {
      for (int i = 0; (i < d.getPrecond().getInternalcomf().size()); i++) {
        {
          code.append(this.resolve(d.getPrecond().getInternalcomf().get(i), ((name + "_p_") + Integer.valueOf(i))));
          code.append("\n\n");
        }
      }
    }
    code.append(this.resolve(d.getCore(), (name + "_c"), inputSet));
    code.append("\n\n");
    return code.toString();
  }

  public String resolve(final Core c, final String name, final List<AbstractInputPort> inputSet) {
    StringBuilder code = new StringBuilder();
    StringBuilder cdofdefCode = new StringBuilder();
    StringBuilder cdofcallCode = new StringBuilder();
    code.append("void");
    code.append(" ");
    code.append(name);
    code.append("(");
    code.append("List<Node> I");
    code.append(") {");
    code.append("\n\t");
    if (this.CHECK_FOR_IS_SAM_IN_PRODUCTION) {
      code.append("List<List<List<SimpleEntry<String,Integer>>>> headerList = new ArrayList<List<List<SimpleEntry<String,Integer>>>>();");
      code.append("\n\t");
      code.append("for (int i = 0; i < I.size(); i++) {");
      code.append("\n\t\t");
      code.append("if (I.get(i).header(0) != null) {");
      code.append("\n\t\t\t");
      code.append("headerList.add(I.get(i).header(0));");
      code.append("\n\t\t");
      code.append("}");
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
      code.append("if (headerList.size() > 0 && isSAM(headerList)) {");
      code.append("\n\t\t");
      code.append((("System.err.println(\"ERROR: There is a not allowed SAM-Situation for Production pattern " + name) + "!\");"));
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
    }
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> ovsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>();");
    code.append("\n\t");
    code.append("Object newValue;");
    code.append("\n\t");
    Expression _expr = c.getExpr();
    boolean _tripleNotEquals = (_expr != null);
    if (_tripleNotEquals) {
      List<String> alreadyGenerated = new ArrayList<String>();
      List<String> tmp = this.he.getSymbolsForComplexDo(c.getExpr().getExpr());
      List<Integer> cdoi = new ArrayList<Integer>();
      List<String> cdos = new ArrayList<String>();
      for (final String i : tmp) {
        boolean _contains = alreadyGenerated.contains(i);
        boolean _not = (!_contains);
        if (_not) {
          int index = this.he.getTh(i, inputSet);
          cdoi.add(Integer.valueOf(index));
          cdos.add(i);
          code.append((("List<Object> " + i) + ";"));
          cdofdefCode.append((",List<Object> " + i));
          cdofcallCode.append(("," + i));
          alreadyGenerated.add(i);
        }
      }
      code.append("List<List<Integer>> ir = new ArrayList<List<Integer>>();");
      code.append("\n\t");
      code.append("for (Node i : I) {");
      code.append("\n\t\t");
      code.append("List<Integer> tmp = new ArrayList<Integer>();");
      code.append("\n\t\t");
      code.append("if (i instanceof NodeObjectList) {");
      code.append("\n\t\t\t");
      code.append("for (int j = 0; j < i.vsp_2().size(); j++) {");
      code.append("\n\t\t\t\t");
      code.append("tmp.add(j);");
      code.append("\n\t\t\t");
      code.append("}");
      code.append("\n\t\t");
      code.append("}");
      code.append("\n\t\t");
      code.append("else if (i instanceof NodeObject) {");
      code.append("\n\t\t\t");
      code.append("for (int j = 0; j < i.vsp().size(); j++) {");
      code.append("\n\t\t\t\t");
      code.append("tmp.add(j);");
      code.append("\n\t\t\t");
      code.append("}");
      code.append("\n\t\t");
      code.append("}");
      code.append("\n\t\t");
      code.append("ir.add(tmp);");
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
      code.append("List<List<Integer>> cp = getCartesianProduct(new ArrayList<Integer>(), 0, ir, new ArrayList<List<Integer>>());");
      code.append("\n\t");
      code.append("for (int i = 0; i < cp.size(); i++) {");
      code.append("\n\t\t");
      code.append("List<List<SimpleEntry<String,Integer>>> header = new ArrayList<List<SimpleEntry<String,Integer>>>();");
      code.append("\n\t\t");
      code.append("for (int j = 0; j < cp.get(i).size(); j++) {");
      code.append(this.jf.generateHeaderRow());
      code.append("\n\t\t");
      code.append("}");
      code.append("\n\t\t");
      code.append("List<Object> valueList = new ArrayList<Object>();");
      code.append("\n\t\t");
      for (int i_1 = 0; (i_1 < inputSet.size()); i_1++) {
        if (((cdoi.size() > 0) && ((cdoi.get(0)).intValue() == i_1))) {
          String _get = cdos.get(0);
          String _plus = (_get + " = I.get(");
          String _plus_1 = (_plus + Integer.valueOf(i_1));
          String _plus_2 = (_plus_1 + ").vsp_2(cp.get(i).get(");
          String _plus_3 = (_plus_2 + Integer.valueOf(i_1));
          String _plus_4 = (_plus_3 + "));");
          code.append(_plus_4);
          code.append("\n\t\t");
          cdoi.remove(0);
          cdos.remove(0);
        } else {
          code.append((((("valueList.add(I.get(" + Integer.valueOf(i_1)) + ").vsp(cp.get(i).get(") + Integer.valueOf(i_1)) + ")));"));
          code.append("\n\t\t");
        }
      }
      code.append("\n\t\t");
      code.append("if (isValidCombination(header)) {");
      code.append("\n\t\t\t");
      code.append((((("newValue = operator_" + name) + "(valueList") + cdofcallCode) + ");"));
      code.append("\n\t\t\t");
      code.append("ovsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>, Object>(header, newValue));");
      code.append("\n\t\t");
      code.append("}");
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
      String _name = c.getIop().getName();
      String _plus = ("this.NODE_COLLECTION.put(\"" + _name);
      String _plus_1 = (_plus + "\", new NodeObject(\"");
      String _name_1 = c.getIop().getName();
      String _plus_2 = (_plus_1 + _name_1);
      String _plus_3 = (_plus_2 + "\", ovsp));");
      code.append(_plus_3);
      code.append("\n");
      code.append("}");
      code.append("\n");
      StringBuilder fdefcode = new StringBuilder();
      fdefcode.append("\n\t");
      fdefcode.append((((("Object operator_" + name) + "(List<Object> valueList") + cdofdefCode) + ") {"));
      fdefcode.append(this.he.generateExpressionCode(name, c.getExpr().getExpr(), inputSet));
      fdefcode.append("\n\t");
      fdefcode.append("}");
      code.append(fdefcode);
      code.append("\n");
    } else {
      CombinationAssignment _ca = c.getCa();
      boolean _tripleNotEquals_1 = (_ca != null);
      if (_tripleNotEquals_1) {
        code.append("List<List<SimpleEntry<String,Integer>>> header;");
        code.append("\n\t");
        code.append("List<SimpleEntry<String,Integer>> headerRow;");
        code.append("\n\t");
        code.append("List<List<SimpleEntry<String,Integer>>> htmp;");
        EList<Combination> _combination = c.getCa().getCombination();
        for (final Combination i_1 : _combination) {
          {
            code.append("\n\t");
            code.append("header = new ArrayList<List<SimpleEntry<String,Integer>>>();");
            for (int j = 0; (j < i_1.getElement().size()); j++) {
              {
                int internalNodeIndex = j;
                code.append(this.jf.generateHeaderRow(internalNodeIndex, i_1.getElement().get(j).getIndex()));
                code.append("\n\t");
              }
            }
            double _value = i_1.getValue().getValue();
            String _plus_4 = ("ovsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>, Object>(header," + Double.valueOf(_value));
            String _plus_5 = (_plus_4 + "));");
            code.append(_plus_5);
            code.append("\n\t");
          }
        }
        code.append("\n\t");
        String _name_2 = c.getIop().getName();
        String _plus_4 = ("this.NODE_COLLECTION.put(\"" + _name_2);
        String _plus_5 = (_plus_4 + "\", new NodeObject(\"");
        String _name_3 = c.getIop().getName();
        String _plus_6 = (_plus_5 + _name_3);
        String _plus_7 = (_plus_6 + "\", ovsp));");
        code.append(_plus_7);
        code.append("\n");
        code.append("}");
      }
    }
    return code.toString();
  }

  public StringBuilder resolve(final MAGR p) {
    StringBuilder _xblockexpression = null;
    {
      StringBuilder code = new StringBuilder();
      StringBuilder lcode = new StringBuilder();
      code.append("void");
      code.append(" ");
      String _name = p.getName();
      String _plus = ("resolve_" + _name);
      code.append(_plus);
      code.append("(");
      code.append("List<List<Node>>");
      code.append(" ");
      code.append("I");
      code.append(") {");
      code.append("\n\t");
      for (int i = 0; (i < p.getAggr().size()); i++) {
        {
          String _name_1 = p.getName();
          String _plus_1 = ("resolve_" + _name_1);
          String _plus_2 = (_plus_1 + "_");
          String _string = Integer.valueOf(i).toString();
          String name = (_plus_2 + _string);
          code.append((((name + "(I.get(") + Integer.valueOf(i)) + "));"));
          code.append("\n\t");
          lcode.append(this.resolveAGGR(p.getName(), name, p.getAggr().get(i)));
          lcode.append("\n");
        }
      }
      code.append("\n");
      code.append("}");
      this.LOCAL_RESOLUTION_CODE.append(code);
      this.LOCAL_RESOLUTION_CODE.append("\n\n");
      this.LOCAL_RESOLUTION_CODE.append(lcode);
      _xblockexpression = this.LOCAL_RESOLUTION_CODE.append("\n\n");
    }
    return _xblockexpression;
  }

  public String resolveAGGR(final String pname, final String fname, final AGGR la) {
    StringBuilder code = new StringBuilder();
    String vsp = null;
    String obj = null;
    boolean _isComplexDo = this.he.isComplexDo(la.getOp().getVe());
    if (_isComplexDo) {
      vsp = "vsp_2";
      obj = "List<Object>";
    } else {
      vsp = "vsp";
      obj = "Object";
    }
    code.append("void");
    code.append(" ");
    code.append(fname);
    code.append("(");
    code.append("List<Node>");
    code.append(" ");
    code.append("I");
    code.append(") {");
    code.append("\n\t");
    code.append((((("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>," + obj) + ">> ovsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,") + obj) + ">>();"));
    code.append("\n\t");
    code.append((obj + " newValue;"));
    code.append("\n\t");
    code.append("List<List<Integer>> ir = new ArrayList<List<Integer>>();");
    code.append("\n\t");
    code.append("NodeObjectList nodeObjectList;");
    code.append("\n\t");
    code.append("for (int i = 0; i < I.size(); i++) {");
    code.append("\n\t\t");
    code.append((("SimpleEntry<String, Integer> fid = new SimpleEntry<String, Integer>(\"" + pname) + "\", i);"));
    code.append((("for (int j = 0; j < I.get(i)." + vsp) + "().size(); j++) {"));
    code.append("\n\t\t\t");
    code.append("List<List<SimpleEntry<String,Integer>>> header = new ArrayList<List<SimpleEntry<String,Integer>>>();");
    code.append("\n\t\t\t");
    code.append("List<SimpleEntry<String,Integer>> headerRow = new ArrayList<SimpleEntry<String,Integer>>();");
    code.append("\n\t\t\t");
    code.append("headerRow.add(fid);");
    code.append("\n\t\t\t");
    code.append("headerRow.add(new SimpleEntry<String, Integer>(I.get(i).name(), j));");
    code.append("\n\t\t\t");
    code.append("if (I.get(i).header(j) != null) {");
    code.append("\n\t\t\t\t");
    code.append("List<List<SimpleEntry<String,Integer>>> htmp = I.get(i).header(j);");
    code.append("\n\t\t\t\t");
    code.append("for (List<SimpleEntry<String,Integer>> row : htmp) {");
    code.append("\n\t\t\t\t\t");
    code.append("for (SimpleEntry<String,Integer> entry : row) {");
    code.append("\n\t\t\t\t\t\t");
    code.append("headerRow.add(entry);");
    code.append("\n\t\t\t\t\t");
    code.append("}");
    code.append("\n\t\t\t\t");
    code.append("}");
    code.append("\n\t\t\t");
    code.append("}");
    code.append("\n\t\t\t");
    code.append("header.add(headerRow);");
    code.append("\n\t\t\t");
    code.append((("newValue = I.get(i)." + vsp) + "(j);"));
    code.append((("ovsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>, " + obj) + ">(header, newValue));"));
    code.append("\n\t\t");
    code.append("}");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    boolean _isComplexDo_1 = this.he.isComplexDo(la.getOp().getVe());
    if (_isComplexDo_1) {
      String _name = la.getOp().getName();
      String _plus = ("nodeObjectList = new NodeObjectList(\"" + _name);
      String _plus_1 = (_plus + "\");");
      code.append(_plus_1);
      code.append("nodeObjectList.assignVSP_2(ovsp);");
      String _name_1 = la.getOp().getName();
      String _plus_2 = ("this.NODE_COLLECTION.put(\"" + _name_1);
      String _plus_3 = (_plus_2 + "\", nodeObjectList);");
      code.append(_plus_3);
    } else {
      String _name_2 = la.getOp().getName();
      String _plus_4 = ("this.NODE_COLLECTION.put(\"" + _name_2);
      String _plus_5 = (_plus_4 + "\", new NodeObject(\"");
      String _name_3 = la.getOp().getName();
      String _plus_6 = (_plus_5 + _name_3);
      String _plus_7 = (_plus_6 + "\", ovsp));");
      code.append(_plus_7);
    }
    code.append("}");
    return code.toString();
  }

  public StringBuilder resolve(final TRAN p) {
    StringBuilder _xblockexpression = null;
    {
      StringBuilder code = new StringBuilder();
      code.append("void");
      code.append(" ");
      String _name = p.getName();
      String _plus = ("resolve_" + _name);
      code.append(_plus);
      code.append("(");
      code.append("List<Node>");
      code.append(" ");
      code.append("I");
      code.append(") {");
      code.append("\n\t");
      code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> ovsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>();");
      code.append("\n\t");
      code.append("Object newValue = 0.0;");
      code.append("\n\t");
      code.append("List<Double> s = new ArrayList<Double>();");
      code.append("\n\t");
      code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> vsptmp = I.get(0).vsp();");
      code.append("\n\t");
      code.append("for (int i = 0; i < vsptmp.size(); i++) {");
      code.append("\n\t\t");
      code.append("s.add(((Number)vsptmp.get(i).getValue()).doubleValue());");
      code.append("\n\t");
      code.append("}");
      code.append("for (int i = 0; i < vsptmp.size(); i++) {");
      code.append("\n\t\t");
      code.append("List<List<SimpleEntry<String,Integer>>> header = new ArrayList<List<SimpleEntry<String,Integer>>>();");
      code.append("\n\t\t");
      code.append("List<SimpleEntry<String,Integer>> headerRow = new ArrayList<SimpleEntry<String,Integer>>();");
      code.append("\n\t\t\t");
      code.append("headerRow.add(new SimpleEntry<String,Integer>(I.get(0).name(),i));");
      code.append("\n\t\t\t");
      code.append("if (vsptmp.get(i).getKey() != null) {");
      code.append("\n\t\t\t\t");
      code.append("List<List<SimpleEntry<String,Integer>>> htmp = vsptmp.get(i).getKey();");
      code.append("\n\t\t\t\t");
      code.append("for (List<SimpleEntry<String,Integer>> row : htmp) {");
      code.append("\n\t\t\t\t\t");
      code.append("for (SimpleEntry<String,Integer> entry : row) {");
      code.append("\n\t\t\t\t\t\t");
      code.append("headerRow.add(entry);");
      code.append("\n\t\t\t\t\t");
      code.append("}");
      code.append("\n\t\t\t\t");
      code.append("}");
      code.append("\n\t\t\t");
      code.append("}");
      code.append("\n\t\t\t");
      code.append("header.add(headerRow);");
      code.append("\n\t\t\t");
      NormalizationCOp nf = p.getNo();
      if ((nf instanceof LinearNormalization)) {
        if (((((LinearNormalization)nf).getMin() == null) && (((LinearNormalization)nf).getMax() == null))) {
          code.append("double num = Collections.max(s)-((Number)vsptmp.get(i).getValue()).doubleValue();");
          code.append("\n\t\t\t");
          code.append("double den = Collections.max(s)-Collections.min(s);");
          code.append("\n\t\t\t");
        } else {
          if (((((LinearNormalization)nf).getMin() != null) && (((LinearNormalization)nf).getMax() == null))) {
            code.append("double num = Collections.max(s)-((Number)vsptmp.get(i).getValue()).doubleValue();");
            code.append("\n\t\t\t");
            String _string = Double.valueOf(((LinearNormalization)nf).getMin().getValue()).toString();
            String _plus_1 = ("double den = Collections.max(s)-" + _string);
            String _plus_2 = (_plus_1 + ";");
            code.append(_plus_2);
            code.append("\n\t\t\t");
          } else {
            if (((((LinearNormalization)nf).getMin() == null) && (((LinearNormalization)nf).getMax() != null))) {
              String _string_1 = Double.valueOf(((LinearNormalization)nf).getMax().getValue()).toString();
              String _plus_3 = ("double num = " + _string_1);
              String _plus_4 = (_plus_3 + "-((Number)vsptmp.get(i).getValue()).doubleValue();");
              code.append(_plus_4);
              code.append("\n\t\t\t");
              String _string_2 = Double.valueOf(((LinearNormalization)nf).getMax().getValue()).toString();
              String _plus_5 = ("double den = " + _string_2);
              String _plus_6 = (_plus_5 + "-Collections.min(s);");
              code.append(_plus_6);
              code.append("\n\t\t\t");
            } else {
              String _string_3 = Double.valueOf(((LinearNormalization)nf).getMax().getValue()).toString();
              String _plus_7 = ("double num = " + _string_3);
              String _plus_8 = (_plus_7 + "-((Number)vsptmp.get(i).getValue()).doubleValue();");
              code.append(_plus_8);
              code.append("\n\t\t\t");
              String _string_4 = Double.valueOf(((LinearNormalization)nf).getMax().getValue()).toString();
              String _plus_9 = ("double den = " + _string_4);
              String _plus_10 = (_plus_9 + "-");
              String _string_5 = Double.valueOf(((LinearNormalization)nf).getMin().getValue()).toString();
              String _plus_11 = (_plus_10 + _string_5);
              String _plus_12 = (_plus_11 + ";");
              code.append(_plus_12);
              code.append("\n\t\t\t");
            }
          }
        }
        Direction _direction = ((LinearNormalization)nf).getDirection();
        boolean _equals = Objects.equal(_direction, Direction.DEC);
        if (_equals) {
          code.append("newValue = num/den;");
        } else {
          code.append("newValue = 1-(num/den);");
        }
      }
      code.append("\n\t\t\t");
      code.append("ovsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>, Object>(header, newValue));");
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
      String _name_1 = p.getOp().getName();
      String _plus_13 = ("this.NODE_COLLECTION.put(\"" + _name_1);
      String _plus_14 = (_plus_13 + "\", new NodeObject(\"");
      String _name_2 = p.getOp().getName();
      String _plus_15 = (_plus_14 + _name_2);
      String _plus_16 = (_plus_15 + "\", ovsp));");
      code.append(_plus_16);
      code.append("\n");
      code.append("}");
      this.LOCAL_RESOLUTION_CODE.append(code);
      _xblockexpression = this.LOCAL_RESOLUTION_CODE.append("\n\n");
    }
    return _xblockexpression;
  }

  public String resolve(final CONT p) {
    StringBuilder code = new StringBuilder();
    code.append("void");
    code.append(" ");
    String _name = p.getName();
    String _plus = ("resolve_" + _name);
    code.append(_plus);
    code.append("(");
    code.append("List<Node>");
    code.append(" ");
    code.append("I");
    code.append(") {");
    code.append("\n\t");
    if (this.CHECK_FOR_IS_SAM_IN_CONTRADICTION) {
      code.append("List<List<List<SimpleEntry<String,Integer>>>> headerList = new ArrayList<List<List<SimpleEntry<String,Integer>>>>();");
      code.append("\n\t");
      code.append("for (int i = 0; i < I.size(); i++) {");
      code.append("\n\t\t");
      code.append("if (I.get(i).header(0) != null) {");
      code.append("\n\t\t\t");
      code.append("headerList.add(I.get(i).header(0));");
      code.append("\n\t\t");
      code.append("}");
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
      code.append("if (headerList.size() > 0 && !isSAM(headerList)) {");
      code.append("\n\t\t");
      String _name_1 = p.getName();
      String _plus_1 = ("System.err.println(\"ERROR: There is no SAM-Situation for Contradiction pattern " + _name_1);
      String _plus_2 = (_plus_1 + "!\");");
      code.append(_plus_2);
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
    }
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> ovsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>();");
    code.append("\n\t");
    code.append("double newValue = 0.0;");
    code.append("\n\t");
    code.append("List<List<Integer>> ir = new ArrayList<List<Integer>>();");
    code.append("\n\t");
    code.append("for (Node i : I) {");
    code.append("\n\t\t");
    code.append("List<Integer> tmp = new ArrayList<Integer>();");
    code.append("\n\t\t");
    code.append("for (int j = 0; j < i.vsp().size(); j++) {");
    code.append("\n\t\t\t");
    code.append("tmp.add(j);");
    code.append("\n\t\t");
    code.append("}");
    code.append("\n\t\t");
    code.append("ir.add(tmp);");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("List<List<Integer>> cp = getCartesianProduct(new ArrayList<Integer>(), 0, ir, new ArrayList<List<Integer>>());");
    code.append("\n\t");
    code.append("for (int i = 0; i < cp.size(); i++) {");
    code.append("\n\t\t");
    code.append("newValue = 0.0;");
    code.append("\n\t\t");
    code.append("List<List<SimpleEntry<String,Integer>>> header = new ArrayList<List<SimpleEntry<String,Integer>>>();");
    code.append("\n\t\t");
    code.append("for (int j = 0; j < cp.get(i).size(); j++) {");
    code.append(this.jf.generateHeaderRow());
    code.append("\n\t\t");
    code.append("}");
    code.append("\n\t\t");
    code.append("if (isValidCombination(header)) {");
    code.append("\n\t\t\t");
    code.append("Map<String, Double> valueList = new HashMap<String, Double>();");
    code.append("\n\t\t\t");
    code.append("Map<String, Double> ps = new HashMap<String, Double>();");
    code.append("\n\t\t\t");
    code.append("for (int j = 0; j < I.size(); j++) {");
    code.append("\n\t\t\t\t");
    code.append("if (I.get(j) instanceof NodePs) {");
    code.append("\n\t\t\t\t\t");
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Map<String,Double>>> res = I.get(j).vsp();");
    code.append("\n\t\t\t\t\t");
    code.append("ps = res.get(cp.get(i).get(j)).getValue();");
    code.append("\n\t\t\t\t");
    code.append("}");
    code.append("\n\t\t\t\t");
    code.append("else {");
    code.append("\n\t\t\t\t\t");
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> res = I.get(j).vsp();");
    code.append("\n\t\t\t\t\t");
    code.append("valueList.put(I.get(j).name(), ((Number) res.get(cp.get(i).get(j)).getValue()).doubleValue());");
    code.append("\n\t\t\t\t");
    code.append("}");
    code.append("\n\t\t\t");
    code.append("}");
    code.append("\n\t\t\t");
    code.append("for (Map.Entry<String, Double> entry : ps.entrySet()) {");
    code.append("\n\t\t\t\t");
    code.append("newValue += ps.get(entry.getKey()) * valueList.get(entry.getKey());");
    code.append("\n\t\t\t");
    code.append("}");
    code.append("\n\t\t\t");
    code.append("ovsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>, Object>(header, newValue));");
    code.append("\n\t\t\t");
    code.append("}");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    String _name_2 = p.getOp().getName();
    String _plus_3 = ("this.NODE_COLLECTION.put(\"" + _name_2);
    String _plus_4 = (_plus_3 + "\", new NodeObject(\"");
    String _name_3 = p.getOp().getName();
    String _plus_5 = (_plus_4 + _name_3);
    String _plus_6 = (_plus_5 + "\", ovsp));");
    code.append(_plus_6);
    code.append("\n");
    code.append("}");
    this.LOCAL_RESOLUTION_CODE.append(code);
    this.LOCAL_RESOLUTION_CODE.append("\n\n");
    this.LOCAL_RESOLUTION_CODE.append("\n\n");
    return code.toString();
  }

  public String resolve(final EPROD p) {
    StringBuilder code = new StringBuilder();
    code.append("void");
    code.append(" ");
    String _name = p.getName();
    String _plus = ("resolve_" + _name);
    code.append(_plus);
    code.append("(");
    code.append("List<Node>");
    code.append(" ");
    code.append("I");
    code.append(") {");
    code.append("\n\t");
    if (this.CHECK_FOR_IS_SAM_IN_CONTRADICTION) {
      code.append("List<List<List<SimpleEntry<String,Integer>>>> headerList = new ArrayList<List<List<SimpleEntry<String,Integer>>>>();");
      code.append("\n\t");
      code.append("for (int i = 0; i < I.size(); i++) {");
      code.append("\n\t\t");
      code.append("if (I.get(i).header(0) != null) {");
      code.append("\n\t\t\t");
      code.append("headerList.add(I.get(i).header(0));");
      code.append("\n\t\t");
      code.append("}");
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
      code.append("if (headerList.size() > 0 && !isSAM(headerList)) {");
      code.append("\n\t\t");
      String _name_1 = p.getName();
      String _plus_1 = ("System.err.println(\"ERROR: There is no SAM-Situation for EPROD pattern " + _name_1);
      String _plus_2 = (_plus_1 + "!\");");
      code.append(_plus_2);
      code.append("\n\t");
      code.append("}");
      code.append("\n\t");
    }
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> ovsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>();");
    code.append("\n\t");
    code.append("double newValue = 0.0;");
    code.append("\n\t");
    code.append("List<List<Integer>> ir = new ArrayList<List<Integer>>();");
    code.append("\n\t");
    code.append("for (Node i : I) {");
    code.append("\n\t\t");
    code.append("List<Integer> tmp = new ArrayList<Integer>();");
    code.append("\n\t\t");
    code.append("for (int j = 0; j < i.vsp().size(); j++) {");
    code.append("\n\t\t\t");
    code.append("tmp.add(j);");
    code.append("\n\t\t");
    code.append("}");
    code.append("\n\t\t");
    code.append("ir.add(tmp);");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    code.append("List<List<Integer>> cp = getCartesianProduct(new ArrayList<Integer>(), 0, ir, new ArrayList<List<Integer>>());");
    code.append("\n\t");
    code.append("for (int i = 0; i < cp.size(); i++) {");
    code.append("\n\t\t");
    code.append("newValue = 0.0;");
    code.append("\n\t\t");
    code.append("List<List<SimpleEntry<String,Integer>>> header = new ArrayList<List<SimpleEntry<String,Integer>>>();");
    code.append("\n\t\t");
    code.append("for (int j = 0; j < cp.get(i).size(); j++) {");
    code.append(this.jf.generateHeaderRow());
    code.append("\n\t\t");
    code.append("}");
    code.append("\n\t\t");
    code.append("if (isValidCombination(header)) {");
    code.append("\n\t\t\t");
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> res = I.get(0).vsp();");
    code.append("\n\t\t\t");
    code.append("newValue = ((Number) res.get(cp.get(i).get(0)).getValue()).doubleValue();");
    code.append("\n\t\t\t");
    code.append("ovsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>, Object>(header, newValue));");
    code.append("\n\t\t\t");
    code.append("}");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    String _name_2 = p.getOp().getName();
    String _plus_3 = ("this.NODE_COLLECTION.put(\"" + _name_2);
    String _plus_4 = (_plus_3 + "\", new NodeObject(\"");
    String _name_3 = p.getOp().getName();
    String _plus_5 = (_plus_4 + _name_3);
    String _plus_6 = (_plus_5 + "\", ovsp));");
    code.append(_plus_6);
    code.append("\n");
    code.append("}");
    this.LOCAL_RESOLUTION_CODE.append(code);
    this.LOCAL_RESOLUTION_CODE.append("\n\n");
    this.LOCAL_RESOLUTION_CODE.append("\n\n");
    return code.toString();
  }

  public String resolve(final PTCC p) {
    StringBuilder code = new StringBuilder();
    StringBuilder pcc_transf_code = new StringBuilder();
    String _name = p.getName();
    String _plus = ("resolve_" + _name);
    String _plus_1 = (_plus + "_pf");
    this.LOCAL_RESOLUTION_CODE.append(this.jf.resolveParetoFilter(_plus_1, p.getMax(), this.CHECK_FOR_IS_SAM_IN_CONTRADICTION));
    this.LOCAL_RESOLUTION_CODE.append("\n\n");
    this.LOCAL_RESOLUTION_CODE.append("\n\n");
    code.append("void");
    code.append(" ");
    String _name_1 = p.getName();
    String _plus_2 = ("resolve_" + _name_1);
    code.append(_plus_2);
    code.append("(");
    code.append("List<Node>");
    code.append(" ");
    code.append("I");
    code.append(") {");
    code.append("\n\t");
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> ovsp = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>();");
    code.append("\n\t");
    code.append("double newValue = 0.0;");
    code.append("\n\t");
    String _name_2 = p.getName();
    String _plus_3 = ("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>>> vcombpf = resolve_" + _name_2);
    String _plus_4 = (_plus_3 + "_pf(I);");
    code.append(_plus_4);
    code.append("\n\t");
    code.append("List<List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>> R = new ArrayList<List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>>();");
    code.append("\n\t");
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> S;");
    for (int i = 0; (i < p.getNo().size()); i++) {
      {
        code.append("\n\t");
        code.append("S = new ArrayList<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>>();");
        code.append("\n\t");
        code.append("for (int j = 0; j < vcombpf.size(); j++) {");
        code.append("\n\t\t");
        code.append((("S.add(vcombpf.get(j).getValue().get(" + Integer.valueOf(i)) + "));"));
        code.append("\n\t");
        code.append("}");
        String _name_3 = p.getIp().get(i).getName();
        String fname = ("resolve_pcc_trans_" + _name_3);
        pcc_transf_code.append(this.jf.resolveTransformation(fname, p.getNo().get(i)));
        pcc_transf_code.append("\n\n");
        code.append("\n\t");
        code.append((("R.add(" + fname) + "(S));"));
      }
    }
    code.append("\n\t");
    code.append("Map<String,Double> valueList = new HashMap<String,Double>();");
    code.append("\n\t");
    code.append("Map<String, Double> psm = new HashMap<String, Double>();");
    code.append("\n\t");
    code.append("for (int i = 0; i < vcombpf.size(); i++) {");
    code.append("\n\t\t");
    code.append("newValue = 0.0;");
    code.append("\n\t\t");
    code.append("for (int j = 0; j < R.size(); j++) {");
    code.append("\n\t\t\t");
    code.append("valueList.put(I.get(j).name(),((Number)R.get(j).get(i).getValue()).doubleValue());");
    code.append("\n\t\t");
    code.append("}");
    code.append("int key = vcombpf.get(i).getKey().get(I.size()-1).get(0).getValue();");
    code.append("\n\t\t");
    code.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Map<String,Double>>> psVsp = I.get(I.size()-1).vsp();");
    code.append("\n\t\t");
    code.append("psm = psVsp.get(key).getValue();");
    code.append("\n\t\t");
    code.append("for (Map.Entry<String, Double> entry : psm.entrySet()) {");
    code.append("\n\t\t\t");
    code.append("newValue += psm.get(entry.getKey()) * valueList.get(entry.getKey());");
    code.append("\n\t\t");
    code.append("}");
    code.append("\n\t\t");
    code.append("ovsp.add(new SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>(vcombpf.get(i).getKey(),newValue));");
    code.append("\n\t");
    code.append("}");
    code.append("\n\t");
    String _name_3 = p.getOp().getName();
    String _plus_5 = ("this.NODE_COLLECTION.put(\"" + _name_3);
    String _plus_6 = (_plus_5 + "\", new NodeObject(\"");
    String _name_4 = p.getOp().getName();
    String _plus_7 = (_plus_6 + _name_4);
    String _plus_8 = (_plus_7 + "\", ovsp));");
    code.append(_plus_8);
    code.append("\n");
    code.append("}");
    this.LOCAL_RESOLUTION_CODE.append(code);
    this.LOCAL_RESOLUTION_CODE.append("\n\n");
    this.LOCAL_RESOLUTION_CODE.append("\n\n");
    this.LOCAL_RESOLUTION_CODE.append(pcc_transf_code);
    return code.toString();
  }

  public Object addVariationPoints(final INIT init) {
    Object _xifexpression = null;
    VT _vt = init.getAinip().getVt();
    boolean _equals = Objects.equal(_vt, VT.ACTIVE);
    if (_equals) {
      _xifexpression = this.ACTIVE.put(init.getAinip().getName(), Integer.valueOf(this.he.getVSPInitSize(init.getAinip())));
    } else {
      Object _xifexpression_1 = null;
      VT _vt_1 = init.getAinip().getVt();
      boolean _equals_1 = Objects.equal(_vt_1, VT.CONSTANT);
      if (_equals_1) {
        _xifexpression_1 = this.CONSTANT.put(init.getAinip().getName(), Integer.valueOf(this.he.getVSPInitSize(init.getAinip())));
      } else {
        boolean _xblockexpression = false;
        {
          this.PASSIVE_LOOKUP.put(init.getAinip().getName(), Integer.valueOf(this.he.getVSPInitSize(init.getAinip())));
          String _name = init.getAinip().getName();
          int _vSPInitSize = this.he.getVSPInitSize(init.getAinip());
          AbstractMap.SimpleEntry<String, Integer> _simpleEntry = new AbstractMap.SimpleEntry<String, Integer>(_name, Integer.valueOf(_vSPInitSize));
          _xblockexpression = this.PASSIVE_LOOKUP_LIST.add(_simpleEntry);
        }
        _xifexpression_1 = Boolean.valueOf(_xblockexpression);
      }
      _xifexpression = ((Object)_xifexpression_1);
    }
    return _xifexpression;
  }
}
