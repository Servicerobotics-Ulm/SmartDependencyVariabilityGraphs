package org.xtext.bb.generator;

import java.util.Map;
import java.util.Set;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class FinalEvaluation {
  public static CharSequence generateSolveCode(final String outputName, final boolean foimax, final String CALL_SEQUENCE_CODE, final Map<String, Integer> ACTIVE, final Map<String, Integer> PASSIVE_LOOKUP, final Map<String, String> ACTIVE_BBNAME, final Map<String, Integer> ACTIVE_IINDEX, final Map<String, String> ACTIVE_VE) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void solve() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<Node> params;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<List<Node>> params_2d;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(CALL_SEQUENCE_CODE, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Integer> active = new HashMap<String, Integer>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Integer> passive = new HashMap<String, Integer>();");
    _builder.newLine();
    _builder.newLine();
    {
      Set<Map.Entry<String, Integer>> _entrySet = ACTIVE.entrySet();
      for(final Map.Entry<String, Integer> i : _entrySet) {
        _builder.append("\t");
        _builder.append("active.put(\"");
        String _key = i.getKey();
        _builder.append(_key, "\t");
        _builder.append("\",");
        Integer _value = i.getValue();
        _builder.append(_value, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Set<Map.Entry<String, Integer>> _entrySet_1 = PASSIVE_LOOKUP.entrySet();
      for(final Map.Entry<String, Integer> i_1 : _entrySet_1) {
        _builder.append("\t");
        _builder.append("passive.put(\"");
        String _key_1 = i_1.getKey();
        _builder.append(_key_1, "\t");
        _builder.append("\",");
        Integer _value_1 = i_1.getValue();
        _builder.append(_value_1, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, String> ACTIVE_BBNAME = new HashMap<String, String>();");
    _builder.newLine();
    {
      Set<Map.Entry<String, String>> _entrySet_2 = ACTIVE_BBNAME.entrySet();
      for(final Map.Entry<String, String> i_2 : _entrySet_2) {
        _builder.append("\t");
        _builder.append("ACTIVE_BBNAME.put(\"");
        String _key_2 = i_2.getKey();
        _builder.append(_key_2, "\t");
        _builder.append("\",\"");
        String _value_2 = i_2.getValue();
        _builder.append(_value_2, "\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("Map<String, Integer> ACTIVE_IINDEX = new HashMap<String, Integer>();");
    _builder.newLine();
    {
      Set<Map.Entry<String, Integer>> _entrySet_3 = ACTIVE_IINDEX.entrySet();
      for(final Map.Entry<String, Integer> i_3 : _entrySet_3) {
        _builder.append("\t");
        _builder.append("ACTIVE_IINDEX.put(\"");
        String _key_3 = i_3.getKey();
        _builder.append(_key_3, "\t");
        _builder.append("\",");
        Integer _value_3 = i_3.getValue();
        _builder.append(_value_3, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("Map<String, String> ACTIVE_VE = new HashMap<String, String>();");
    _builder.newLine();
    {
      Set<Map.Entry<String, String>> _entrySet_4 = ACTIVE_VE.entrySet();
      for(final Map.Entry<String, String> i_4 : _entrySet_4) {
        _builder.append("\t");
        _builder.append("ACTIVE_VE.put(\"");
        String _key_4 = i_4.getKey();
        _builder.append(_key_4, "\t");
        _builder.append("\",\"");
        String _value_4 = i_4.getValue();
        _builder.append(_value_4, "\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Node result = NODE_COLLECTION.get(\"");
    _builder.append(outputName, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("int cnt = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> rtmp = result.vsp();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object> finalSlot = null;");
    _builder.newLine();
    {
      if (foimax) {
        _builder.append("\t");
        _builder.append("double finalValue = Double.MIN_VALUE;");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("double finalValue = Double.MAX_VALUE;");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("int finalIndex = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object> i : rtmp) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<SimpleEntry<String,Integer>> AleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, Boolean> AflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<SimpleEntry<String,Integer>> PleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, Boolean> PflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<List<SimpleEntry<String,Integer>>> header = i.getKey();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (List<SimpleEntry<String,Integer>> headerRow : header) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (SimpleEntry<String,Integer> headerEntry : headerRow) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.print(headerEntry.getKey()+\": \"+headerEntry.getValue());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.print(\"\\t\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (active.containsKey(headerEntry.getKey()) && !AflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("AleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("AflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (passive.containsKey(headerEntry.getKey()) && !PflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"################## ACTIVE VARIANT: \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int j = 0; j < AleafNamesAndIndices.size(); j++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(AleafNamesAndIndices.get(j).getKey() + \": \" + AleafNamesAndIndices.get(j).getValue());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"################## FOR PASSIVE STATES: \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int j = 0; j < PleafNamesAndIndices.size(); j++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(PleafNamesAndIndices.get(j).getKey() + \": \" + PleafNamesAndIndices.get(j).getValue());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"=================> [\"+cnt+\", \"+i.getValue()+\"]\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"------------------------------------\");");
    _builder.newLine();
    _builder.newLine();
    {
      if (foimax) {
        _builder.append("\t\t");
        _builder.append("if (((Number)i.getValue()).doubleValue() > finalValue) {");
        _builder.newLine();
      } else {
        _builder.append("\t\t");
        _builder.append("if (((Number)i.getValue()).doubleValue() < finalValue) {");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("finalValue = ((Number)i.getValue()).doubleValue();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("finalSlot = i;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("finalIndex = cnt;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("cnt++;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"====================== Final Result ======================\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (List<SimpleEntry<String,Integer>> headerRow : finalSlot.getKey()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (SimpleEntry<String,Integer> headerEntry : headerRow) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.print(headerEntry.getKey()+\": \"+headerEntry.getValue());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.print(\"\\t\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<SimpleEntry<String,Integer>> AleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Boolean> AflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<SimpleEntry<String,Integer>> PleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Boolean> PflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (List<SimpleEntry<String,Integer>> headerRow : finalSlot.getKey()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (SimpleEntry<String,Integer> headerEntry : headerRow) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (active.containsKey(headerEntry.getKey()) && !AflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("AleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("AflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (passive.containsKey(headerEntry.getKey()) && !PflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String dvgConfiguration = \"{\\n\\t\\\"dvg-configuration\\\":\\n\\t\\t[\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"################## BEST ACTIVE VARIANT: \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (int i = 0; i < AleafNamesAndIndices.size(); i++) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> lse = this.NODE_COLLECTION.get(AleafNamesAndIndices.get(i).getKey()).vsp();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object> se = lse.get(AleafNamesAndIndices.get(i).getValue());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dvgConfiguration += \"\\t\\t\\t\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dvgConfiguration += createJSONMessageEntry(ACTIVE_BBNAME.get(AleafNamesAndIndices.get(i).getKey()), ACTIVE_IINDEX.get(AleafNamesAndIndices.get(i).getKey()), ACTIVE_VE.get(AleafNamesAndIndices.get(i).getKey()), se.getValue());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (i < AleafNamesAndIndices.size()-1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dvgConfiguration += \",\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dvgConfiguration += \"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(AleafNamesAndIndices.get(i).getKey() + \": \" + AleafNamesAndIndices.get(i).getValue());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"################## FOR IDEAL PASSIVE STATES: \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (int j = 0; j < PleafNamesAndIndices.size(); j++) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(PleafNamesAndIndices.get(j).getKey() + \": \" + PleafNamesAndIndices.get(j).getValue());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"=================> [\"+finalIndex+\", \"+finalSlot.getValue()+\"]\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("dvgConfiguration += \"\\t\\t]\\n}\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("FileWriter myWriter = new FileWriter(\"dvgConfiguration.json\", true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("myWriter.write(dvgConfiguration+\"\\n\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("myWriter.close();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("catch (IOException e) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println(\"An error occurred.\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public static CharSequence generateSolveCode(final String outputName, final boolean foimax, final String CALL_SEQUENCE_CODE, final Map<String, Integer> ACTIVE, final Map<String, Integer> PASSIVE, final int size) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void solve() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<Node> params;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<List<Node>> params_2d;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int solution = -1;");
    _builder.newLine();
    {
      if (foimax) {
        _builder.append("\t");
        _builder.append("double prevValue = Double.MIN_VALUE;");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("double prevValue = Double.MAX_VALUE;");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("int solutionIndex = -1;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object> solutionSlot = null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (int allocation = 0; allocation < ");
    String _string = Integer.valueOf(size).toString();
    _builder.append(_string, "\t");
    _builder.append("; allocation++) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"**********************************************************************************\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"**********************************************************************************\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"**********************************************************************************\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(CALL_SEQUENCE_CODE, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, Integer> active = new HashMap<String, Integer>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, Integer> passive = new HashMap<String, Integer>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      Set<Map.Entry<String, Integer>> _entrySet = ACTIVE.entrySet();
      for(final Map.Entry<String, Integer> i : _entrySet) {
        _builder.append("\t\t");
        _builder.append("active.put(\"");
        String _key = i.getKey();
        _builder.append(_key, "\t\t");
        _builder.append("\",");
        Integer _value = i.getValue();
        _builder.append(_value, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      Set<Map.Entry<String, Integer>> _entrySet_1 = PASSIVE.entrySet();
      for(final Map.Entry<String, Integer> i_1 : _entrySet_1) {
        _builder.append("\t\t");
        _builder.append("passive.put(\"");
        String _key_1 = i_1.getKey();
        _builder.append(_key_1, "\t\t");
        _builder.append("\",");
        Integer _value_1 = i_1.getValue();
        _builder.append(_value_1, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Node result = NODE_COLLECTION.get(\"");
    _builder.append(outputName, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("int cnt = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> rtmp = result.vsp();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object> finalSlot = null;");
    _builder.newLine();
    {
      if (foimax) {
        _builder.append("\t\t");
        _builder.append("double finalValue = Double.MIN_VALUE;");
        _builder.newLine();
      } else {
        _builder.append("\t\t");
        _builder.append("double finalValue = Double.MAX_VALUE;");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("int finalIndex = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object> i : rtmp) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("List<SimpleEntry<String,Integer>> AleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Map<String, Boolean> AflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("List<SimpleEntry<String,Integer>> PleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Map<String, Boolean> PflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("List<List<SimpleEntry<String,Integer>>> header = i.getKey();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (List<SimpleEntry<String,Integer>> headerRow : header) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (SimpleEntry<String,Integer> headerEntry : headerRow) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.print(headerEntry.getKey()+\": \"+headerEntry.getValue());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.print(\"\\t\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (active.containsKey(headerEntry.getKey()) && !AflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("AleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("AflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (passive.containsKey(headerEntry.getKey()) && !PflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("PleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("PflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"################## ACTIVE VARIANT: \");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int j = 0; j < AleafNamesAndIndices.size(); j++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(AleafNamesAndIndices.get(j).getKey() + \": \" + AleafNamesAndIndices.get(j).getValue());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"################## FOR PASSIVE STATES: \");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int j = 0; j < PleafNamesAndIndices.size(); j++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(PleafNamesAndIndices.get(j).getKey() + \": \" + PleafNamesAndIndices.get(j).getValue());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"=================> [\"+cnt+\", \"+i.getValue()+\"]\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"------------------------------------\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      if (foimax) {
        _builder.append("\t\t");
        _builder.append("if (((Number)i.getValue()).doubleValue() > finalValue) {");
        _builder.newLine();
      } else {
        _builder.append("\t\t");
        _builder.append("if (((Number)i.getValue()).doubleValue() < finalValue) {");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("finalValue = ((Number)i.getValue()).doubleValue();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("finalSlot = i;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("finalIndex = cnt;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("cnt++;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"====================== Final Result ====================== \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (List<SimpleEntry<String,Integer>> headerRow : finalSlot.getKey()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (SimpleEntry<String,Integer> headerEntry : headerRow) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.print(headerEntry.getKey()+\": \"+headerEntry.getValue());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.print(\"\\t\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<SimpleEntry<String,Integer>> AleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, Boolean> AflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<SimpleEntry<String,Integer>> PleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, Boolean> PflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (List<SimpleEntry<String,Integer>> headerRow : finalSlot.getKey()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (SimpleEntry<String,Integer> headerEntry : headerRow) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (active.containsKey(headerEntry.getKey()) && !AflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("AleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("AflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (passive.containsKey(headerEntry.getKey()) && !PflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("PleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("PflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"################## BEST ACTIVE VARIANT: \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < AleafNamesAndIndices.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(AleafNamesAndIndices.get(i).getKey() + \": \" + AleafNamesAndIndices.get(i).getValue());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"################## FOR IDEAL PASSIVE STATES: \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int j = 0; j < PleafNamesAndIndices.size(); j++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(PleafNamesAndIndices.get(j).getKey() + \": \" + PleafNamesAndIndices.get(j).getValue());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"=================> [\"+finalIndex+\", \"+finalSlot.getValue()+\"]\");");
    _builder.newLine();
    _builder.newLine();
    {
      if (foimax) {
        _builder.append("\t\t");
        _builder.append("if (finalValue > prevValue) {");
        _builder.newLine();
      } else {
        _builder.append("\t\t");
        _builder.append("if (finalValue < prevValue) {");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("solution = allocation;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("prevValue = finalValue;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("solutionSlot = finalSlot;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("solutionIndex = finalIndex;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} // End of allocation loop");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"Best allocation is: \" + solution);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Integer> active = new HashMap<String, Integer>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Integer> passive = new HashMap<String, Integer>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"====================== Final Result ====================== \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (List<SimpleEntry<String,Integer>> headerRow : solutionSlot.getKey()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (SimpleEntry<String,Integer> headerEntry : headerRow) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.print(headerEntry.getKey()+\": \"+headerEntry.getValue());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.print(\"\\t\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<SimpleEntry<String,Integer>> AleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Boolean> AflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<SimpleEntry<String,Integer>> PleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Boolean> PflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (List<SimpleEntry<String,Integer>> headerRow : solutionSlot.getKey()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (SimpleEntry<String,Integer> headerEntry : headerRow) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (active.containsKey(headerEntry.getKey()) && !AflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("AleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("AflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (passive.containsKey(headerEntry.getKey()) && !PflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"################## BEST ACTIVE VARIANT: \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (int i = 0; i < AleafNamesAndIndices.size(); i++) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(AleafNamesAndIndices.get(i).getKey() + \": \" + AleafNamesAndIndices.get(i).getValue());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"################## FOR IDEAL PASSIVE STATES: \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (int j = 0; j < PleafNamesAndIndices.size(); j++) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(PleafNamesAndIndices.get(j).getKey() + \": \" + PleafNamesAndIndices.get(j).getValue());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"=================> [\"+solutionIndex+\", \"+solutionSlot.getValue()+\"]\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public static CharSequence generateSolveCode(final String outputName, final boolean foimax, final String CALL_SEQUENCE_CODE, final Map<String, Integer> ACTIVE, final Map<String, Integer> PASSIVE_LOOKUP) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void solve() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<Node> params;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<List<Node>> params_2d;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(CALL_SEQUENCE_CODE, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Integer> active = new HashMap<String, Integer>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Integer> passive = new HashMap<String, Integer>();");
    _builder.newLine();
    _builder.newLine();
    {
      Set<Map.Entry<String, Integer>> _entrySet = ACTIVE.entrySet();
      for(final Map.Entry<String, Integer> i : _entrySet) {
        _builder.append("\t");
        _builder.append("active.put(\"");
        String _key = i.getKey();
        _builder.append(_key, "\t");
        _builder.append("\",");
        Integer _value = i.getValue();
        _builder.append(_value, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Set<Map.Entry<String, Integer>> _entrySet_1 = PASSIVE_LOOKUP.entrySet();
      for(final Map.Entry<String, Integer> i_1 : _entrySet_1) {
        _builder.append("\t");
        _builder.append("passive.put(\"");
        String _key_1 = i_1.getKey();
        _builder.append(_key_1, "\t");
        _builder.append("\",");
        Integer _value_1 = i_1.getValue();
        _builder.append(_value_1, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Node result = NODE_COLLECTION.get(\"");
    _builder.append(outputName, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("int cnt = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object>> rtmp = result.vsp();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object> finalSlot = null;");
    _builder.newLine();
    {
      if (foimax) {
        _builder.append("\t");
        _builder.append("double finalValue = Double.MIN_VALUE;");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("double finalValue = Double.MAX_VALUE;");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("int finalIndex = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (SimpleEntry<List<List<SimpleEntry<String,Integer>>>,Object> i : rtmp) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<SimpleEntry<String,Integer>> AleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, Boolean> AflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<SimpleEntry<String,Integer>> PleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, Boolean> PflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<List<SimpleEntry<String,Integer>>> header = i.getKey();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (List<SimpleEntry<String,Integer>> headerRow : header) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (SimpleEntry<String,Integer> headerEntry : headerRow) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.print(headerEntry.getKey()+\": \"+headerEntry.getValue());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.print(\"\\t\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (active.containsKey(headerEntry.getKey()) && !AflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("AleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("AflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (passive.containsKey(headerEntry.getKey()) && !PflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"################## ACTIVE VARIANT: \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int j = 0; j < AleafNamesAndIndices.size(); j++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(AleafNamesAndIndices.get(j).getKey() + \": \" + AleafNamesAndIndices.get(j).getValue());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"################## FOR PASSIVE STATES: \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int j = 0; j < PleafNamesAndIndices.size(); j++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(PleafNamesAndIndices.get(j).getKey() + \": \" + PleafNamesAndIndices.get(j).getValue());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"=================> [\"+cnt+\", \"+i.getValue()+\"]\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"------------------------------------\");");
    _builder.newLine();
    _builder.newLine();
    {
      if (foimax) {
        _builder.append("\t\t");
        _builder.append("if (((Number)i.getValue()).doubleValue() > finalValue) {");
        _builder.newLine();
      } else {
        _builder.append("\t\t");
        _builder.append("if (((Number)i.getValue()).doubleValue() < finalValue) {");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("finalValue = ((Number)i.getValue()).doubleValue();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("finalSlot = i;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("finalIndex = cnt;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("cnt++;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"====================== Final Result ======================\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (List<SimpleEntry<String,Integer>> headerRow : finalSlot.getKey()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (SimpleEntry<String,Integer> headerEntry : headerRow) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.print(headerEntry.getKey()+\": \"+headerEntry.getValue());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.print(\"\\t\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<SimpleEntry<String,Integer>> AleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Boolean> AflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<SimpleEntry<String,Integer>> PleafNamesAndIndices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Boolean> PflagLeaf = new HashMap<String, Boolean>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (List<SimpleEntry<String,Integer>> headerRow : finalSlot.getKey()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (SimpleEntry<String,Integer> headerEntry : headerRow) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (active.containsKey(headerEntry.getKey()) && !AflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("AleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("AflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (passive.containsKey(headerEntry.getKey()) && !PflagLeaf.containsKey(headerEntry.getKey())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PleafNamesAndIndices.add(new SimpleEntry<String,Integer>(headerEntry.getKey(), headerEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PflagLeaf.put(headerEntry.getKey(),true);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"################## BEST ACTIVE VARIANT: \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (int i = 0; i < AleafNamesAndIndices.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(AleafNamesAndIndices.get(i).getKey() + \": \" + AleafNamesAndIndices.get(i).getValue());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"################## FOR IDEAL PASSIVE STATES: \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (int j = 0; j < PleafNamesAndIndices.size(); j++) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(PleafNamesAndIndices.get(j).getKey() + \": \" + PleafNamesAndIndices.get(j).getValue());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"=================> [\"+finalIndex+\", \"+finalSlot.getValue()+\"]\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
