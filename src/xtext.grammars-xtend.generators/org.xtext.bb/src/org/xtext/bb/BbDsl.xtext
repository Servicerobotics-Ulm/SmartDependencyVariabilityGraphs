// automatically generated by Xtext
grammar org.xtext.bb.BbDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/dor" as dor
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.example.org/vi" as vi
import "http://www.example.org/bbn" 

BuildingBlockDescription returns BuildingBlockDescription:
	'BuildingBlockDescription'
	name=EString
	'{'
		('dvg' dvg=[DVG|EString])?
		'bb' '{' bb+=BuildingBlock ( "," bb+=BuildingBlock)* '}' 
		('dt' '{' dt+=Decomposition ( "," dt+=Decomposition)* '}' )?
		('c' '{' c+=Container ( "," c+=Container)* '}' )?
	'}';

BuildingBlock returns BuildingBlock:
	BuildingBlock_Impl | BuildingBlockInst;

Decomposition returns Decomposition:
	Loop | Sequential | Parallel | ConditionalFork | EquivalenceFork | Unsequenceable;





InputRelationship returns InputRelationship:
	Mandatory | Optional | AND | XOR | OR;



Pattern returns Pattern:
	EPROD | EQUF | INIT | SAPRO | COMF | RPRO | APRO | TRAN | PTCC | CONT | MAGR | DMAGR;







DataObjectDef returns dor::DataObjectDef:
	BoundedDataObjectDef | UnboundedDataObjectDef;





TypeDef returns dor::TypeDef:
	ReferenceDef | BoolDef | IntegerDef | RealDef | StringDef;



VSPInit returns vi::VSPInit:
	ComplexVSPInit | BoolVSPInit | IntegerVSPInit | RealVSPInit | StringVSPInit;






Type returns vi::Type:
	Bool | Integer | Real | String0;





Port returns Port:
	Output | Input;




OutputPort returns OutputPort:
	OutputPort_Impl | InitPort;

InputPort returns InputPort:
	InputPort_Impl | ExtInputPort;

AbstractInitPort returns AbstractInitPort:
	InitPort | InitCPort | InitWSMPort;

OutputCPort returns OutputCPort:
	OutputCPort_Impl | InitCPort;



InputCPort returns InputCPort:
	InputCPort_Impl | ExtInputCPort;

ComparisonCOp returns ComparisonCOp:
	Equal | GreaterThan | LessThan;

OutputPPort returns OutputPPort:
	OutputWSMPort_Impl | InitWSMPort;


NormalizationCOp returns NormalizationCOp:
	LinearNormalization;

InputPPort returns InputPPort:
	InputWSMPort_Impl | ExtInputWSMPort;

RatingCOp returns RatingCOp:
	RatingCOp_Impl | WSM;


Fork returns Fork:
	ConditionalFork | EquivalenceFork;





VariabilityEntity returns VariabilityEntity:
	Output | Input | PropertyInst | ParameterInst | ContextInst | PortElement | Number | Condition;













InternalPortRef returns InternalPortRef:
	InputPort_Impl | InternalOutputPort | ExtInputPort;



OutputWSMPort returns OutputWSMPort:
	OutputWSMPort_Impl | InitWSMPort;

BuildingBlock_Impl returns BuildingBlock:
	'BuildingBlock'
	name=EString
	'{'
		('taskName' taskName=EString)?
		'blocktype' blocktype=BlockType
		('dt' '(' dt+=[Decomposition|EString] ( "," dt+=[Decomposition|EString])* ')' )?
		('allocationCandidates' '(' allocationCandidates+=[BuildingBlockDescription|EString] ( "," allocationCandidates+=[BuildingBlockDescription|EString])* ')' )?
		('ves' ves=VariabilityEntitySet)?
		('o' '{' o+=Output ( "," o+=Output)* '}' )?
		('ir' '{' ir+=InputRelationship ( "," ir+=InputRelationship)* '}' )?
		('sharedresources' sharedresources=SharedResources)?
		('resourcegroupid' resourcegroupid=ResourceGroupId)?
	'}';

EString returns ecore::EString:
	STRING | ID;

DVG returns DVG:
	{DVG}
	'DVG'
	name=EString
	'{'
		('bb' bb=[BuildingBlock|EString])?
		('pattern' '{' pattern+=Pattern ( "," pattern+=Pattern)* '}' )?
		('bbcontainer' '{' bbcontainer+=BBContainer ( "," bbcontainer+=BBContainer)* '}' )?
	'}';

Container returns Container:
	{Container}
	'Container'
	name=EString
	'{'
		('bbr' bbr=[BuildingBlock|EString])?
		('bbc' bbc=BuildingBlock)?
		('bbi' bbi=BuildingBlockInst)?
	'}';

VariabilityEntitySet returns VariabilityEntitySet:
	{VariabilityEntitySet}
	'VariabilityEntitySet'
	'{'
		('pas' pas=ParameterSet)?
		('prs' prs=PropertySet)?
		('cs' cs=ContextSet)?
		('pes' pes=PortElementSet)?
	'}';

Output returns Output:
	{Output}
	'Output'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

enum BlockType returns BlockType:
				CONCRETE = 'CONCRETE' | ABSTRACT = 'ABSTRACT' | ALLOCATABLE = 'ALLOCATABLE';

SharedResources returns SharedResources:
	'SharedResources'
	'{'
		'number' number=EInt
	'}';

ResourceGroupId returns ResourceGroupId:
	'ResourceGroupId'
	'{'
		'number' number=EInt
	'}';

BuildingBlockInst returns BuildingBlockInst:
	'BuildingBlockInst'
	name=EString
	'{'
		('taskName' taskName=EString)?
		'blocktype' blocktype=BlockType
		('dt' '(' dt+=[Decomposition|EString] ( "," dt+=[Decomposition|EString])* ')' )?
		('allocationCandidates' '(' allocationCandidates+=[BuildingBlockDescription|EString] ( "," allocationCandidates+=[BuildingBlockDescription|EString])* ')' )?
		'c' c=[Container|EString]
		('ves' ves=VariabilityEntitySet)?
		('o' '{' o+=Output ( "," o+=Output)* '}' )?
		('ir' '{' ir+=InputRelationship ( "," ir+=InputRelationship)* '}' )?
		('sharedresources' sharedresources=SharedResources)?
		('resourcegroupid' resourcegroupid=ResourceGroupId)?
	'}';

ParameterSet returns ParameterSet:
	{ParameterSet}
	'ParameterSet'
	'{'
		('pi' '{' pi+=ParameterInst ( "," pi+=ParameterInst)* '}' )?
	'}';

PropertySet returns PropertySet:
	{PropertySet}
	'PropertySet'
	'{'
		('pi' '{' pi+=PropertyInst ( "," pi+=PropertyInst)* '}' )?
	'}';

ContextSet returns ContextSet:
	{ContextSet}
	'ContextSet'
	'{'
		('ci' '{' ci+=ContextInst ( "," ci+=ContextInst)* '}' )?
	'}';

PortElementSet returns PortElementSet:
	{PortElementSet}
	'PortElementSet'
	'{'
		('pe' '{' pe+=PortElement ( "," pe+=PortElement)* '}' )?
	'}';

ParameterInst returns ParameterInst:
	{ParameterInst}
	'ParameterInst'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

ElementDef returns dor::ElementDef:
	'ElementDef'
	name=EString
	'{'
		'td' td=TypeDef
		('siunit' siunit=SIUnit)?
	'}';

BoundedDataObjectDef returns dor::BoundedDataObjectDef:
	'BoundedDataObjectDef'
	name=EString
	'{'
		('description' description=EString)?
		'ed' '{' ed+=ElementDef ( "," ed+=ElementDef)* '}' 
		'vi' vi=VSPInit
	'}';

UnboundedDataObjectDef returns dor::UnboundedDataObjectDef:
	'UnboundedDataObjectDef'
	name=EString
	'{'
		('description' description=EString)?
		'ed' '{' ed+=ElementDef ( "," ed+=ElementDef)* '}' 
	'}';

SIUnit returns dor::SIUnit:
	{dor::SIUnit}
	'SIUnit'
	name=EString
	'{'
		('prefix' prefix=Prefix)?
	'}';

ReferenceDef returns dor::ReferenceDef:
	'ReferenceDef'
	'{'
		('cardinality' cardinality=EString)?
		'dod' dod=[dor::DataObjectDef|EString]
	'}';

BoolDef returns dor::BoolDef:
	{dor::BoolDef}
	'BoolDef'
	'{'
		('cardinality' cardinality=EString)?
	'}';

IntegerDef returns dor::IntegerDef:
	{dor::IntegerDef}
	'IntegerDef'
	'{'
		('cardinality' cardinality=EString)?
	'}';

RealDef returns dor::RealDef:
	{dor::RealDef}
	'RealDef'
	'{'
		('cardinality' cardinality=EString)?
	'}';

StringDef returns dor::StringDef:
	{dor::StringDef}
	'StringDef'
	'{'
		('cardinality' cardinality=EString)?
	'}';

Prefix returns dor::Prefix:
	{dor::Prefix}
	'Prefix'
	name=EString;

ComplexVSPInit returns vi::ComplexVSPInit:
	'ComplexVSPInit'
	'{'
		'vi' '{' vi+=VI ( "," vi+=VI)* '}' 
	'}';

BoolVSPInit returns vi::BoolVSPInit:
	'BoolVSPInit'
	'{'
		'vsp' '{' vsp+=EBoolean ( "," vsp+=EBoolean)* '}' 
	'}';

IntegerVSPInit returns vi::IntegerVSPInit:
	{vi::IntegerVSPInit}
	'IntegerVSPInit'
	'{'
		('vsp' '{' vsp+=EInt ( "," vsp+=EInt)* '}' )?
		('irg' irg=IntegerRandomGenerator)?
	'}';

RealVSPInit returns vi::RealVSPInit:
	{vi::RealVSPInit}
	'RealVSPInit'
	'{'
		('vsp' '{' vsp+=EDouble ( "," vsp+=EDouble)* '}' )?
		('rrg' rrg=RealRandomGenerator)?
	'}';

StringVSPInit returns vi::StringVSPInit:
	'StringVSPInit'
	'{'
		'vsp' '{' vsp+=EString ( "," vsp+=EString)* '}' 
	'}';

VI returns vi::VI:
	'VI'
	'{'
		'e' '{' e+=Element ( "," e+=Element)* '}' 
	'}';

Element returns vi::Element:
	'Element'
	name=EString
	'{'
		't' t=Type
	'}';

Bool returns vi::Bool:
	'Bool'
	'{'
		'bv' '{' bv+=BoolValue ( "," bv+=BoolValue)* '}' 
	'}';

Integer returns vi::Integer:
	'Integer'
	'{'
		'iv' '{' iv+=IntegerValue ( "," iv+=IntegerValue)* '}' 
	'}';

Real returns vi::Real:
	'Real'
	'{'
		'rv' '{' rv+=RealValue ( "," rv+=RealValue)* '}' 
	'}';

String0 returns vi::String:
	'String'
	'{'
		'sv' '{' sv+=StringValue ( "," sv+=StringValue)* '}' 
	'}';

BoolValue returns vi::BoolValue:
	value?='value'
	'BoolValue'
	;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

IntegerValue returns vi::IntegerValue:
	'IntegerValue'
	'{'
		'value' value=EInt
	'}';

EInt returns ecore::EInt:
	'-'? INT;

RealValue returns vi::RealValue:
	'RealValue'
	'{'
		'value' value=EDouble
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

StringValue returns vi::StringValue:
	'StringValue'
	'{'
		'value' value=EString
	'}';

IntegerRandomGenerator returns vi::IntegerRandomGenerator:
	'IntegerRandomGenerator'
	'{'
		'number' number=EInt
		'min' min=EInt
		'max' max=EInt
	'}';

RealRandomGenerator returns vi::RealRandomGenerator:
	'RealRandomGenerator'
	'{'
		'number' number=EInt
		'min' min=EInt
		'max' max=EInt
	'}';

PropertyInst returns PropertyInst:
	{PropertyInst}
	'PropertyInst'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

ContextInst returns ContextInst:
	{ContextInst}
	'ContextInst'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

PortElement returns PortElement:
	'PortElement'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		'e' e=[dor::ElementDef|EString]
		'port' port=[Port|EString]
		('doc' doc=DataObjectDef)?
	'}';

Input returns Input:
	{Input}
	'Input'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

Mandatory returns Mandatory:
	'Mandatory'
	name=EString
	'{'
		'in' in=Input
	'}';

Optional returns Optional:
	'Optional'
	name=EString
	'{'
		'in' in=Input
	'}';

AND returns AND:
	'AND'
	name=EString
	'{'
		'in' '{' in+=Input ( "," in+=Input)* '}' 
	'}';

XOR returns XOR:
	'XOR'
	name=EString
	'{'
		'in' '{' in+=Input ( "," in+=Input)* '}' 
	'}';

OR returns OR:
	'OR'
	name=EString
	'{'
		'in' '{' in+=Input ( "," in+=Input)* '}' 
	'}';

Loop returns Loop:
	'Loop'
	name=EString
	'{'
		'c' '{' c+=Container ( "," c+=Container)* '}' 
		'n' n=Number
	'}';

Sequential returns Sequential:
	'Sequential'
	name=EString
	'{'
		'c' '{' c+=Container ( "," c+=Container)* '}' 
	'}';

Parallel returns Parallel:
	'Parallel'
	name=EString
	'{'
		'p' p=Policy
		'c' '{' c+=Container ( "," c+=Container)* '}' 
	'}';

ConditionalFork returns ConditionalFork:
	'ConditionalFork'
	name=EString
	'{'
		'c' '{' c+=Container ( "," c+=Container)* '}' 
		'co' co=Condition
	'}';

EquivalenceFork returns EquivalenceFork:
	'EquivalenceFork'
	name=EString
	'{'
		'c' '{' c+=Container ( "," c+=Container)* '}' 
	'}';

Unsequenceable returns Unsequenceable:
	'Unsequenceable'
	name=EString
	'{'
		'c' '{' c+=Container ( "," c+=Container)* '}' 
	'}';

Number returns Number:
	{Number}
	'Number'
	name=EString
	'{'
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

enum Policy returns Policy:
				UNDEFINED = 'UNDEFINED' | WAITFORALL = 'WAITFORALL' | WAITFORFIRST = 'WAITFORFIRST';

Condition returns Condition:
	{Condition}
	'Condition'
	name=EString
	'{'
		('description' description=EString)?
		('dor' dor=[dor::DataObjectDef|EString])?
		('doc' doc=DataObjectDef)?
	'}';

BBContainer returns BBContainer:
	{BBContainer}
	'BBContainer'
	'{'
		('buildingblock' buildingblock=[BuildingBlock|EString])?
		('pattern' '{' pattern+=Pattern ( "," pattern+=Pattern)* '}' )?
		('bbcontainer' '{' bbcontainer+=BBContainer ( "," bbcontainer+=BBContainer)* '}' )?
	'}';

EPROD returns EPROD:
	'EPROD'
	name=EString
	'{'
		'op' op=OutputPort
		'ip' '{' ip+=InputPort ( "," ip+=InputPort)* '}' 
	'}';

EQUF returns EQUF:
	'EQUF'
	name=EString
	'{'
		'op' op=OutputPort
		'ip' ip=InputPort
	'}';

INIT returns INIT:
	'INIT'
	name=EString
	'{'
		'ainip' ainip=AbstractInitPort
	'}';

SAPRO returns SAPRO:
	'SAPRO'
	name=EString
	'{'
		('op' op=OutputPort)?
		'ip' '{' ip+=InputPort ( "," ip+=InputPort)* '}' 
		('ocp' ocp=OutputCPort)?
		('expr' expr=Expression)?
		('ca' ca=CombinationAssignment)?
	'}';

COMF returns COMF:
	'COMF'
	name=EString
	'{'
		'op' op=OutputPort
		'ip' ip=InputPort
		'icp' icp=InputCPort
		'co' co=ComparisonCOp
	'}';

RPRO returns RPRO:
	'RPRO'
	name=EString
	'{'
		('op' op=OutputPort)?
		('opp' opp=OutputPPort)?
		'ip' '{' ip+=InputPort ( "," ip+=InputPort)* '}' 
		'expr' expr=Expression
	'}';

APRO returns APRO:
	'APRO'
	name=EString
	'{'
		('op' op=OutputPort)?
		('ocp' ocp=OutputCPort)?
		'ip' '{' ip+=InputPort ( "," ip+=InputPort)* '}' 
		'description' '{' description+=Description ( "," description+=Description)* '}' 
	'}';

TRAN returns TRAN:
	'TRAN'
	name=EString
	'{'
		'op' op=OutputPort
		'ip' ip=InputPort
		'no' no=NormalizationCOp
	'}';

PTCC returns PTCC:
	'PTCC'
	name=EString
	'{'
		'max' '{' max+=EBoolean ( "," max+=EBoolean)* '}' 
		'op' op=OutputPort
		'ip' '{' ip+=InputPort ( "," ip+=InputPort)* '}' 
		'ipp' ipp=InputPPort
		'no' '{' no+=NormalizationCOp ( "," no+=NormalizationCOp)* '}' 
		'ro' ro=RatingCOp
	'}';

CONT returns CONT:
	'CONT'
	name=EString
	'{'
		'op' op=OutputPort
		'ip' '{' ip+=InputPort ( "," ip+=InputPort)* '}' 
		'ipp' ipp=InputPPort
		'ro' ro=RatingCOp
	'}';

MAGR returns MAGR:
	'MAGR'
	name=EString
	'{'
		('f' f=[Fork|EString])?
		('o' o=[Optional|EString])?
		('x' x=[XOR|EString])?
		('or' or=[OR|EString])?
		'aggr' '{' aggr+=AGGR ( "," aggr+=AGGR)* '}' 
	'}';

DMAGR returns DMAGR:
	'DMAGR'
	name=EString
	'{'
		'daggr' '{' daggr+=DAGGR ( "," daggr+=DAGGR)* '}' 
	'}';

OutputPort_Impl returns OutputPort:
	'OutputPort'
	name=EString
	'{'
		'vt' vt=VT
		('description' description=EString)?
		('gii' gii=EInt)?
		'rt' rt=RT
		've' ve=[VariabilityEntity|EString]
		('bbi' bbi=[BuildingBlockInst|EString])?
	'}';

InputPort_Impl returns InputPort:
	{InputPort}
	'InputPort'
	name=EString
	'{'
		('outputport' outputport=[OutputPort|EString])?
	'}';

enum VT returns VT:
				CONSTANT = 'CONSTANT' | ACTIVE = 'ACTIVE' | PASSIVE = 'PASSIVE';

enum RT returns RT:
				ABSOLUTE = 'ABSOLUTE' | RELATIVE = 'RELATIVE';

InitPort returns InitPort:
	('isList' isList=EBoolean)?
	'InitPort'
	name=EString
	'{'
		'vt' vt=VT
		('description' description=EString)?
		('gii' gii=EInt)?
		('kbisa' kbisa=EString)?
		('kbname' kbname=EString)?
		('kbvalue' kbvalue=EString)?
		('tcbname' tcbname=EString)?
		('tclCmd' tclCmd=EString)?
		('nrParams' nrParams=EInt)?
		('interface' interface=Interface)?
		('kbCmd' kbCmd=EString)?
		('toTclName' toTclName=EString)?
		('toTclInst' toTclInst=EInt)?
		'rt' rt=RT
		've' ve=[VariabilityEntity|EString]
		('bbi' bbi=[BuildingBlockInst|EString])?
		'vi' vi=VSPInit
	'}';

enum Interface returns Interface:
				STANDARD = 'STANDARD' | FROMTCL = 'FROMTCL' | TOTCL = 'TOTCL';

ExtInputPort returns ExtInputPort:
	'ExtInputPort'
	name=EString
	'{'
		'rt' rt=RT
		('outputport' outputport=[OutputPort|EString])?
		'dor' dor=[dor::DataObjectDef|EString]
		('er' er=[dor::ElementDef|EString])?
	'}';

InitCPort returns InitCPort:
	('isList' isList=EBoolean)?
	'InitCPort'
	name=EString
	'{'
		'vt' vt=VT
		('description' description=EString)?
		('gii' gii=EInt)?
		('kbisa' kbisa=EString)?
		('kbname' kbname=EString)?
		('kbvalue' kbvalue=EString)?
		('tcbname' tcbname=EString)?
		('tclCmd' tclCmd=EString)?
		('nrParams' nrParams=EInt)?
		('interface' interface=Interface)?
		('kbCmd' kbCmd=EString)?
		('toTclName' toTclName=EString)?
		('toTclInst' toTclInst=EInt)?
		've' ve=[VariabilityEntity|EString]
		('bbi' bbi=[BuildingBlockInst|EString])?
		'vi' vi=VSPInit
	'}';

InitWSMPort returns InitWSMPort:
	('isList' isList=EBoolean)?
	'InitWSMPort'
	name=EString
	'{'
		'vt' vt=VT
		('description' description=EString)?
		('gii' gii=EInt)?
		('kbisa' kbisa=EString)?
		('kbname' kbname=EString)?
		('kbvalue' kbvalue=EString)?
		('tcbname' tcbname=EString)?
		('tclCmd' tclCmd=EString)?
		('nrParams' nrParams=EInt)?
		('interface' interface=Interface)?
		('kbCmd' kbCmd=EString)?
		('toTclName' toTclName=EString)?
		('toTclInst' toTclInst=EInt)?
		've' ve=[VariabilityEntity|EString]
		('bbi' bbi=[BuildingBlockInst|EString])?
		'sws' sws=StaticWeights
	'}';

StaticWeights returns StaticWeights:
	'StaticWeights'
	'{'
		'sw' '{' sw+=StaticWeight ( "," sw+=StaticWeight)* '}' 
	'}';

StaticWeight returns StaticWeight:
	'StaticWeight'
	'{'
		'weight' weight=EDouble
		'inputport' inputport=[InputPort|EString]
	'}';

OutputCPort_Impl returns OutputCPort:
	'OutputCPort'
	name=EString
	'{'
		'vt' vt=VT
		('description' description=EString)?
		('gii' gii=EInt)?
		've' ve=[VariabilityEntity|EString]
		('bbi' bbi=[BuildingBlockInst|EString])?
	'}';

Expression returns Expression:
	'Expression'
	'{'
		'expr' expr=EString
	'}';

CombinationAssignment returns CombinationAssignment:
	'CombinationAssignment'
	'{'
		'combination' '{' combination+=Combination ( "," combination+=Combination)* '}' 
	'}';

Combination returns Combination:
	'Combination'
	'{'
		'element' '{' element+=Element0 ( "," element+=Element0)* '}' 
		'value' value=Value
	'}';

Element0 returns Element:
	'Element'
	'{'
		'index' index=EInt
	'}';

Value returns Value:
	'Value'
	'{'
		'value' value=EDouble
	'}';

InputCPort_Impl returns InputCPort:
	'InputCPort'
	name=EString
	'{'
		'outputcport' outputcport=[OutputCPort|EString]
	'}';

ExtInputCPort returns ExtInputCPort:
	'ExtInputCPort'
	name=EString
	'{'
		'outputcport' outputcport=[OutputCPort|EString]
		'dor' dor=[dor::DataObjectDef|EString]
		('er' er=[dor::ElementDef|EString])?
	'}';

Equal returns Equal:
	'Equal'
	'inverse' inverse=EBoolean
	'{'
		('accuracy' accuracy=Accuracy)?
	'}'
	;

GreaterThan returns GreaterThan:
	'GreaterThan'
	'inclusive' inclusive=EBoolean
	;

LessThan returns LessThan:
	'LessThan'
	'inclusive' inclusive=EBoolean
	;

Accuracy returns Accuracy:
	'Accuracy'
	'{'
		'value' value=EDouble
	'}';

OutputWSMPort_Impl returns OutputWSMPort:
	'OutputWSMPort'
	name=EString
	'{'
		'vt' vt=VT
		('description' description=EString)?
		('gii' gii=EInt)?
		've' ve=[VariabilityEntity|EString]
		('bbi' bbi=[BuildingBlockInst|EString])?
	'}';

Description returns Description:
	'Description'
	'{'
		('precond' precond=Precondition)?
		'core' core=Core
	'}';

Precondition returns Precondition:
	'Precondition'
	'{'
		'init' '{' init+=INIT ( "," init+=INIT)* '}' 
		'internalcomf' '{' internalcomf+=InternalCOMF ( "," internalcomf+=InternalCOMF)* '}' 
	'}';

Core returns Core:
	'Core'
	'{'
		'iop' iop=InternalOutputPort
		'iip' '{' iip+=InternalInputPort ( "," iip+=InternalInputPort)* '}' 
		('expr' expr=Expression)?
		('ca' ca=CombinationAssignment)?
	'}';

InternalCOMF returns InternalCOMF:
	'InternalCOMF'
	'{'
		'iop' iop=InternalOutputPort
		'iip' iip=InternalInputPort
		'icp' icp=InputCPort
		'co' co=ComparisonCOp
	'}';

InternalOutputPort returns InternalOutputPort:
	'InternalOutputPort'
	name=EString
	'{'
		'vt' vt=VT
		('description' description=EString)?
		('gii' gii=EInt)?
		'rt' rt=RT
		've' ve=[VariabilityEntity|EString]
		('bbi' bbi=[BuildingBlockInst|EString])?
	'}';

InternalInputPort returns InternalInputPort:
	'InternalInputPort'
	name=EString
	'{'
		'internalportref' internalportref=[InternalPortRef|EString]
	'}';

LinearNormalization returns LinearNormalization:
	'LinearNormalization'
	'{'
		'direction' direction=Direction
		('min' min=Min)?
		('max' max=Max)?
	'}';

enum Direction returns Direction:
				INC = 'INC' | DEC = 'DEC';

Min returns Min:
	'Min'
	'{'
		'value' value=EDouble
	'}';

Max returns Max:
	'Max'
	'{'
		'value' value=EDouble
	'}';

RatingCOp_Impl returns RatingCOp:
	{RatingCOp}
	'RatingCOp'
	;

InputWSMPort_Impl returns InputWSMPort:
	'InputWSMPort'
	name=EString
	'{'
		'outputwsmport' outputwsmport=[OutputWSMPort|EString]
	'}';

ExtInputWSMPort returns ExtInputWSMPort:
	'ExtInputWSMPort'
	name=EString
	'{'
		'outputwsmport' outputwsmport=[OutputWSMPort|EString]
		'dor' dor=[dor::DataObjectDef|EString]
		('er' er=[dor::ElementDef|EString])?
	'}';

WSM returns WSM:
	{WSM}
	'WSM'
	;

AGGR returns AGGR:
	'AGGR'
	'{'
		'op' op=OutputPort
		'ip' '{' ip+=InputPort ( "," ip+=InputPort)* '}' 
	'}';

DAGGR returns DAGGR:
	'DAGGR'
	'{'
		'op' op=OutputPort
	'}';
